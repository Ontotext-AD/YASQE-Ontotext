{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/entry.js","yasqe.min.js","lib/deparam.js","lib/flint.js","lib/trie.js","node_modules/codemirror/addon/display/fullscreen.js","node_modules/codemirror/addon/edit/matchbrackets.js","node_modules/codemirror/addon/fold/brace-fold.js","node_modules/codemirror/addon/fold/foldcode.js","node_modules/codemirror/addon/fold/foldgutter.js","node_modules/codemirror/addon/fold/xml-fold.js","node_modules/codemirror/addon/hint/show-hint.js","node_modules/codemirror/addon/runmode/runmode.js","node_modules/codemirror/addon/search/searchcursor.js","node_modules/yasgui-utils/node_modules/store/store.js","node_modules/yasgui-utils/package.json","node_modules/yasgui-utils/src/main.js","node_modules/yasgui-utils/src/storage.js","node_modules/yasgui-utils/src/svg.js","package.json","src/addon/edit/closebrackets.js","src/autocompleters/autocompleterBase.js","src/autocompleters/classes.js","src/autocompleters/properties.js","src/autocompleters/sesame-prefixes.js","src/autocompleters/standard.js","src/autocompleters/utils.js","src/autocompleters/variables.js","src/defaults.js","src/imgs.js","src/main.js","src/prefixUtils.js","src/sparql.js","src/tokenUtils.js","src/tooltip.js","src/utils.js"],"names":["e","exports","module","define","amd","f","window","global","self","YASQE","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"./main.js",2,"$","jQuery","deparam","params","coerce","obj","coerce_types","true","false","null","each","replace","split","j","v","val","param","key","decodeURIComponent","cur","keys","keys_last","test","shift","concat","isNaN","undefined","isArray","push","jquery",3,"mod","CodeMirror","defineMode","config","parserConfig","getTerminals","PN_LOCAL","BLANK_NODE_LABEL","IRI_REF","PN_CHARS_BASE","PN_CHARS_U","PN_CHARS","VARNAME","VAR1","VAR2","PN_PREFIX","HEX","PERCENT","PN_LOCAL_ESC","PLX","lexVersion","PNAME_NS","PNAME_LN","LANGTAG","EXPONENT","INTEGER","DECIMAL","DOUBLE","INTEGER_POSITIVE","DECIMAL_POSITIVE","DOUBLE_POSITIVE","INTEGER_NEGATIVE","DECIMAL_NEGATIVE","DOUBLE_NEGATIVE","ECHAR","hex4","unicode","STRING_LITERAL1","STRING_LITERAL2","STRING_LITERAL_LONG1","STRING_LITERAL_LONG2","WS","COMMENT","WS_OR_COMMENT_STAR","NIL","ANON","terminals","terminal","name","regex","RegExp","style","getPossibles","symbol","possibles","possiblesOb","ll1_table","property","toString","tokenBase","stream","state","nextToken","consumed","match","cat","text","keywords","current","toUpperCase","punct","recordFailurePos","col","column","errorStartPos","errorEndPos","tokenOb","setQueryType","queryType","setSideConditions","topSymbol","allowVars","allowBnodes","storeProperty","checkSideConditions","pos","possibleCurrent","possibleNext","OK","complete","finished","token","stack","pop","nextSymbols","allNillable","sp","item","lastProperty","indent","textAfter","closeBracket","substr","dn","indentTop","indentTable","indentUnit","*[&&,valueLogical]","&&","AS",")",",","||",";","*[,,expression]","*[,,objectPath]",".","]","{","OPTIONAL","MINUS","GRAPH","SERVICE","FILTER","BIND","VALUES","}","*[,,object]","*[/,pathEltOrInverse]","/","|","(","[","TRUE","FALSE","*[;,?[or([verbPath,verbSimple]),objectList]]","*[;,?[verb,objectList]]","*[UNION,groupGraphPattern]","UNION","*[graphPatternNotTriples,?.,?triplesBlock]","*[quadsNotTriples,?.,?triplesTemplate]","*[|,pathOneInPropertySet]","*[|,pathSequence]","*[||,conditionalAndExpression]","*dataBlockValue","UNDEF","*datasetClause","FROM","WHERE","*describeDatasetClause","ORDER","HAVING","GROUP","LIMIT","OFFSET","*graphNode","*graphNodePath","*groupCondition","STR","LANG","LANGMATCHES","DATATYPE","BOUND","IRI","URI","BNODE","RAND","ABS","CEIL","FLOOR","ROUND","CONCAT","STRLEN","UCASE","LCASE","ENCODE_FOR_URI","CONTAINS","STRSTARTS","STRENDS","STRBEFORE","STRAFTER","YEAR","MONTH","DAY","HOURS","MINUTES","SECONDS","TIMEZONE","TZ","NOW","UUID","STRUUID","MD5","SHA1","SHA256","SHA384","SHA512","COALESCE","IF","STRLANG","STRDT","SAMETERM","ISIRI","ISURI","ISBLANK","ISLITERAL","ISNUMERIC","SUBSTR","REPLACE","REGEX","EXISTS","NOT","*havingCondition","*or([[ (,*dataBlockValue,)],NIL])","*or([[*,unaryExpression],[/,unaryExpression]])","*","=","!=","<",">","<=",">=","IN","+","-","*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])","*or([var,[ (,expression,AS,var,)]])","*orderCondition","ASC","DESC","*prefixDecl","PREFIX","CONSTRUCT","DESCRIBE","ASK","INSERT","DELETE","SELECT","LOAD","CLEAR","DROP","ADD","MOVE","COPY","CREATE","WITH","*usingClause","USING","*var","*varOrIRIref","+graphNode","+graphNodePath","+groupCondition","+havingCondition","+or([var,[ (,expression,AS,var,)]])","+orderCondition","+varOrIRIref","?.","?DISTINCT","DISTINCT","!","COUNT","SUM","MIN","MAX","AVG","SAMPLE","GROUP_CONCAT","?GRAPH","?SILENT","SILENT","?SILENT_1","?SILENT_2","DEFAULT","NAMED","ALL","?SILENT_3","?SILENT_4","?WHERE","?[,,expression]","?[.,?constructTriples]","?[.,?triplesBlock]","?[.,?triplesTemplate]","?[;,SEPARATOR,=,string]","?[;,update]","?[AS,var]","?[INTO,graphRef]","INTO","?[or([verbPath,verbSimple]),objectList]","^","?[pathOneInPropertySet,*[|,pathOneInPropertySet]]","?[update1,?[;,update]]","?[verb,objectList]","?argList","?baseDecl","BASE","?constructTriples","?groupClause","?havingClause","?insertClause","?limitClause","?limitOffsetClauses","?offsetClause","?or([DISTINCT,REDUCED])","REDUCED","?or([LANGTAG,[^^,iriRef]])","^^","?or([[*,unaryExpression],[/,unaryExpression]])","?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])","?orderClause","?pathMod","?","?triplesBlock","?triplesTemplate","?whereClause","[ (,*dataBlockValue,)]","[ (,*var,)]","[ (,expression,)]","[ (,expression,AS,var,)]","[!=,numericExpression]","[&&,valueLogical]","[*,unaryExpression]","[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]","[+,multiplicativeExpression]","[,,expression]","[,,integer,}]","[,,objectPath]","[,,object]","[,,or([},[integer,}]])]","[-,multiplicativeExpression]","[.,?constructTriples]","[.,?triplesBlock]","[.,?triplesTemplate]","[/,pathEltOrInverse]","[/,unaryExpression]","[;,?[or([verbPath,verbSimple]),objectList]]","[;,?[verb,objectList]]","[;,SEPARATOR,=,string]","[;,update]","[<,numericExpression]","[<=,numericExpression]","[=,numericExpression]","[>,numericExpression]","[>=,numericExpression]","[AS,var]","[IN,expressionList]","[INTO,graphRef]","[NAMED,iriRef]","[NOT,IN,expressionList]","[UNION,groupGraphPattern]","[^^,iriRef]","[constructTemplate,*datasetClause,whereClause,solutionModifier]","[deleteClause,?insertClause]","[graphPatternNotTriples,?.,?triplesBlock]","[integer,or([[,,or([},[integer,}]])],}])]","[integer,}]","[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]","[or([verbPath,verbSimple]),objectList]","[pathOneInPropertySet,*[|,pathOneInPropertySet]]","[quadsNotTriples,?.,?triplesTemplate]","[update1,?[;,update]]","[verb,objectList]","[|,pathOneInPropertySet]","[|,pathSequence]","[||,conditionalAndExpression]","add","additiveExpression","aggregate","argList","askQuery","baseDecl","bind","blankNode","blankNodePropertyList","blankNodePropertyListPath","booleanLiteral","brackettedExpression","builtInCall","clear","collection","collectionPath","conditionalAndExpression","conditionalOrExpression","constraint","constructQuery","constructTemplate","constructTriples","copy","create","dataBlock","dataBlockValue","datasetClause","defaultGraphClause","delete1","DATA","deleteClause","describeDatasetClause","describeQuery","disallowBnodes","disallowVars","drop","existsFunc","expression","expressionList","filter","functionCall","graphGraphPattern","graphNode","graphNodePath","graphOrDefault","graphPatternNotTriples","graphRef","graphRefAll","graphTerm","groupClause","groupCondition","groupGraphPattern","groupGraphPatternSub","groupOrUnionGraphPattern","havingClause","havingCondition","inlineData","inlineDataFull","inlineDataOneVar","insert1","insertClause","integer","iriRef","iriRefOrFunction","limitClause","limitOffsetClauses","load","minusGraphPattern","modify","move","multiplicativeExpression","namedGraphClause","notExistsFunc","numericExpression","numericLiteral","numericLiteralNegative","numericLiteralPositive","numericLiteralUnsigned","object","objectList","objectListPath","objectPath","offsetClause","optionalGraphPattern","or([*,expression])","or([+or([var,[ (,expression,AS,var,)]]),*])","or([+varOrIRIref,*])","or([ASC,DESC])","or([DISTINCT,REDUCED])","or([LANGTAG,[^^,iriRef]])","or([NIL,[ (,*var,)]])","or([[ (,*dataBlockValue,)],NIL])","or([[ (,expression,)],NIL])","or([[*,unaryExpression],[/,unaryExpression]])","or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])","or([[,,or([},[integer,}]])],}])","or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])","or([[constructTemplate,*datasetClause,whereClause,solutionModifier],[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]])","or([[deleteClause,?insertClause],insertClause])","or([[integer,or([[,,or([},[integer,}]])],}])],[,,integer,}]])","or([defaultGraphClause,namedGraphClause])","or([inlineDataOneVar,inlineDataFull])","or([iriRef,[NAMED,iriRef]])","or([iriRef,a])","or([numericLiteralPositive,numericLiteralNegative])","or([queryAll,updateAll])","or([selectQuery,constructQuery,describeQuery,askQuery])","or([subSelect,groupGraphPatternSub])","or([var,[ (,expression,AS,var,)]])","or([verbPath,verbSimple])","or([},[integer,}]])","orderClause","orderCondition","path","pathAlternative","pathElt","pathEltOrInverse","pathMod","pathNegatedPropertySet","pathOneInPropertySet","pathPrimary","pathSequence","prefixDecl","prefixedName","primaryExpression","prologue","propertyList","propertyListNotEmpty","propertyListPath","propertyListPathNotEmpty","quadData","quadDataNoBnodes","quadPattern","quadPatternNoBnodes","quads","quadsNotTriples","queryAll","rdfLiteral","regexExpression","relationalExpression","selectClause","selectQuery","serviceGraphPattern","solutionModifier","sourceSelector","sparql11","strReplaceExpression","string","subSelect","substringExpression","triplesBlock","triplesNode","triplesNodePath","triplesSameSubject","triplesSameSubjectPath","triplesTemplate","unaryExpression","update","update1","updateAll","usingClause","valueLogical","valuesClause","var","varOrIRIref","varOrTerm","verb","verbPath","verbSimple","whereClause","defaultQueryType","startSymbol","acceptEmpty","tms","*[,, object]","*[(,),object]","*[(,),objectPath]","?[or([verbPath, verbSimple]),objectList]","startState","base","tokenize","electricChars","defineMIME","codemirror",4,"Trie","this","words","prefixes","children","prototype","insert","str","k","child","T","remove","strOld","strNew","countWord","ret","countPrefix","find","getAllWords","autoComplete",5,"setFullscreen","cm","wrap","getWrapperElement","fullScreenRestore","scrollTop","pageYOffset","scrollLeft","pageXOffset","width","height","className","document","documentElement","overflow","refresh","setNormal","info","scrollTo","defineOption","old","Init",6,"findMatchingBracket","where","strict","line","getLineHandle","ch","matching","charAt","dir","getTokenTypeAt","Pos","found","scanForBracket","from","to","forward","maxScanLen","maxScanLineLength","maxScanLines","re","bracketRegex","lineEnd","Math","min","lastLine","max","firstLine","lineNo","getLine","end","matchBrackets","autoclear","maxHighlightLen","maxHighlightLineLength","marks","ranges","listSelections","empty","head","markText","ie_lt8","focused","display","input","focus","operation","setTimeout","doMatchBrackets","currentlyHighlighted","navigator","userAgent","documentMode","off","on","defineExtension",7,"registerHelper","start","findOpening","openCh","at","pass","lineText","lastIndexOf","tokenType","startCh","startToken","endToken","endCh","count","outer","nextOpen","indexOf","nextClose","hasImport","getTokenAt","type","semi","prev","has","next","clipPos","hasInclude","slice",8,"doFold","options","force","getRange","allowFolded","range","finder","minSize","findMarksAt","__isFold","cleared","getOption","myWidget","makeWidget","myRange","e_preventDefault","replacedWith","clearOnEnter","signal","widget","createTextNode","createElement","appendChild","editorOptions","foldOptions","defaultOptions","newFoldFunction","rangeFinder","commands","toggleFold","foldCode","getCursor","fold","unfold","foldAll","unfoldAll","funcs","Array","arguments","helpers","getHelpers","auto","minFoldSize","scanUp",9,"State","parseOptions","opts","gutter","indicatorOpen","indicatorFolded","isFolded","marker","spec","elt","cloneNode","updateFoldInfo","foldGutter","foldOption","func","eachLine","mark","setGutterMarker","updateInViewport","vp","getViewport","onGutterClick","onChange","clearTimeout","changeUpdate","foldOnChangeTimeSpan","onViewportChange","updateViewportTimeSpan","onFold","clearGutter","./foldcode",10,"cmp","b","Iter","tagAt","iter","nextLine","prevLine","toTagEnd","gt","lastSlash","selfClose","toTagStart","lt","xmlTagStart","lastIndex","exec","index","toNextTag","toPrevTag","findMatchingClose","tag","startLine","findMatchingOpen","endLine","nameStartChar","nameChar","openTag","close","findMatchingTag","here","open","findEnclosingTag","scanForClosingTag",11,"retrieveHints","getter","then","async","id","asyncRunID","hints","Completion","buildOptions","onClose","getText","completion","buildKeyMap","handle","addBinding","bound","baseMap","hasOwnProperty","ourMap","Up","moveFocus","Down","PageUp","menuSize","PageDown","Home","setFocus","End","Enter","pick","Tab","Esc","custom","customKeys","extra","extraKeys","getHintElement","hintsElement","el","nodeName","parentNode","Widget","data","selectedHint","completions","list","HINT_ELEMENT_CLASS","ACTIVE_HINT_ELEMENT_CLASS","render","displayText","hintId","cursorCoords","alignWithWord","left","top","bottom","below","winW","innerWidth","body","offsetWidth","winH","innerHeight","offsetHeight","container","box","getBoundingClientRect","overlapY","curTop","cursor","overlapX","right","addKeyMap","keyMap","avoidWrap","changeActive","screenAmount","closeOnUnfocus","closingOnBlur","onBlur","onFocus","startScroll","getScrollInfo","onScroll","curScroll","editor","newTop","point","target","srcElement","completeOnSingleClick","firstChild","showHint","getHints","newOpts","hint","prop","somethingSelected","completionActive","showHints","active","replaceRange","completeSingle","showWidget","done","activity","finishUpdate","data_","clearDebounce","debounce","cancelAnimationFrame","startPos","startLen","closeOn","requestAnimationFrame","closeCharacters","fn","hintOptions","out","removeChild","removeKeyMap","node","childNodes","offsetTop","clientHeight","floor","getHelper","fromList","anyword","word","autocomplete",12,"runMode","modespec","callback","mode","getMode","defaults","ie","ie_lt9","nodeType","tabSize","innerHTML","content","idx","size","lines","splitLines","StringStream","blankLine","eol",13,"SearchCursor","doc","query","caseFold","atOccurrence","source","ignoreCase","matches","reverse","cutOff","newMatch","matchLen","origQuery","toLowerCase","orig","adjustPos","origTarget","last","ln","cut","folded","pos1","len1","findNext","findPrevious","savePosAndFail","maxLine","lineCount","newText","defineDocExtension","getSearchCursor","cmpPos","anchor","setSelections",14,"win","isLocalStorageNameSupported","localStorageName","err","ieKeyFix","forbiddenCharsRegex","storage","store","scriptTag","disabled","version","set","value","get","defaultVal","transact","transactionFn","getAll","forEach","serialize","JSON","stringify","deserialize","parse","setItem","getItem","removeItem","addBehavior","storageOwner","storageContainer","ActiveXObject","write","w","frames","withIEStorage","storeFunction","args","unshift","result","apply","setAttribute","save","getAttribute","removeAttribute","attributes","XMLDocument","attr","testKey","enabled","Function",15,"description","main","repository","url","licenses","author","maintainers","email","bugs","homepage","dependencies","_id","dist","shasum","tarball","_from","_npmVersion","_npmUser","directories","_shasum","_resolved","readme",16,"console","log","svg","yasgui-utils","nestedExists","../package.json","./storage.js","./svg.js",17,"times","day","month","year","root","exp","XMLSerializer","serializeToString","time","Date","getTime","removeAll",18,"draw","parent","svgString","getElement","append","parser","DOMParser","dom","parseFromString","svgContainer",19,"devDependencies","browserify","gulp","gulp-bump","gulp-concat","gulp-connect","gulp-embedlr","gulp-filter","gulp-git","gulp-jsvalidate","gulp-livereload","gulp-minify-css","gulp-notify","gulp-rename","gulp-streamify","gulp-tag-version","gulp-uglify","require-dir","run-sequence","vinyl-buffer","vinyl-source-stream","watchify","gulp-sourcemaps","exorcist","vinyl-transform","gulp-sass","bootstrap-sass","browserify-transform-tools","gulp-cssimport","web","optionalShim","../../lib/codemirror",20,"charsAround","enteringString","type1","buildKeymap","pairs","map","Backspace","Pass","around","closingBrackets","curType","isWordChar","SPACE_CHAR_REGEX","execCommand","sels","getSelections","replaceSelections","replaceSelection","buildExplodeHandler","indentLine","DEFAULT_BRACKETS","DEFAULT_EXPLODE_ON_ENTER","explode",21,"utils","yutils","yasqe","completionNotifications","completers","tries","eventInfo","needPossibleAdjustment","notificationName","is","scrollBar","offset","outerWidth","notification","css","storeBulkCompletions","completer","storageId","getPersistencyId","persistent","initCompleter","completionInit","bulk","storeArrayAsBulk","suggestions","completionsFromStorage","persistencyIdentifier","fromAutoShow","tryHintType","autoShow","hintConfig","wrappedHintCallback","getCompletionHintsObject","completerName","inArray","autocompleters","isValidCompletionPosition","callbacks","validPosition","success","invalidPosition","getSuggestionsFromToken","partialToken","stringToAutocomplete","autocompletionString","partialTokenLength","getSuggestionsAsHintObject","getCompleteToken","preProcessToken","wrappedCallback","hintList","suggestedString","postProcessToken","selectHint","returnObj","completionToken","callbackName","init","notifications","getEl","show","autoshow","appendTo","hide","getTrie","../../lib/trie.js","../utils.js",22,"fetchFromLov","previousToken","getPreviousNonWsToken","preprocessResourceTokenForCompletion","postprocessResourceTokenForCompletion","./utils","./utils.js",23,24,"tokenTypes","string-2","atom","appendPrefixIfNeeded","backendRepositoryID","results","prefixArray","bindings","namespace","prefix","sort","preprocessPrefixTokenForCompletion","colonIndex","lastNonWsTokenString","currentPrefix","substring","queryPrefixes","getPrefixesFromQuery","addPrefixes",25,"functions","lowercasedF","lowercasedToken","handlers","shown","select",26,"tokenPrefix","tokenPrefixUri","trim","maxResults","q","page","updateUrl","increasePage","doRequests","uri","total_results","fail","jqXHR","textStatus","errorThrown","loader","addClass","../imgs.js",27,"distinctVars","variable","nextEl","nextElClass","variables",28,"extend","highlightSelectionMatches","showToken","tabMode","autoCloseBrackets","lineNumbers","lineWrapping","brace","gutters","fixedGutter","syntaxErrorCheck","Ctrl-Space","Cmd-Space","Ctrl-D","deleteLine","Ctrl-K","Cmd-D","Cmd-K","Ctrl-/","commentLines","Cmd-/","Ctrl-Alt-Down","copyLineDown","Ctrl-Alt-Up","copyLineUp","Cmd-Alt-Down","Cmd-Alt-Up","Shift-Ctrl-F","doAutoFormat","Shift-Cmd-F","Ctrl-]","indentMore","Cmd-]","Ctrl-[","indentLess","Cmd-[","Ctrl-S","storeQuery","Cmd-S","Ctrl-Enter","executeQuery","Cmd-Enter","F11","setOption","cursorHeight","createShareLink","consumeShareLink","closest","sparql","showQueryButton","endpoint","requestMethod","acceptHeaderGraph","acceptHeaderSelect","acceptHeaderUpdate","namedGraphs","defaultGraphs","headers","beforeSend","error",29,"queryInvalid","download","share","warning","fullscreen","smallscreen",30,"imgs","rootEl","class","extendConfig","extendCmInstance","postProcessCmElement","extendedConfig","Autocompleters","getNextNonWsToken","lineNumber","charNumber","callbackOrConfig","getUrlArguments","removePrefixes","getValueWithoutComments","cleanedQuery","getValue","stringVal","getQueryType","getQueryMode","setCheckSyntaxErrors","isEnabled","checkSyntax","enableCompleter","addCompleterToSettings","disableCompleter","removeCompleterFromSettings","settings","splice","valueFromStorage","setValue","drawButtons","updateQueryButton","positionButtons","updateButtonsTransparency","prevQueryValid","urlParams","location","search","buttons","elementsOverlap","deepcheck","queryValid","precise","warningEl","expectedEncoded","expected","html","join","marginTop","marginLeft","len","registerAutocompleter","constructor","svgShare","click","event","stopPropagation","popup","textAreaLink","protocol","host","pathname","$this","mouseup","unbind","positions","position","outerHeight","toggleFullscreen","hasClass","xhr","abort","queryButtonIds","busy","valid","status","queryButton","queryStatus","removeClass","classNames","c","fromTextArea","textAreaEl","insertBefore","linesAreCommented","setCursor","getSelection","autoFormatRange","totalLines","totalChars","getTextArea","absStart","indexFromPos","absEnd","res","autoFormatLineBreaks","posFromIndex","breakAfterArray","breakAfterCharacters","breakBeforeCharacters","getBreakType","stackTrace","valueOf","currentLine","formattedQuery","breakType","../lib/deparam.js","../lib/flint.js","./addon/edit/closebrackets.js","./autocompleters/autocompleterBase.js","./autocompleters/classes.js","./autocompleters/properties.js","./autocompleters/sesame-prefixes.js","./autocompleters/standard.js","./autocompleters/variables.js","./defaults.js","./imgs.js","./prefixUtils.js","./sparql.js","./tokenUtils.js","./tooltip","codemirror/addon/display/fullscreen.js","codemirror/addon/edit/matchbrackets.js","codemirror/addon/fold/brace-fold.js","codemirror/addon/fold/foldcode.js","codemirror/addon/fold/foldgutter.js","codemirror/addon/fold/xml-fold.js","codemirror/addon/hint/show-hint.js","codemirror/addon/runmode/runmode.js","codemirror/addon/search/searchcursor.js",31,"existingPrefixes","addPrefixAsString","pref","prefixString","lastPrefix","lastPrefixLine","numLines","firstToken","previousIndent","getIndentFromLine","escapeRegex","shouldContinue","getPrefixesFromLine","lineOffset","colOffset","uriString",32,"getCookie","cname","ca","cookie","graphDBAuth","ajaxSetup","X-AUTH-TOKEN","ajaxConfig","Accept","getAcceptHeader","handlerDefined","handler","isEmptyObject","countAjaxConfig","countCallback","setQueryLimit","resetResults","ajax","queryMode","argName","merge","acceptHeader","qType",33,"prevToken",34,"tooltip","hover","repositionTooltip",35,"keyExists","objectToTest","exists","persistentIdCreator","persistencyId","getPositions","elem","comparePositions","p1","p2","r1","r2","pos2"],"mappings":"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CA,GAAA+I,GAAAE,EAAA5C,EAAA+B,MAAApI,GACA+I,KACAtJ,GAAAsJ,GAGA,MAAAtJ,GAAAkD,EAAAuG,WAtuIA,GAKAlD,IALArD,EAAAuG,YAOAC,sBACAC,MAAA,oBAAA,sBACAC,MACAC,OACAC,OACAC,QACAC,QACAC,mBACAH,KAAA,iBAAA,mBACAD,QACAK,mBACAJ,KAAA,iBAAA,mBACAK,OACAH,OACAI,OACAC,OACAC,YACAC,SACAC,SACAC,WACAC,UACAC,QACAC,UACAC,QACAC,eACAhB,KAAA,aAAA,eACAK,OACAH,OACAI,OACAS,OACAL,SACAH,OACAC,YACAC,SACAE,WACAC,UACAC,QACAC,WACAG,yBACAC,KAAA,uBAAA,yBACAC,OACApB,OACAqB,OACAC,OACAvH,QACAC,QACA8B,OACApC,WACA6H,QACAC,SACA/H,oBACAsC,QACAvB,YACAD,YACAgB,mBACAC,mBACAC,wBACAC,wBACAf,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,oBACAsG,gDACAtB,KAAA,8CAAA,gDACAG,OACAC,OACAC,OACAC,YACAC,SACAC,SACAC,WACAC,UACAC,QACAC,UACAC,QACAU,2BACAvB,KAAA,yBAAA,2BACAG,OACAC,OACAS,OACAL,SACAH,OACAC,YACAC,SACAE,WACAC,UACAC,QACAC,WACAY,8BACAC,OAAA,4BAAA,8BACA7H,QACAC,QACA8B,OACAuF,OACAC,OACA5H,WACA6H,QACAC,SACA/H,oBACAsC,QACAvB,YACAD,YACAgB,mBACAC,mBACAC,wBACAC,wBACAf,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,mBACAmF,OACAE,OACAC,YACAC,SACAC,SACAC,WACAC,UACAC,QACAC,UACAC,QACAa,8CACArB,KAAA,4CAAA,8CACAC,UAAA,4CAAA,8CACAC,OAAA,4CAAA,8CACAC,OAAA,4CAAA,8CACAC,SAAA,4CAAA,8CACAC,QAAA,4CAAA,8CACAC,MAAA,4CAAA,8CACAC,QAAA,4CAAA,8CACAC,QAC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,SACAC,kBACAC,YACAC,aACAC,WACAC,aACAC,YACAC,QACAC,SACAC,OACAC,SACAC,WACAC,WACAC,YACAC,MACAC,OACAC,QACAC,WACAC,OACAC,QACAC,UACAC,UACAC,UACAC,YACAC,MACAC,WACAC,SACAC,YACAC,SACAC,SACAC,WACAC,aACAC,aACAzE,QACAC,SACA+H,SACAC,OACAC,OACAC,OACAC,OACAC,UACAC,gBACA5D,UACAC,WACAC,SACAC,UACAC,OACA3M,WACA6B,mBACAC,mBACAC,wBACAC,wBACAf,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,mBACAX,YACAD,YACAkM,QACAqD,UACAnJ,OAAA,SACAjH,WACAc,YACAD,aACAwP,WACAC,QAAA,UACAjQ,QACAC,QACAN,WACAc,YACAD,aACA0P,aACAD,QAAA,UACAtQ,WACAc,YACAD,aACA2P,aACAF,QAAA,UACArJ,SACAwJ,WACAC,SACAC,QACAC,aACAN,QAAA,UACArJ,UACA4J,aACAP,QAAA,UACAG,WACAxJ,SACAjH,WACAc,YACAD,aACAiQ,UACAlI,OAAA,SACA9B,QACAiK,mBACAxK,KAAA,kBACAD,QACA0K,0BACApK,KAAA,yBACAU,QACA2J,sBACArK,KAAA,qBACAE,OACAC,YACAC,SACAC,SACAC,WACAC,UACAC,QACAC,UACAC,QACA4J,yBACAtK,KAAA,wBACAU,OACAL,UACAkK,2BACA1K,KAAA,0BACAH,QACA8K,eACA3K,KAAA,cACAhJ,MACA4T,aACAhL,IAAA,YACAC,QACAgL,oBACAC,MAAA,mBACA9K,OACAhJ,MACA+T,2CACAnR,MAAA,0CACAC,MAAA,0CACAmR,KAAA,0CACA3U,GAAA,0CACA8S,KAAA,0CACAjI,KAAA,0CACA3H,SAAA,0CACAc,UAAA,0CACAD,UAAA,0CACA4F,OACAG,OACAC,OACAC,OACAC,YACAC,SACAC,SACAC,WACAC,UACAC,QACAC,UACAC,QACAoK,qDACA5U,GAAA,oDACA2U,KAAA,oDACAzR,SAAA,oDACAc,UAAA,oDACAD,UAAA,oDACAyF,QACAqL,0BACAxD,QAAA,yBACAC,QAAA,yBACAE,MAAA,yBACAC,OAAA,yBACAC,MAAA,yBACAC,KAAA,yBACAC,MAAA,yBACAC,MAAA,yBACAC,QAAA,yBACAC,MAAA,yBACApR,MACAmU,sBACA9U,GAAA,qBACAuD,MAAA,qBACAC,MAAA,qBACAN,SAAA,qBACAc,UAAA,qBACAD,UAAA,qBACA4F,OACAG,OACAC,OACAS,OACAL,SACAH,OACAC,YACAC,SACAE,WACAC,UACAC,QACAC,WACAwK,YACAzP,KAAA,WACAuF,KAAA,WACAtB,MACAC,OACAC,OACAC,QACAJ,QACA4G,OACAC,QACAC,OACAC,OACAC,QACAC,QACAC,MACAX,OACAY,OACAC,OACApM,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,mBACAsL,OACAtF,OACAhB,QACAqL,aACAC,MAAA,YACAtU,KACAuQ,aACAC,YACAC,OACAC,UACAC,UACAC,UACAC,QACAC,SACAC,QACAC,OACAC,QACAC,QACAC,UACAC,QACAd,WACAiE,qBACA3R,MAAA,oBACAC,MAAA,oBACA8B,KAAA,oBACAuF,KAAA,oBACAC,KAAA,oBACA5H,SAAA,oBACA6H,MAAA,oBACAC,OAAA,oBACA/H,kBAAA,oBACAsC,MAAA,oBACAvB,UAAA,oBACAD,UAAA,oBACAgB,iBAAA,oBACAC,iBAAA,oBACAC,sBAAA,oBACAC,sBAAA,oBACAf,SAAA,oBACAC,SAAA,oBACAC,QAAA,oBACAC,kBAAA,oBACAC,kBAAA,oBACAC,iBAAA,oBACAC,kBAAA,oBACAC,kBAAA,oBACAC,iBAAA,oBACA6F,QACA2K,gBACAjJ,OAAA,eACA3B,UACA4B,SACAC,UACAJ,SACAC,UACAtL,KACA6J,QACA4K,iBACAnJ,QAAA,gBACA1B,UACA4B,SACAC,UACAJ,SACArL,KACA6J,QACA6K,iBACAhE,QAAA,gBACAvF,SACAmG,UACAqD,gBACAnJ,OAAA,eACA5B,UACA5J,KACA6J,QACA+K,uBACApJ,OAAA,sBACAC,QAAA,sBACA7B,UACA5J,KACA6J,QACAgL,iBACApJ,QAAA,gBACA7B,UACA5J,KACA6J,QACAiL,2BACA5C,UAAA,0BACA6C,SAAA,0BACAzF,OACApF,OACAtH,QACAC,SACAmS,8BACA1R,SAAA,6BACA2R,MAAA,6BACAjK,SACAzI,WACA6H,QACAC,SACAhH,YACAD,YACAgB,mBACAC,mBACAC,wBACAC,wBACAf,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,mBACA3E,KACAuD,QACAC,QACAmR,OACA7B,OACAjI,OACAf,OACAH,OACAF,OACAF,MACAC,OACAE,QACAJ,QACA4G,OACAC,QACAC,OACAC,OACAC,QACAC,QACAC,MACAX,OACAY,OACAC,OACAT,OACAtF,OACAH,OACAM,OACAxF,OACArC,oBACAsC,QACAwE,OACAI,SACAH,OACAC,YACAC,SACAE,WACAC,UACAC,QACAC,WACAsL,kDACA5F,KAAA,iDACAtF,KAAA,iDACA8F,OACAC,OACApM,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,mBACA4E,MACAC,OACAC,OACAC,QACAJ,QACA4G,OACAC,QACAC,OACAC,OACAC,QACAC,QACAC,MACAX,OACAlG,QACAmM,6LACA5F,KAAA,4LACAC,MAAA,4LACAC,KAAA,4LACAC,KAAA,4LACAC,MAAA,4LACAC,MAAA,4LACAC,IAAA,4LACAX,KAAA,4LACAtG,MACAC,OACAC,OACAC,QACAJ,QACAK,QACAoM,gBACA/J,OAAA,eACAzB,UACA4B,SACAC,UACAzL,KACA6J,QACAwL,YACA/F,KAAA,WACAgG,KAAA,WACAxF,KAAA,WACAzG,KAAA,WACAY,OACAD,OACAnB,OACAqB,OACAC,OACAvH,QACAC,QACA8B,OACApC,WACA6H,QACAC,SACA/H,oBACAsC,QACAvB,YACAD,YACAgB,mBACAC,mBACAC,wBACAC,wBACAf,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,oBACAuR,iBACA3S,MAAA,gBACAC,MAAA,gBACA8B,KAAA,gBACAuF,KAAA,gBACAC,KAAA,gBA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A,yCACAuF,KAAA,yCACAtH,MAAA,yCACAC,MAAA,0CACAwX,gBACA9X,SAAA,UACAc,UAAA,UACAD,UAAA,UACAgB,iBAAA,cACAC,iBAAA,cACAC,sBAAA,cACAC,sBAAA,cACAf,SAAA,kBACAC,SAAA,kBACAC,QAAA,kBACAC,kBAAA,kBACAC,kBAAA,kBACAC,iBAAA,kBACAC,kBAAA,kBACAC,kBAAA,kBACAC,iBAAA,kBACAoG,MAAA,kBACAC,OAAA,kBACAW,OAAA,UACAsP,eACApP,MAAA,OAAA,8CACAqP,oBACAhY,SAAA,kBACAc,UAAA,kBACAD,UAAA,mBACAoX,SACAC,MAAA,OAAA,oBACAtP,OAAA,QAAA,uBACA9B,KAAA,sBAAA,gBAAA,eAAA,QAAA,sBACAqR,cACA/J,QAAA,SAAA,gBACAgK,uBACAzP,MAAA,OAAA,8CACA0P,eACApK,UAAA,WAAA,uBAAA,yBAAA,eAAA,qBACAqK,gBACAhR,OACAL,SACA5G,QACAC,QACA8B,OACAuF,OACAC,OACA5H,WACA6H,QACAC,SACA/H,oBACAsC,QACAvB,YACAD,YACAgB,mBACAC,mBACAC,wBACAC,wBACAf,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,oBACA8W,cACAjR,OACAL,SACA5G,QACAC,QACA8B,OACAuF,OACAC,OACA5H,WACA6H,QACAC,SACA/H,oBACAsC,QACAvB,YACAD,YACAgB,mBACAC,mBACAC,wBACAC,wBACAf,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,oBACA+W,MACAhK,MAAA,OAAA,YAAA,gBACAiK,YACA/L,QAAA,SAAA,sBACAgM,YACA9I,KAAA,2BACArC,KAAA,2BACAC,KAAA,2BACAnN,MAAA,2BACAC,MAAA,2BACAqH,KAAA,2BACA2B,KAAA,2BACAC,MAAA,2BACAC,aAAA,2BACAC,UAAA,2BACAC,OAAA,2BACAC,KAAA,2BACAC,KAAA,2BACAC,OAAA,2BACAC,MAAA,2BACAC,KAAA,2BACAC,MAAA,2BACAC,OAAA,2BACAC,OAAA,2BA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","file":"yasqe.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","//this is the entry-point for browserify.\r\n//the current browserify version does not support require-ing js files which are used as entry-point\r\n//this way, we can still require our main.js file\r\nmodule.exports = require('./main.js');","!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var i;\"undefined\"!=typeof window?i=window:\"undefined\"!=typeof global?i=global:\"undefined\"!=typeof self&&(i=self),i.YASQE=e()}}(function(){var e;return function i(e,r,n){function o(s,a){if(!r[s]){if(!e[s]){var p=\"function\"==typeof require&&require;if(!a&&p)return p(s,!0);if(t)return t(s,!0);var l=new Error(\"Cannot find module '\"+s+\"'\");throw l.code=\"MODULE_NOT_FOUND\",l}var E=r[s]={exports:{}};e[s][0].call(E.exports,function(i){var r=e[s][1][i];return o(r?r:i)},E,E.exports,i,e,r,n)}return r[s].exports}for(var t=\"function\"==typeof require&&require,s=0;s<n.length;s++)o(n[s]);return o}({1:[function(e,i,r){i.exports=e(\"./main.js\")},{\"./main.js\":30}],2:[function(e,i,r){\"use strict\";var n=function(){try{return e(\"jquery\")}catch(i){return window.jQuery}}();n.deparam=function(e,i){var r={},o={\"true\":!0,\"false\":!1,\"null\":null};n.each(e.replace(/\\+/g,\" \").split(\"&\"),function(e,t){var s,a=t.split(\"=\"),p=decodeURIComponent(a[0]),l=r,E=0,u=p.split(\"][\"),c=u.length-1;if(/\\[/.test(u[0])&&/\\]$/.test(u[c])){u[c]=u[c].replace(/\\]$/,\"\");u=u.shift().split(\"[\").concat(u);c=u.length-1}else c=0;if(2===a.length){s=decodeURIComponent(a[1]);i&&(s=s&&!isNaN(s)?+s:\"undefined\"===s?void 0:void 0!==o[s]?o[s]:s);if(c)for(;c>=E;E++){p=\"\"===u[E]?l.length:u[E];l=l[p]=c>E?l[p]||(u[E+1]&&isNaN(u[E+1])?{}:[]):s}else n.isArray(r[p])?r[p].push(s):r[p]=void 0!==r[p]?[r[p],s]:s}else p&&(r[p]=i?void 0:\"\")});return r}},{jquery:void 0}],3:[function(i,r,n){(function(o){\"object\"==typeof n&&\"object\"==typeof r?o(function(){try{return i(\"codemirror\")}catch(e){return window.CodeMirror}}()):\"function\"==typeof e&&e.amd?e([\"codemirror\"],o):o(CodeMirror)})(function(e){\"use strict\";e.defineMode(\"sparql11\",function(e,i){function r(){var e,i,r=\"<[^<>\\\"'|{}^\\\\\\x00- ]*>\",n=\"[A-Za-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD]\",o=n+\"|_\",t=\"(\"+o+\"|-|[0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040])\",s=\"(\"+o+\"|[0-9])(\"+o+\"|[0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040])*\",a=\"\\\\?\"+s,p=\"\\\\$\"+s,l=\"(\"+n+\")(((\"+t+\")|\\\\.)*(\"+t+\"))?\",u=\"[0-9A-Fa-f]\",c=\"(%\"+u+u+\")\",d=\"(\\\\\\\\[_~\\\\.\\\\-!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=/\\\\?#@%])\",N=\"(\"+c+\"|\"+d+\")\";if(\"sparql11\"==E){e=\"(\"+o+\"|:|[0-9]|\"+N+\")((\"+t+\"|\\\\.|:|\"+N+\")*(\"+t+\"|:|\"+N+\"))?\";i=\"_:(\"+o+\"|[0-9])((\"+t+\"|\\\\.)*\"+t+\")?\"}else{e=\"(\"+o+\"|[0-9])(((\"+t+\")|\\\\.)*(\"+t+\"))?\";i=\"_:\"+e}var I=\"(\"+l+\")?:\",x=I+e,m=\"@[a-zA-Z]+(-[a-zA-Z0-9]+)*\",L=\"[eE][\\\\+-]?[0-9]+\",T=\"[0-9]+\",A=\"(([0-9]+\\\\.[0-9]*)|(\\\\.[0-9]+))\",g=\"(([0-9]+\\\\.[0-9]*\"+L+\")|(\\\\.[0-9]+\"+L+\")|([0-9]+\"+L+\"))\",S=\"\\\\+\"+T,R=\"\\\\+\"+A,v=\"\\\\+\"+g,h=\"-\"+T,C=\"-\"+A,f=\"-\"+g,O=\"\\\\\\\\[tbnrf\\\\\\\\\\\"']\",y=u+\"{4}\",P=\"(\\\\\\\\u\"+y+\"|\\\\\\\\U00(10|0\"+u+\")\"+y+\")\",_=\"'(([^\\\\x27\\\\x5C\\\\x0A\\\\x0D])|\"+O+\"|\"+P+\")*'\",D='\"(([^\\\\x22\\\\x5C\\\\x0A\\\\x0D])|'+O+\"|\"+P+')*\"',b=\"'''(('|'')?([^'\\\\\\\\]|\"+O+\"|\"+P+\"))*'''\",G='\"\"\"((\"|\"\")?([^\"\\\\\\\\]|'+O+\"|\"+P+'))*\"\"\"',M=\"[\\\\x20\\\\x09\\\\x0D\\\\x0A]\",U=\"#([^\\\\n\\\\r]*[\\\\n\\\\r]|[^\\\\n\\\\r]*$)\",B=\"(\"+M+\"|(\"+U+\"))*\",V=\"\\\\(\"+B+\"\\\\)\",k=\"\\\\[\"+B+\"\\\\]\",F={terminal:[{name:\"WS\",regex:new RegExp(\"^\"+M+\"+\"),style:\"ws\"},{name:\"COMMENT\",regex:new RegExp(\"^\"+U),style:\"comment\"},{name:\"IRI_REF\",regex:new RegExp(\"^\"+r),style:\"variable-3\"},{name:\"VAR1\",regex:new RegExp(\"^\"+a),style:\"atom\"},{name:\"VAR2\",regex:new RegExp(\"^\"+p),style:\"atom\"},{name:\"LANGTAG\",regex:new RegExp(\"^\"+m),style:\"meta\"},{name:\"DOUBLE\",regex:new RegExp(\"^\"+g),style:\"number\"},{name:\"DECIMAL\",regex:new RegExp(\"^\"+A),style:\"number\"},{name:\"INTEGER\",regex:new RegExp(\"^\"+T),style:\"number\"},{name:\"DOUBLE_POSITIVE\",regex:new RegExp(\"^\"+v),style:\"number\"},{name:\"DECIMAL_POSITIVE\",regex:new RegExp(\"^\"+R),style:\"number\"},{name:\"INTEGER_POSITIVE\",regex:new RegExp(\"^\"+S),style:\"number\"},{name:\"DOUBLE_NEGATIVE\",regex:new RegExp(\"^\"+f),style:\"number\"},{name:\"DECIMAL_NEGATIVE\",regex:new RegExp(\"^\"+C),style:\"number\"},{name:\"INTEGER_NEGATIVE\",regex:new RegExp(\"^\"+h),style:\"number\"},{name:\"STRING_LITERAL_LONG1\",regex:new RegExp(\"^\"+b),style:\"string\"},{name:\"STRING_LITERAL_LONG2\",regex:new RegExp(\"^\"+G),style:\"string\"},{name:\"STRING_LITERAL1\",regex:new RegExp(\"^\"+_),style:\"string\"},{name:\"STRING_LITERAL2\",regex:new RegExp(\"^\"+D),style:\"string\"},{name:\"NIL\",regex:new RegExp(\"^\"+V),style:\"punc\"},{name:\"ANON\",regex:new RegExp(\"^\"+k),style:\"punc\"},{name:\"PNAME_LN\",regex:new RegExp(\"^\"+x),style:\"string-2\"},{name:\"PNAME_NS\",regex:new RegExp(\"^\"+I),style:\"string-2\"},{name:\"BLANK_NODE_LABEL\",regex:new RegExp(\"^\"+i),style:\"string-2\"}]};return F}function n(e){var i=[],r=s[e];if(void 0!=r)for(var n in r)i.push(n.toString());else i.push(e);return i}function o(e,i){function r(){for(var i=null,r=0;r<N.length;++r){i=e.match(N[r].regex,!0,!1);if(i)return{cat:N[r].name,style:N[r].style,text:i[0]}}i=e.match(a,!0,!1);if(i)return{cat:e.current().toUpperCase(),style:\"keyword\",text:i[0]};i=e.match(p,!0,!1);if(i)return{cat:e.current(),style:\"punc\",text:i[0]};i=e.match(/^.[A-Za-z0-9]*/,!0,!1);return{cat:\"<invalid_token>\",style:\"error\",text:i[0]}}function o(){var r=e.column();i.errorStartPos=r;i.errorEndPos=r+u.text.length}function t(e){null==i.queryType&&(\"SELECT\"==e||\"CONSTRUCT\"==e||\"ASK\"==e||\"DESCRIBE\"==e||\"INSERT\"==e||\"DELETE\"==e||\"LOAD\"==e||\"CLEAR\"==e||\"CREATE\"==e||\"DROP\"==e||\"COPY\"==e||\"MOVE\"==e||\"ADD\"==e)&&(i.queryType=e)}function l(e){\"disallowVars\"==e?i.allowVars=!1:\"allowVars\"==e?i.allowVars=!0:\"disallowBnodes\"==e?i.allowBnodes=!1:\"allowBnodes\"==e?i.allowBnodes=!0:\"storeProperty\"==e&&(i.storeProperty=!0)}function E(e){return(i.allowVars||\"var\"!=e)&&(i.allowBnodes||\"blankNode\"!=e&&\"blankNodePropertyList\"!=e&&\"blankNodePropertyListPath\"!=e)}0==e.pos&&(i.possibleCurrent=i.possibleNext);var u=r();if(\"<invalid_token>\"==u.cat){if(1==i.OK){i.OK=!1;o()}i.complete=!1;return u.style}if(\"WS\"==u.cat||\"COMMENT\"==u.cat){i.possibleCurrent=i.possibleNext;return u.style}for(var c,d=!1,I=u.cat;i.stack.length>0&&I&&i.OK&&!d;){c=i.stack.pop();if(s[c]){var x=s[c][I];if(void 0!=x&&E(c)){for(var m=x.length-1;m>=0;--m)i.stack.push(x[m]);l(c)}else{i.OK=!1;i.complete=!1;o();i.stack.push(c)}}else if(c==I){d=!0;t(c);for(var L=!0,T=i.stack.length;T>0;--T){var A=s[i.stack[T-1]];A&&A.$||(L=!1)}i.complete=L;if(i.storeProperty&&\"punc\"!=I.cat){i.lastProperty=u.text;i.storeProperty=!1}}else{i.OK=!1;i.complete=!1;o()}}if(!d&&i.OK){i.OK=!1;i.complete=!1;o()}i.possibleCurrent=i.possibleNext;i.possibleNext=n(i.stack[i.stack.length-1]);return u.style}function t(i,r){var n=0,o=i.stack.length-1;if(/^[\\}\\]\\)]/.test(r)){for(var t=r.substr(0,1);o>=0;--o)if(i.stack[o]==t){--o;break}}else{var s=I[i.stack[o]];if(s){n+=s;--o}}for(;o>=0;--o){var s=x[i.stack[o]];s&&(n+=s)}return n*e.indentUnit}var s=(e.indentUnit,{\"*[&&,valueLogical]\":{\"&&\":[\"[&&,valueLogical]\",\"*[&&,valueLogical]\"],AS:[],\")\":[],\",\":[],\"||\":[],\";\":[]},\"*[,,expression]\":{\",\":[\"[,,expression]\",\"*[,,expression]\"],\")\":[]},\"*[,,objectPath]\":{\",\":[\"[,,objectPath]\",\"*[,,objectPath]\"],\".\":[],\";\":[],\"]\":[],\"{\":[],OPTIONAL:[],MINUS:[],GRAPH:[],SERVICE:[],FILTER:[],BIND:[],VALUES:[],\"}\":[]},\"*[,,object]\":{\",\":[\"[,,object]\",\"*[,,object]\"],\".\":[],\";\":[],\"]\":[],\"}\":[],GRAPH:[],\"{\":[],OPTIONAL:[],MINUS:[],SERVICE:[],FILTER:[],BIND:[],VALUES:[]},\"*[/,pathEltOrInverse]\":{\"/\":[\"[/,pathEltOrInverse]\",\"*[/,pathEltOrInverse]\"],\"|\":[],\")\":[],\"(\":[],\"[\":[],VAR1:[],VAR2:[],NIL:[],IRI_REF:[],TRUE:[],FALSE:[],BLANK_NODE_LABEL:[],ANON:[],PNAME_LN:[],PNAME_NS:[],STRING_LITERAL1:[],STRING_LITERAL2:[],STRING_LITERAL_LONG1:[],STRING_LITERAL_LONG2:[],INTEGER:[],DECIMAL:[],DOUBLE:[],INTEGER_POSITIVE:[],DECIMAL_POSITIVE:[],DOUBLE_POSITIVE:[],INTEGER_NEGATIVE:[],DECIMAL_NEGATIVE:[],DOUBLE_NEGATIVE:[]},\"*[;,?[or([verbPath,verbSimple]),objectList]]\":{\";\":[\"[;,?[or([verbPath,verbSimple]),objectList]]\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"],\".\":[],\"]\":[],\"{\":[],OPTIONAL:[],MINUS:[],GRAPH:[],SERVICE:[],FILTER:[],BIND:[],VALUES:[],\"}\":[]},\"*[;,?[verb,objectList]]\":{\";\":[\"[;,?[verb,objectList]]\",\"*[;,?[verb,objectList]]\"],\".\":[],\"]\":[],\"}\":[],GRAPH:[],\"{\":[],OPTIONAL:[],MINUS:[],SERVICE:[],FILTER:[],BIND:[],VALUES:[]},\"*[UNION,groupGraphPattern]\":{UNION:[\"[UNION,groupGraphPattern]\",\"*[UNION,groupGraphPattern]\"],VAR1:[],VAR2:[],NIL:[],\"(\":[],\"[\":[],IRI_REF:[],TRUE:[],FALSE:[],BLANK_NODE_LABEL:[],ANON:[],PNAME_LN:[],PNAME_NS:[],STRING_LITERAL1:[],STRING_LITERAL2:[],STRING_LITERAL_LONG1:[],STRING_LITERAL_LONG2:[],INTEGER:[],DECIMAL:[],DOUBLE:[],INTEGER_POSITIVE:[],DECIMAL_POSITIVE:[],DOUBLE_POSITIVE:[],INTEGER_NEGATIVE:[],DECIMAL_NEGATIVE:[],DOUBLE_NEGATIVE:[],\".\":[],\"{\":[],OPTIONAL:[],MINUS:[],GRAPH:[],SERVICE:[],FILTER:[],BIND:[],VALUES:[],\"}\":[]},\"*[graphPatternNotTriples,?.,?triplesBlock]\":{\"{\":[\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],OPTIONAL:[\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],MINUS:[\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],GRAPH:[\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],SERVICE:[\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],FILTER:[\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],BIND:[\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],VALUES:[\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],\"}\":[]},\"*[quadsNotTriples,?.,?triplesTemplate]\":{GRAPH:[\"[quadsNotTriples,?.,?triplesTemplate]\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],\"}\":[]},\"*[|,pathOneInPropertySet]\":{\"|\":[\"[|,pathOneInPropertySet]\",\"*[|,pathOneInPropertySet]\"],\")\":[]},\"*[|,pathSequence]\":{\"|\":[\"[|,pathSequence]\",\"*[|,pathSequence]\"],\")\":[],\"(\":[],\"[\":[],VAR1:[],VAR2:[],NIL:[],IRI_REF:[],TRUE:[],FALSE:[],BLANK_NODE_LABEL:[],ANON:[],PNAME_LN:[],PNAME_NS:[],STRING_LITERAL1:[],STRING_LITERAL2:[],STRING_LITERAL_LONG1:[],STRING_LITERAL_LONG2:[],INTEGER:[],DECIMAL:[],DOUBLE:[],INTEGER_POSITIVE:[],DECIMAL_POSITIVE:[],DOUBLE_POSITIVE:[],INTEGER_NEGATIVE:[],DECIMAL_NEGATIVE:[],DOUBLE_NEGATIVE:[]},\"*[||,conditionalAndExpression]\":{\"||\":[\"[||,conditionalAndExpression]\",\"*[||,conditionalAndExpression]\"],AS:[],\")\":[],\",\":[],\";\":[]},\"*dataBlockValue\":{UNDEF:[\"dataBlockValue\",\"*dataBlockValue\"],IRI_REF:[\"dataBlockValue\",\"*dataBlockValue\"],TRUE:[\"dataBlockValue\",\"*dataBlockValue\"],FALSE:[\"dataBlockValue\",\"*dataBlockValue\"],PNAME_LN:[\"dataBlockValue\",\"*dataBlockValue\"],PNAME_NS:[\"dataBlockValue\",\"*dataBlockValue\"],STRING_LITERAL1:[\"dataBlockValue\",\"*dataBlockValue\"],STRING_LITERAL2:[\"dataBlockValue\",\"*dataBlockValue\"],STRING_LITERAL_LONG1:[\"dataBlockValue\",\"*dataBlockValue\"],STRING_LITERAL_LONG2:[\"dataBlockValue\",\"*dataBlockValue\"],INTEGER:[\"dataBlockValue\",\"*dataBlockValue\"],DECIMAL:[\"dataBlockValue\",\"*dataBlockValue\"],DOUBLE:[\"dataBlockValue\",\"*dataBlockValue\"],INTEGER_POSITIVE:[\"dataBlockValue\",\"*dataBlockValue\"],DECIMAL_POSITIVE:[\"dataBlockValue\",\"*dataBlockValue\"],DOUBLE_POSITIVE:[\"dataBlockValue\",\"*dataBlockValue\"],INTEGER_NEGATIVE:[\"dataBlockValue\",\"*dataBlockValue\"],DECIMAL_NEGATIVE:[\"dataBlockValue\",\"*dataBlockValue\"],DOUBLE_NEGATIVE:[\"dataBlockValue\",\"*dataBlockValue\"],\"}\":[],\")\":[]},\"*datasetClause\":{FROM:[\"datasetClause\",\"*datasetClause\"],WHERE:[],\"{\":[]},\"*describeDatasetClause\":{FROM:[\"describeDatasetClause\",\"*describeDatasetClause\"],ORDER:[],HAVING:[],GROUP:[],LIMIT:[],OFFSET:[],WHERE:[],\"{\":[],VALUES:[],$:[]},\"*graphNode\":{\"(\":[\"graphNode\",\"*graphNode\"],\"[\":[\"graphNode\",\"*graphNode\"],VAR1:[\"graphNode\",\"*graphNode\"],VAR2:[\"graphNode\",\"*graphNode\"],NIL:[\"graphNode\",\"*graphNode\"],IRI_REF:[\"graphNode\",\"*graphNode\"],TRUE:[\"graphNode\",\"*graphNode\"],FALSE:[\"graphNode\",\"*graphNode\"],BLANK_NODE_LABEL:[\"graphNode\",\"*graphNode\"],ANON:[\"graphNode\",\"*graphNode\"],PNAME_LN:[\"graphNode\",\"*graphNode\"],PNAME_NS:[\"graphNode\",\"*graphNode\"],STRING_LITERAL1:[\"graphNode\",\"*graphNode\"],STRING_LITERAL2:[\"graphNode\",\"*graphNode\"],STRING_LITERAL_LONG1:[\"graphNode\",\"*graphNode\"],STRING_LITERAL_LONG2:[\"graphNode\",\"*graphNode\"],INTEGER:[\"graphNode\",\"*graphNode\"],DECIMAL:[\"graphNode\",\"*graphNode\"],DOUBLE:[\"graphNode\",\"*graphNode\"],INTEGER_POSITIVE:[\"graphNode\",\"*graphNode\"],DECIMAL_POSITIVE:[\"graphNode\",\"*graphNode\"],DOUBLE_POSITIVE:[\"graphNode\",\"*graphNode\"],INTEGER_NEGATIVE:[\"graphNode\",\"*graphNode\"],DECIMAL_NEGATIVE:[\"graphNode\",\"*graphNode\"],DOUBLE_NEGATIVE:[\"graphNode\",\"*graphNode\"],\")\":[]},\"*graphNodePath\":{\"(\":[\"graphNodePath\",\"*graphNodePath\"],\"[\":[\"graphNodePath\",\"*graphNodePath\"],VAR1:[\"graphNodePath\",\"*graphNodePath\"],VAR2:[\"graphNodePath\",\"*graphNodePath\"],NIL:[\"graphNodePath\",\"*graphNodePath\"],IRI_REF:[\"graphNodePath\",\"*graphNodePath\"],TRUE:[\"graphNodePath\",\"*graphNodePath\"],FALSE:[\"graphNodePath\",\"*graphNodePath\"],BLANK_NODE_LABEL:[\"graphNodePath\",\"*graphNodePath\"],ANON:[\"graphNodePath\",\"*graphNodePath\"],PNAME_LN:[\"graphNodePath\",\"*graphNodePath\"],PNAME_NS:[\"graphNodePath\",\"*graphNodePath\"],STRING_LITERAL1:[\"graphNodePath\",\"*graphNodePath\"],STRING_LITERAL2:[\"graphNodePath\",\"*graphNodePath\"],STRING_LITERAL_LONG1:[\"graphNodePath\",\"*graphNodePath\"],STRING_LITERAL_LONG2:[\"graphNodePath\",\"*graphNodePath\"],INTEGER:[\"graphNodePath\",\"*graphNodePath\"],DECIMAL:[\"graphNodePath\",\"*graphNodePath\"],DOUBLE:[\"graphNodePath\",\"*graphNodePath\"],INTEGER_POSITIVE:[\"graphNodePath\",\"*graphNodePath\"],DECIMAL_POSITIVE:[\"graphNodePath\",\"*graphNodePath\"],DOUBLE_POSITIVE:[\"graphNodePath\",\"*graphNodePath\"],INTEGER_NEGATIVE:[\"graphNodePath\",\"*graphNodePath\"],DECIMAL_NEGATIVE:[\"graphNodePath\",\"*graphNodePath\"],DOUBLE_NEGATIVE:[\"graphNodePath\",\"*graphNodePath\"],\")\":[]},\"*groupCondition\":{\"(\":[\"groupCondition\",\"*groupCondition\"],STR:[\"groupCondition\",\"*groupCondition\"],LANG:[\"groupCondition\",\"*groupCondition\"],LANGMATCHES:[\"groupCondition\",\"*groupCondition\"],DATATYPE:[\"groupCondition\",\"*groupCondition\"],BOUND:[\"groupCondition\",\"*groupCondition\"],IRI:[\"groupCondition\",\"*groupCondition\"],URI:[\"groupCondition\",\"*groupCondition\"],BNODE:[\"groupCondition\",\"*groupCondition\"],RAND:[\"groupCondition\",\"*groupCondition\"],ABS:[\"groupCondition\",\"*groupCondition\"],CEIL:[\"groupCondition\",\"*groupCondition\"],FLOOR:[\"groupCondition\",\"*groupCondition\"],ROUND:[\"groupCondition\",\"*groupCondition\"],CONCAT:[\"groupCondition\",\"*groupCondition\"],STRLEN:[\"groupCondition\",\"*groupCondition\"],UCASE:[\"groupCondition\",\"*groupCondition\"],LCASE:[\"groupCondition\",\"*groupCondition\"],ENCODE_FOR_URI:[\"groupCondition\",\"*groupCondition\"],CONTAINS:[\"groupCondition\",\"*groupCondition\"],STRSTARTS:[\"groupCondition\",\"*groupCondition\"],STRENDS:[\"groupCondition\",\"*groupCondition\"],STRBEFORE:[\"groupCondition\",\"*groupCondition\"],STRAFTER:[\"groupCondition\",\"*groupCondition\"],YEAR:[\"groupCondition\",\"*groupCondition\"],MONTH:[\"groupCondition\",\"*groupCondition\"],DAY:[\"groupCondition\",\"*groupCondition\"],HOURS:[\"groupCondition\",\"*groupCondition\"],MINUTES:[\"groupCondition\",\"*groupCondition\"],SECONDS:[\"groupCondition\",\"*groupCondition\"],TIMEZONE:[\"groupCondition\",\"*groupCondition\"],TZ:[\"groupCondition\",\"*groupCondition\"],NOW:[\"groupCondition\",\"*groupCondition\"],UUID:[\"groupCondition\",\"*groupCondition\"],STRUUID:[\"groupCondition\",\"*groupCondition\"],MD5:[\"groupCondition\",\"*groupCondition\"],SHA1:[\"groupCondition\",\"*groupCondition\"],SHA256:[\"groupCondition\",\"*groupCondition\"],SHA384:[\"groupCondition\",\"*groupCondition\"],SHA512:[\"groupCondition\",\"*groupCondition\"],COALESCE:[\"groupCondition\",\"*groupCondition\"],IF:[\"groupCondition\",\"*groupCondition\"],STRLANG:[\"groupCondition\",\"*groupCondition\"],STRDT:[\"groupCondition\",\"*groupCondition\"],SAMETERM:[\"groupCondition\",\"*groupCondition\"],ISIRI:[\"groupCondition\",\"*groupCondition\"],ISURI:[\"groupCondition\",\"*groupCondition\"],ISBLANK:[\"groupCondition\",\"*groupCondition\"],ISLITERAL:[\"groupCondition\",\"*groupCondition\"],ISNUMERIC:[\"groupCondition\",\"*groupCondition\"],VAR1:[\"groupCondition\",\"*groupCondition\"],VAR2:[\"groupCondition\",\"*groupCondition\"],SUBSTR:[\"groupCondition\",\"*groupCondition\"],REPLACE:[\"groupCondition\",\"*groupCondition\"],REGEX:[\"groupCondition\",\"*groupCondition\"],EXISTS:[\"groupCondition\",\"*groupCondition\"],NOT:[\"groupCondition\",\"*groupCondition\"],IRI_REF:[\"groupCondition\",\"*groupCondition\"],PNAME_LN:[\"groupCondition\",\"*groupCondition\"],PNAME_NS:[\"groupCondition\",\"*groupCondition\"],VALUES:[],LIMIT:[],OFFSET:[],ORDER:[],HAVING:[],$:[],\"}\":[]},\"*havingCondition\":{\"(\":[\"havingCondition\",\"*havingCondition\"],STR:[\"havingCondition\",\"*havingCondition\"],LANG:[\"havingCondition\",\"*havingCondition\"],LANGMATCHES:[\"havingCondition\",\"*havingCondition\"],DATATYPE:[\"havingCondition\",\"*havingCondition\"],BOUND:[\"havingCondition\",\"*havingCondition\"],IRI:[\"havingCondition\",\"*havingCondition\"],URI:[\"havingCondition\",\"*havingCondition\"],BNODE:[\"havingCondition\",\"*havingCondition\"],RAND:[\"havingCondition\",\"*havingCondition\"],ABS:[\"havingCondition\",\"*havingCondition\"],CEIL:[\"havingCondition\",\"*havingCondition\"],FLOOR:[\"havingCondition\",\"*havingCondition\"],ROUND:[\"havingCondition\",\"*havingCondition\"],CONCAT:[\"havingCondition\",\"*havingCondition\"],STRLEN:[\"havingCondition\",\"*havingCondition\"],UCASE:[\"havingCondition\",\"*havingCondition\"],LCASE:[\"havingCondition\",\"*havingCondition\"],ENCODE_FOR_URI:[\"havingCondition\",\"*havingCondition\"],CONTAINS:[\"havingCondition\",\"*havingCondition\"],STRSTARTS:[\"havingCondition\",\"*havingCondition\"],STRENDS:[\"havingCondition\",\"*havingCondition\"],STRBEFORE:[\"havingCondition\",\"*havingCondition\"],STRAFTER:[\"havingCondition\",\"*havingCondition\"],YEAR:[\"havingCondition\",\"*havingCondition\"],MONTH:[\"havingCondition\",\"*havingCondition\"],DAY:[\"havingCondition\",\"*havingCondition\"],HOURS:[\"havingCondition\",\"*havingCondition\"],MINUTES:[\"havingCondition\",\"*havingCondition\"],SECONDS:[\"havingCondition\",\"*havingCondition\"],TIMEZONE:[\"havingCondition\",\"*havingCondition\"],TZ:[\"havingCondition\",\"*havingCondition\"],NOW:[\"havingCondition\",\"*havingCondition\"],UUID:[\"havingCondition\",\"*havingCondition\"],STRUUID:[\"havingCondition\",\"*havingCondition\"],MD5:[\"havingCondition\",\"*havingCondition\"],SHA1:[\"havingCondition\",\"*havingCondition\"],SHA256:[\"havingCondition\",\"*havingCondition\"],SHA384:[\"havingCondition\",\"*havingCondition\"],SHA512:[\"havingCondition\",\"*havingCondition\"],COALESCE:[\"havingCondition\",\"*havingCondition\"],IF:[\"havingCondition\",\"*havingCondition\"],STRLANG:[\"havingCondition\",\"*havingCondition\"],STRDT:[\"havingCondition\",\"*havingCondition\"],SAMETERM:[\"havingCondition\",\"*havingCondition\"],ISIRI:[\"havingCondition\",\"*havingCondition\"],ISURI:[\"havingCondition\",\"*havingCondition\"],ISBLANK:[\"havingCondition\",\"*havingCondition\"],ISLITERAL:[\"havingCondition\",\"*havingCondition\"],ISNUMERIC:[\"havingCondition\",\"*havingCondition\"],SUBSTR:[\"havingCondition\",\"*havingCondition\"],REPLACE:[\"havingCondition\",\"*havingCondition\"],REGEX:[\"havingCondition\",\"*havingCondition\"],EXISTS:[\"havingCondition\",\"*havingCondition\"],NOT:[\"havingCondition\",\"*havingCondition\"],IRI_REF:[\"havingCondition\",\"*havingCondition\"],PNAME_LN:[\"havingCondition\",\"*havingCondition\"],PNAME_NS:[\"havingCondition\",\"*havingCondition\"],VALUES:[],LIMIT:[],OFFSET:[],ORDER:[],$:[],\"}\":[]},\"*or([[ (,*dataBlockValue,)],NIL])\":{\"(\":[\"or([[ (,*dataBlockValue,)],NIL])\",\"*or([[ (,*dataBlockValue,)],NIL])\"],NIL:[\"or([[ (,*dataBlockValue,)],NIL])\",\"*or([[ (,*dataBlockValue,)],NIL])\"],\"}\":[]},\"*or([[*,unaryExpression],[/,unaryExpression]])\":{\"*\":[\"or([[*,unaryExpression],[/,unaryExpression]])\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],\"/\":[\"or([[*,unaryExpression],[/,unaryExpression]])\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],AS:[],\")\":[],\",\":[],\"||\":[],\"&&\":[],\"=\":[],\"!=\":[],\"<\":[],\">\":[],\"<=\":[],\">=\":[],IN:[],NOT:[],\"+\":[],\"-\":[],INTEGER_POSITIVE:[],DECIMAL_POSITIVE:[],DOUBLE_POSITIVE:[],INTEGER_NEGATIVE:[],DECIMAL_NEGATIVE:[],DOUBLE_NEGATIVE:[],\";\":[]},\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\":{\"+\":[\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],\"-\":[\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],INTEGER_POSITIVE:[\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],DECIMAL_POSITIVE:[\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],DOUBLE_POSITIVE:[\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],INTEGER_NEGATIVE:[\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],DECIMAL_NEGATIVE:[\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],DOUBLE_NEGATIVE:[\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],AS:[],\")\":[],\",\":[],\"||\":[],\"&&\":[],\"=\":[],\"!=\":[],\"<\":[],\">\":[],\"<=\":[],\">=\":[],IN:[],NOT:[],\";\":[]},\"*or([var,[ (,expression,AS,var,)]])\":{\"(\":[\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"],VAR1:[\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"],VAR2:[\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"],WHERE:[],\"{\":[],FROM:[]},\"*orderCondition\":{ASC:[\"orderCondition\",\"*orderCondition\"],DESC:[\"orderCondition\",\"*orderCondition\"],VAR1:[\"orderCondition\",\"*orderCondition\"],VAR2:[\"orderCondition\",\"*orderCondition\"],\"(\":[\"orderCondition\",\"*orderCondition\"],STR:[\"orderCondition\",\"*orderCondition\"],LANG:[\"orderCondition\",\"*orderCondition\"],LANGMATCHES:[\"orderCondition\",\"*orderCondition\"],DATATYPE:[\"orderCondition\",\"*orderCondition\"],BOUND:[\"orderCondition\",\"*orderCondition\"],IRI:[\"orderCondition\",\"*orderCondition\"],URI:[\"orderCondition\",\"*orderCondition\"],BNODE:[\"orderCondition\",\"*orderCondition\"],RAND:[\"orderCondition\",\"*orderCondition\"],ABS:[\"orderCondition\",\"*orderCondition\"],CEIL:[\"orderCondition\",\"*orderCondition\"],FLOOR:[\"orderCondition\",\"*orderCondition\"],ROUND:[\"orderCondition\",\"*orderCondition\"],CONCAT:[\"orderCondition\",\"*orderCondition\"],STRLEN:[\"orderCondition\",\"*orderCondition\"],UCASE:[\"orderCondition\",\"*orderCondition\"],LCASE:[\"orderCondition\",\"*orderCondition\"],ENCODE_FOR_URI:[\"orderCondition\",\"*orderCondition\"],CONTAINS:[\"orderCondition\",\"*orderCondition\"],STRSTARTS:[\"orderCondition\",\"*orderCondition\"],STRENDS:[\"orderCondition\",\"*orderCondition\"],STRBEFORE:[\"orderCondition\",\"*orderCondition\"],STRAFTER:[\"orderCondition\",\"*orderCondition\"],YEAR:[\"orderCondition\",\"*orderCondition\"],MONTH:[\"orderCondition\",\"*orderCondition\"],DAY:[\"orderCondition\",\"*orderCondition\"],HOURS:[\"orderCondition\",\"*orderCondition\"],MINUTES:[\"orderCondition\",\"*orderCondition\"],SECONDS:[\"orderCondition\",\"*orderCondition\"],TIMEZONE:[\"orderCondition\",\"*orderCondition\"],TZ:[\"orderCondition\",\"*orderCondition\"],NOW:[\"orderCondition\",\"*orderCondition\"],UUID:[\"orderCondition\",\"*orderCondition\"],STRUUID:[\"orderCondition\",\"*orderCondition\"],MD5:[\"orderCondition\",\"*orderCondition\"],SHA1:[\"orderCondition\",\"*orderCondition\"],SHA256:[\"orderCondition\",\"*orderCondition\"],SHA384:[\"orderCondition\",\"*orderCondition\"],SHA512:[\"orderCondition\",\"*orderCondition\"],COALESCE:[\"orderCondition\",\"*orderCondition\"],IF:[\"orderCondition\",\"*orderCondition\"],STRLANG:[\"orderCondition\",\"*orderCondition\"],STRDT:[\"orderCondition\",\"*orderCondition\"],SAMETERM:[\"orderCondition\",\"*orderCondition\"],ISIRI:[\"orderCondition\",\"*orderCondition\"],ISURI:[\"orderCondition\",\"*orderCondition\"],ISBLANK:[\"orderCondition\",\"*orderCondition\"],ISLITERAL:[\"orderCondition\",\"*orderCondition\"],ISNUMERIC:[\"orderCondition\",\"*orderCondition\"],SUBSTR:[\"orderCondition\",\"*orderCondition\"],REPLACE:[\"orderCondition\",\"*orderCondition\"],REGEX:[\"orderCondition\",\"*orderCondition\"],EXISTS:[\"orderCondition\",\"*orderCondition\"],NOT:[\"orderCondition\",\"*orderCondition\"],IRI_REF:[\"orderCondition\",\"*orderCondition\"],PNAME_LN:[\"orderCondition\",\"*orderCondition\"],PNAME_NS:[\"orderCondition\",\"*orderCondition\"],VALUES:[],LIMIT:[],OFFSET:[],$:[],\"}\":[]},\"*prefixDecl\":{PREFIX:[\"prefixDecl\",\"*prefixDecl\"],$:[],CONSTRUCT:[],DESCRIBE:[],ASK:[],INSERT:[],DELETE:[],SELECT:[],LOAD:[],CLEAR:[],DROP:[],ADD:[],MOVE:[],COPY:[],CREATE:[],WITH:[]},\"*usingClause\":{USING:[\"usingClause\",\"*usingClause\"],WHERE:[]},\"*var\":{VAR1:[\"var\",\"*var\"],VAR2:[\"var\",\"*var\"],\")\":[]},\"*varOrIRIref\":{VAR1:[\"varOrIRIref\",\"*varOrIRIref\"],VAR2:[\"varOrIRIref\",\"*varOrIRIref\"],IRI_REF:[\"varOrIRIref\",\"*varOrIRIref\"],PNAME_LN:[\"varOrIRIref\",\"*varOrIRIref\"],PNAME_NS:[\"varOrIRIref\",\"*varOrIRIref\"],ORDER:[],HAVING:[],GROUP:[],LIMIT:[],OFFSET:[],WHERE:[],\"{\":[],FROM:[],VALUES:[],$:[]},\"+graphNode\":{\"(\":[\"graphNode\",\"*graphNode\"],\"[\":[\"graphNode\",\"*graphNode\"],VAR1:[\"graphNode\",\"*graphNode\"],VAR2:[\"graphNode\",\"*graphNode\"],NIL:[\"graphNode\",\"*graphNode\"],IRI_REF:[\"graphNode\",\"*graphNode\"],TRUE:[\"graphNode\",\"*graphNode\"],FALSE:[\"graphNode\",\"*graphNode\"],BLANK_NODE_LABEL:[\"graphNode\",\"*graphNode\"],ANON:[\"graphNode\",\"*graphNode\"],PNAME_LN:[\"graphNode\",\"*graphNode\"],PNAME_NS:[\"graphNode\",\"*graphNode\"],STRING_LITERAL1:[\"graphNode\",\"*graphNode\"],STRING_LITERAL2:[\"graphNode\",\"*graphNode\"],STRING_LITERAL_LONG1:[\"graphNode\",\"*graphNode\"],STRING_LITERAL_LONG2:[\"graphNode\",\"*graphNode\"],INTEGER:[\"graphNode\",\"*graphNode\"],DECIMAL:[\"graphNode\",\"*graphNode\"],DOUBLE:[\"graphNode\",\"*graphNode\"],INTEGER_POSITIVE:[\"graphNode\",\"*graphNode\"],DECIMAL_POSITIVE:[\"graphNode\",\"*graphNode\"],DOUBLE_POSITIVE:[\"graphNode\",\"*graphNode\"],INTEGER_NEGATIVE:[\"graphNode\",\"*graphNode\"],DECIMAL_NEGATIVE:[\"graphNode\",\"*graphNode\"],DOUBLE_NEGATIVE:[\"graphNode\",\"*graphNode\"]},\"+graphNodePath\":{\"(\":[\"graphNodePath\",\"*graphNodePath\"],\"[\":[\"graphNodePath\",\"*graphNodePath\"],VAR1:[\"graphNodePath\",\"*graphNodePath\"],VAR2:[\"graphNodePath\",\"*graphNodePath\"],NIL:[\"graphNodePath\",\"*graphNodePath\"],IRI_REF:[\"graphNodePath\",\"*graphNodePath\"],TRUE:[\"graphNodePath\",\"*graphNodePath\"],FALSE:[\"graphNodePath\",\"*graphNodePath\"],BLANK_NODE_LABEL:[\"graphNodePath\",\"*graphNodePath\"],ANON:[\"graphNodePath\",\"*graphNodePath\"],PNAME_LN:[\"graphNodePath\",\"*graphNodePath\"],PNAME_NS:[\"graphNodePath\",\"*graphNodePath\"],STRING_LITERAL1:[\"graphNodePath\",\"*graphNodePath\"],STRING_LITERAL2:[\"graphNodePath\",\"*graphNodePath\"],STRING_LITERAL_LONG1:[\"graphNodePath\",\"*graphNodePath\"],STRING_LITERAL_LONG2:[\"graphNodePath\",\"*graphNodePath\"],INTEGER:[\"graphNodePath\",\"*graphNodePath\"],DECIMAL:[\"graphNodePath\",\"*graphNodePath\"],DOUBLE:[\"graphNodePath\",\"*graphNodePath\"],INTEGER_POSITIVE:[\"graphNodePath\",\"*graphNodePath\"],DECIMAL_POSITIVE:[\"graphNodePath\",\"*graphNodePath\"],DOUBLE_POSITIVE:[\"graphNodePath\",\"*graphNodePath\"],INTEGER_NEGATIVE:[\"graphNodePath\",\"*graphNodePath\"],DECIMAL_NEGATIVE:[\"graphNodePath\",\"*graphNodePath\"],DOUBLE_NEGATIVE:[\"graphNodePath\",\"*graphNodePath\"]},\"+groupCondition\":{\"(\":[\"groupCondition\",\"*groupCondition\"],STR:[\"groupCondition\",\"*groupCondition\"],LANG:[\"groupCondition\",\"*groupCondition\"],LANGMATCHES:[\"groupCondition\",\"*groupCondition\"],DATATYPE:[\"groupCondition\",\"*groupCondition\"],BOUND:[\"groupCondition\",\"*groupCondition\"],IRI:[\"groupCondition\",\"*groupCondition\"],URI:[\"groupCondition\",\"*groupCondition\"],BNODE:[\"groupCondition\",\"*groupCondition\"],RAND:[\"groupCondition\",\"*groupCondition\"],ABS:[\"groupCondition\",\"*groupCondition\"],CEIL:[\"groupCondition\",\"*groupCondition\"],FLOOR:[\"groupCondition\",\"*groupCondition\"],ROUND:[\"groupCondition\",\"*groupCondition\"],CONCAT:[\"groupCondition\",\"*groupCondition\"],STRLEN:[\"groupCondition\",\"*groupCondition\"],UCASE:[\"groupCondition\",\"*groupCondition\"],LCASE:[\"groupCondition\",\"*groupCondition\"],ENCODE_FOR_URI:[\"groupCondition\",\"*groupCondition\"],CONTAINS:[\"groupCondition\",\"*groupCondition\"],STRSTARTS:[\"groupCondition\",\"*groupCondition\"],STRENDS:[\"groupCondition\",\"*groupCondition\"],STRBEFORE:[\"groupCondition\",\"*groupCondition\"],STRAFTER:[\"groupCondition\",\"*groupCondition\"],YEAR:[\"groupCondition\",\"*groupCondition\"],MONTH:[\"groupCondition\",\"*groupCondition\"],DAY:[\"groupCondition\",\"*groupCondition\"],HOURS:[\"groupCondition\",\"*groupCondition\"],MINUTES:[\"groupCondition\",\"*groupCondition\"],SECONDS:[\"groupCondition\",\"*groupCondition\"],TIMEZONE:[\"groupCondition\",\"*groupCondition\"],TZ:[\"groupCondition\",\"*groupCondition\"],NOW:[\"groupCondition\",\"*groupCondition\"],UUID:[\"groupCondition\",\"*groupCondition\"],STRUUID:[\"groupCondition\",\"*groupCondition\"],MD5:[\"groupCondition\",\"*groupCondition\"],SHA1:[\"groupCondition\",\"*groupCondition\"],SHA256:[\"groupCondition\",\"*groupCondition\"],SHA384:[\"groupCondition\",\"*groupCondition\"],SHA512:[\"groupCondition\",\"*groupCondition\"],COALESCE:[\"groupCondition\",\"*groupCondition\"],IF:[\"groupCondition\",\"*groupCondition\"],STRLANG:[\"groupCondition\",\"*groupCondition\"],STRDT:[\"groupCondition\",\"*groupCondition\"],SAMETERM:[\"groupCondition\",\"*groupCondition\"],ISIRI:[\"groupCondition\",\"*groupCondition\"],ISURI:[\"groupCondition\",\"*groupCondition\"],ISBLANK:[\"groupCondition\",\"*groupCondition\"],ISLITERAL:[\"groupCondition\",\"*groupCondition\"],ISNUMERIC:[\"groupCondition\",\"*groupCondition\"],VAR1:[\"groupCondition\",\"*groupCondition\"],VAR2:[\"groupCondition\",\"*groupCondition\"],SUBSTR:[\"groupCondition\",\"*groupCondition\"],REPLACE:[\"groupCondition\",\"*groupCondition\"],REGEX:[\"groupCondition\",\"*groupCondition\"],EXISTS:[\"groupCondition\",\"*groupCondition\"],NOT:[\"groupCondition\",\"*groupCondition\"],IRI_REF:[\"groupCondition\",\"*groupCondition\"],PNAME_LN:[\"groupCondition\",\"*groupCondition\"],PNAME_NS:[\"groupCondition\",\"*groupCondition\"]},\"+havingCondition\":{\"(\":[\"havingCondition\",\"*havingCondition\"],STR:[\"havingCondition\",\"*havingCondition\"],LANG:[\"havingCondition\",\"*havingCondition\"],LANGMATCHES:[\"havingCondition\",\"*havingCondition\"],DATATYPE:[\"havingCondition\",\"*havingCondition\"],BOUND:[\"havingCondition\",\"*havingCondition\"],IRI:[\"havingCondition\",\"*havingCondition\"],URI:[\"havingCondition\",\"*havingCondition\"],BNODE:[\"havingCondition\",\"*havingCondition\"],RAND:[\"havingCondition\",\"*havingCondition\"],ABS:[\"havingCondition\",\"*havingCondition\"],CEIL:[\"havingCondition\",\"*havingCondition\"],FLOOR:[\"havingCondition\",\"*havingCondition\"],ROUND:[\"havingCondition\",\"*havingCondition\"],CONCAT:[\"havingCondition\",\"*havingCondition\"],\nSTRLEN:[\"havingCondition\",\"*havingCondition\"],UCASE:[\"havingCondition\",\"*havingCondition\"],LCASE:[\"havingCondition\",\"*havingCondition\"],ENCODE_FOR_URI:[\"havingCondition\",\"*havingCondition\"],CONTAINS:[\"havingCondition\",\"*havingCondition\"],STRSTARTS:[\"havingCondition\",\"*havingCondition\"],STRENDS:[\"havingCondition\",\"*havingCondition\"],STRBEFORE:[\"havingCondition\",\"*havingCondition\"],STRAFTER:[\"havingCondition\",\"*havingCondition\"],YEAR:[\"havingCondition\",\"*havingCondition\"],MONTH:[\"havingCondition\",\"*havingCondition\"],DAY:[\"havingCondition\",\"*havingCondition\"],HOURS:[\"havingCondition\",\"*havingCondition\"],MINUTES:[\"havingCondition\",\"*havingCondition\"],SECONDS:[\"havingCondition\",\"*havingCondition\"],TIMEZONE:[\"havingCondition\",\"*havingCondition\"],TZ:[\"havingCondition\",\"*havingCondition\"],NOW:[\"havingCondition\",\"*havingCondition\"],UUID:[\"havingCondition\",\"*havingCondition\"],STRUUID:[\"havingCondition\",\"*havingCondition\"],MD5:[\"havingCondition\",\"*havingCondition\"],SHA1:[\"havingCondition\",\"*havingCondition\"],SHA256:[\"havingCondition\",\"*havingCondition\"],SHA384:[\"havingCondition\",\"*havingCondition\"],SHA512:[\"havingCondition\",\"*havingCondition\"],COALESCE:[\"havingCondition\",\"*havingCondition\"],IF:[\"havingCondition\",\"*havingCondition\"],STRLANG:[\"havingCondition\",\"*havingCondition\"],STRDT:[\"havingCondition\",\"*havingCondition\"],SAMETERM:[\"havingCondition\",\"*havingCondition\"],ISIRI:[\"havingCondition\",\"*havingCondition\"],ISURI:[\"havingCondition\",\"*havingCondition\"],ISBLANK:[\"havingCondition\",\"*havingCondition\"],ISLITERAL:[\"havingCondition\",\"*havingCondition\"],ISNUMERIC:[\"havingCondition\",\"*havingCondition\"],SUBSTR:[\"havingCondition\",\"*havingCondition\"],REPLACE:[\"havingCondition\",\"*havingCondition\"],REGEX:[\"havingCondition\",\"*havingCondition\"],EXISTS:[\"havingCondition\",\"*havingCondition\"],NOT:[\"havingCondition\",\"*havingCondition\"],IRI_REF:[\"havingCondition\",\"*havingCondition\"],PNAME_LN:[\"havingCondition\",\"*havingCondition\"],PNAME_NS:[\"havingCondition\",\"*havingCondition\"]},\"+or([var,[ (,expression,AS,var,)]])\":{\"(\":[\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"],VAR1:[\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"],VAR2:[\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"]},\"+orderCondition\":{ASC:[\"orderCondition\",\"*orderCondition\"],DESC:[\"orderCondition\",\"*orderCondition\"],VAR1:[\"orderCondition\",\"*orderCondition\"],VAR2:[\"orderCondition\",\"*orderCondition\"],\"(\":[\"orderCondition\",\"*orderCondition\"],STR:[\"orderCondition\",\"*orderCondition\"],LANG:[\"orderCondition\",\"*orderCondition\"],LANGMATCHES:[\"orderCondition\",\"*orderCondition\"],DATATYPE:[\"orderCondition\",\"*orderCondition\"],BOUND:[\"orderCondition\",\"*orderCondition\"],IRI:[\"orderCondition\",\"*orderCondition\"],URI:[\"orderCondition\",\"*orderCondition\"],BNODE:[\"orderCondition\",\"*orderCondition\"],RAND:[\"orderCondition\",\"*orderCondition\"],ABS:[\"orderCondition\",\"*orderCondition\"],CEIL:[\"orderCondition\",\"*orderCondition\"],FLOOR:[\"orderCondition\",\"*orderCondition\"],ROUND:[\"orderCondition\",\"*orderCondition\"],CONCAT:[\"orderCondition\",\"*orderCondition\"],STRLEN:[\"orderCondition\",\"*orderCondition\"],UCASE:[\"orderCondition\",\"*orderCondition\"],LCASE:[\"orderCondition\",\"*orderCondition\"],ENCODE_FOR_URI:[\"orderCondition\",\"*orderCondition\"],CONTAINS:[\"orderCondition\",\"*orderCondition\"],STRSTARTS:[\"orderCondition\",\"*orderCondition\"],STRENDS:[\"orderCondition\",\"*orderCondition\"],STRBEFORE:[\"orderCondition\",\"*orderCondition\"],STRAFTER:[\"orderCondition\",\"*orderCondition\"],YEAR:[\"orderCondition\",\"*orderCondition\"],MONTH:[\"orderCondition\",\"*orderCondition\"],DAY:[\"orderCondition\",\"*orderCondition\"],HOURS:[\"orderCondition\",\"*orderCondition\"],MINUTES:[\"orderCondition\",\"*orderCondition\"],SECONDS:[\"orderCondition\",\"*orderCondition\"],TIMEZONE:[\"orderCondition\",\"*orderCondition\"],TZ:[\"orderCondition\",\"*orderCondition\"],NOW:[\"orderCondition\",\"*orderCondition\"],UUID:[\"orderCondition\",\"*orderCondition\"],STRUUID:[\"orderCondition\",\"*orderCondition\"],MD5:[\"orderCondition\",\"*orderCondition\"],SHA1:[\"orderCondition\",\"*orderCondition\"],SHA256:[\"orderCondition\",\"*orderCondition\"],SHA384:[\"orderCondition\",\"*orderCondition\"],SHA512:[\"orderCondition\",\"*orderCondition\"],COALESCE:[\"orderCondition\",\"*orderCondition\"],IF:[\"orderCondition\",\"*orderCondition\"],STRLANG:[\"orderCondition\",\"*orderCondition\"],STRDT:[\"orderCondition\",\"*orderCondition\"],SAMETERM:[\"orderCondition\",\"*orderCondition\"],ISIRI:[\"orderCondition\",\"*orderCondition\"],ISURI:[\"orderCondition\",\"*orderCondition\"],ISBLANK:[\"orderCondition\",\"*orderCondition\"],ISLITERAL:[\"orderCondition\",\"*orderCondition\"],ISNUMERIC:[\"orderCondition\",\"*orderCondition\"],SUBSTR:[\"orderCondition\",\"*orderCondition\"],REPLACE:[\"orderCondition\",\"*orderCondition\"],REGEX:[\"orderCondition\",\"*orderCondition\"],EXISTS:[\"orderCondition\",\"*orderCondition\"],NOT:[\"orderCondition\",\"*orderCondition\"],IRI_REF:[\"orderCondition\",\"*orderCondition\"],PNAME_LN:[\"orderCondition\",\"*orderCondition\"],PNAME_NS:[\"orderCondition\",\"*orderCondition\"]},\"+varOrIRIref\":{VAR1:[\"varOrIRIref\",\"*varOrIRIref\"],VAR2:[\"varOrIRIref\",\"*varOrIRIref\"],IRI_REF:[\"varOrIRIref\",\"*varOrIRIref\"],PNAME_LN:[\"varOrIRIref\",\"*varOrIRIref\"],PNAME_NS:[\"varOrIRIref\",\"*varOrIRIref\"]},\"?.\":{\".\":[\".\"],VAR1:[],VAR2:[],NIL:[],\"(\":[],\"[\":[],IRI_REF:[],TRUE:[],FALSE:[],BLANK_NODE_LABEL:[],ANON:[],PNAME_LN:[],PNAME_NS:[],STRING_LITERAL1:[],STRING_LITERAL2:[],STRING_LITERAL_LONG1:[],STRING_LITERAL_LONG2:[],INTEGER:[],DECIMAL:[],DOUBLE:[],INTEGER_POSITIVE:[],DECIMAL_POSITIVE:[],DOUBLE_POSITIVE:[],INTEGER_NEGATIVE:[],DECIMAL_NEGATIVE:[],DOUBLE_NEGATIVE:[],GRAPH:[],\"{\":[],OPTIONAL:[],MINUS:[],SERVICE:[],FILTER:[],BIND:[],VALUES:[],\"}\":[]},\"?DISTINCT\":{DISTINCT:[\"DISTINCT\"],\"!\":[],\"+\":[],\"-\":[],VAR1:[],VAR2:[],\"(\":[],STR:[],LANG:[],LANGMATCHES:[],DATATYPE:[],BOUND:[],IRI:[],URI:[],BNODE:[],RAND:[],ABS:[],CEIL:[],FLOOR:[],ROUND:[],CONCAT:[],STRLEN:[],UCASE:[],LCASE:[],ENCODE_FOR_URI:[],CONTAINS:[],STRSTARTS:[],STRENDS:[],STRBEFORE:[],STRAFTER:[],YEAR:[],MONTH:[],DAY:[],HOURS:[],MINUTES:[],SECONDS:[],TIMEZONE:[],TZ:[],NOW:[],UUID:[],STRUUID:[],MD5:[],SHA1:[],SHA256:[],SHA384:[],SHA512:[],COALESCE:[],IF:[],STRLANG:[],STRDT:[],SAMETERM:[],ISIRI:[],ISURI:[],ISBLANK:[],ISLITERAL:[],ISNUMERIC:[],TRUE:[],FALSE:[],COUNT:[],SUM:[],MIN:[],MAX:[],AVG:[],SAMPLE:[],GROUP_CONCAT:[],SUBSTR:[],REPLACE:[],REGEX:[],EXISTS:[],NOT:[],IRI_REF:[],STRING_LITERAL1:[],STRING_LITERAL2:[],STRING_LITERAL_LONG1:[],STRING_LITERAL_LONG2:[],INTEGER:[],DECIMAL:[],DOUBLE:[],INTEGER_POSITIVE:[],DECIMAL_POSITIVE:[],DOUBLE_POSITIVE:[],INTEGER_NEGATIVE:[],DECIMAL_NEGATIVE:[],DOUBLE_NEGATIVE:[],PNAME_LN:[],PNAME_NS:[],\"*\":[]},\"?GRAPH\":{GRAPH:[\"GRAPH\"],IRI_REF:[],PNAME_LN:[],PNAME_NS:[]},\"?SILENT\":{SILENT:[\"SILENT\"],VAR1:[],VAR2:[],IRI_REF:[],PNAME_LN:[],PNAME_NS:[]},\"?SILENT_1\":{SILENT:[\"SILENT\"],IRI_REF:[],PNAME_LN:[],PNAME_NS:[]},\"?SILENT_2\":{SILENT:[\"SILENT\"],GRAPH:[],DEFAULT:[],NAMED:[],ALL:[]},\"?SILENT_3\":{SILENT:[\"SILENT\"],GRAPH:[]},\"?SILENT_4\":{SILENT:[\"SILENT\"],DEFAULT:[],GRAPH:[],IRI_REF:[],PNAME_LN:[],PNAME_NS:[]},\"?WHERE\":{WHERE:[\"WHERE\"],\"{\":[]},\"?[,,expression]\":{\",\":[\"[,,expression]\"],\")\":[]},\"?[.,?constructTriples]\":{\".\":[\"[.,?constructTriples]\"],\"}\":[]},\"?[.,?triplesBlock]\":{\".\":[\"[.,?triplesBlock]\"],\"{\":[],OPTIONAL:[],MINUS:[],GRAPH:[],SERVICE:[],FILTER:[],BIND:[],VALUES:[],\"}\":[]},\"?[.,?triplesTemplate]\":{\".\":[\"[.,?triplesTemplate]\"],\"}\":[],GRAPH:[]},\"?[;,SEPARATOR,=,string]\":{\";\":[\"[;,SEPARATOR,=,string]\"],\")\":[]},\"?[;,update]\":{\";\":[\"[;,update]\"],$:[]},\"?[AS,var]\":{AS:[\"[AS,var]\"],\")\":[]},\"?[INTO,graphRef]\":{INTO:[\"[INTO,graphRef]\"],\";\":[],$:[]},\"?[or([verbPath,verbSimple]),objectList]\":{VAR1:[\"[or([verbPath,verbSimple]),objectList]\"],VAR2:[\"[or([verbPath,verbSimple]),objectList]\"],\"^\":[\"[or([verbPath,verbSimple]),objectList]\"],a:[\"[or([verbPath,verbSimple]),objectList]\"],\"!\":[\"[or([verbPath,verbSimple]),objectList]\"],\"(\":[\"[or([verbPath,verbSimple]),objectList]\"],IRI_REF:[\"[or([verbPath,verbSimple]),objectList]\"],PNAME_LN:[\"[or([verbPath,verbSimple]),objectList]\"],PNAME_NS:[\"[or([verbPath,verbSimple]),objectList]\"],\";\":[],\".\":[],\"]\":[],\"{\":[],OPTIONAL:[],MINUS:[],GRAPH:[],SERVICE:[],FILTER:[],BIND:[],VALUES:[],\"}\":[]},\"?[pathOneInPropertySet,*[|,pathOneInPropertySet]]\":{a:[\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"],\"^\":[\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"],IRI_REF:[\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"],PNAME_LN:[\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"],PNAME_NS:[\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"],\")\":[]},\"?[update1,?[;,update]]\":{INSERT:[\"[update1,?[;,update]]\"],DELETE:[\"[update1,?[;,update]]\"],LOAD:[\"[update1,?[;,update]]\"],CLEAR:[\"[update1,?[;,update]]\"],DROP:[\"[update1,?[;,update]]\"],ADD:[\"[update1,?[;,update]]\"],MOVE:[\"[update1,?[;,update]]\"],COPY:[\"[update1,?[;,update]]\"],CREATE:[\"[update1,?[;,update]]\"],WITH:[\"[update1,?[;,update]]\"],$:[]},\"?[verb,objectList]\":{a:[\"[verb,objectList]\"],VAR1:[\"[verb,objectList]\"],VAR2:[\"[verb,objectList]\"],IRI_REF:[\"[verb,objectList]\"],PNAME_LN:[\"[verb,objectList]\"],PNAME_NS:[\"[verb,objectList]\"],\";\":[],\".\":[],\"]\":[],\"}\":[],GRAPH:[],\"{\":[],OPTIONAL:[],MINUS:[],SERVICE:[],FILTER:[],BIND:[],VALUES:[]},\"?argList\":{NIL:[\"argList\"],\"(\":[\"argList\"],AS:[],\")\":[],\",\":[],\"||\":[],\"&&\":[],\"=\":[],\"!=\":[],\"<\":[],\">\":[],\"<=\":[],\">=\":[],IN:[],NOT:[],\"+\":[],\"-\":[],INTEGER_POSITIVE:[],DECIMAL_POSITIVE:[],DOUBLE_POSITIVE:[],INTEGER_NEGATIVE:[],DECIMAL_NEGATIVE:[],DOUBLE_NEGATIVE:[],\"*\":[],\"/\":[],\";\":[]},\"?baseDecl\":{BASE:[\"baseDecl\"],$:[],CONSTRUCT:[],DESCRIBE:[],ASK:[],INSERT:[],DELETE:[],SELECT:[],LOAD:[],CLEAR:[],DROP:[],ADD:[],MOVE:[],COPY:[],CREATE:[],WITH:[],PREFIX:[]},\"?constructTriples\":{VAR1:[\"constructTriples\"],VAR2:[\"constructTriples\"],NIL:[\"constructTriples\"],\"(\":[\"constructTriples\"],\"[\":[\"constructTriples\"],IRI_REF:[\"constructTriples\"],TRUE:[\"constructTriples\"],FALSE:[\"constructTriples\"],BLANK_NODE_LABEL:[\"constructTriples\"],ANON:[\"constructTriples\"],PNAME_LN:[\"constructTriples\"],PNAME_NS:[\"constructTriples\"],STRING_LITERAL1:[\"constructTriples\"],STRING_LITERAL2:[\"constructTriples\"],STRING_LITERAL_LONG1:[\"constructTriples\"],STRING_LITERAL_LONG2:[\"constructTriples\"],INTEGER:[\"constructTriples\"],DECIMAL:[\"constructTriples\"],DOUBLE:[\"constructTriples\"],INTEGER_POSITIVE:[\"constructTriples\"],DECIMAL_POSITIVE:[\"constructTriples\"],DOUBLE_POSITIVE:[\"constructTriples\"],INTEGER_NEGATIVE:[\"constructTriples\"],DECIMAL_NEGATIVE:[\"constructTriples\"],DOUBLE_NEGATIVE:[\"constructTriples\"],\"}\":[]},\"?groupClause\":{GROUP:[\"groupClause\"],VALUES:[],LIMIT:[],OFFSET:[],ORDER:[],HAVING:[],$:[],\"}\":[]},\"?havingClause\":{HAVING:[\"havingClause\"],VALUES:[],LIMIT:[],OFFSET:[],ORDER:[],$:[],\"}\":[]},\"?insertClause\":{INSERT:[\"insertClause\"],WHERE:[],USING:[]},\"?limitClause\":{LIMIT:[\"limitClause\"],VALUES:[],$:[],\"}\":[]},\"?limitOffsetClauses\":{LIMIT:[\"limitOffsetClauses\"],OFFSET:[\"limitOffsetClauses\"],VALUES:[],$:[],\"}\":[]},\"?offsetClause\":{OFFSET:[\"offsetClause\"],VALUES:[],$:[],\"}\":[]},\"?or([DISTINCT,REDUCED])\":{DISTINCT:[\"or([DISTINCT,REDUCED])\"],REDUCED:[\"or([DISTINCT,REDUCED])\"],\"*\":[],\"(\":[],VAR1:[],VAR2:[]},\"?or([LANGTAG,[^^,iriRef]])\":{LANGTAG:[\"or([LANGTAG,[^^,iriRef]])\"],\"^^\":[\"or([LANGTAG,[^^,iriRef]])\"],UNDEF:[],IRI_REF:[],TRUE:[],FALSE:[],PNAME_LN:[],PNAME_NS:[],STRING_LITERAL1:[],STRING_LITERAL2:[],STRING_LITERAL_LONG1:[],STRING_LITERAL_LONG2:[],INTEGER:[],DECIMAL:[],DOUBLE:[],INTEGER_POSITIVE:[],DECIMAL_POSITIVE:[],DOUBLE_POSITIVE:[],INTEGER_NEGATIVE:[],DECIMAL_NEGATIVE:[],DOUBLE_NEGATIVE:[],a:[],VAR1:[],VAR2:[],\"^\":[],\"!\":[],\"(\":[],\".\":[],\";\":[],\",\":[],AS:[],\")\":[],\"||\":[],\"&&\":[],\"=\":[],\"!=\":[],\"<\":[],\">\":[],\"<=\":[],\">=\":[],IN:[],NOT:[],\"+\":[],\"-\":[],\"*\":[],\"/\":[],\"}\":[],\"[\":[],NIL:[],BLANK_NODE_LABEL:[],ANON:[],\"]\":[],GRAPH:[],\"{\":[],OPTIONAL:[],MINUS:[],SERVICE:[],FILTER:[],BIND:[],VALUES:[]},\"?or([[*,unaryExpression],[/,unaryExpression]])\":{\"*\":[\"or([[*,unaryExpression],[/,unaryExpression]])\"],\"/\":[\"or([[*,unaryExpression],[/,unaryExpression]])\"],\"+\":[],\"-\":[],INTEGER_POSITIVE:[],DECIMAL_POSITIVE:[],DOUBLE_POSITIVE:[],INTEGER_NEGATIVE:[],DECIMAL_NEGATIVE:[],DOUBLE_NEGATIVE:[],AS:[],\")\":[],\",\":[],\"||\":[],\"&&\":[],\"=\":[],\"!=\":[],\"<\":[],\">\":[],\"<=\":[],\">=\":[],IN:[],NOT:[],\";\":[]},\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\":{\"=\":[\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],\"!=\":[\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],\"<\":[\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],\">\":[\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],\"<=\":[\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],\">=\":[\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],IN:[\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],NOT:[\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],AS:[],\")\":[],\",\":[],\"||\":[],\"&&\":[],\";\":[]},\"?orderClause\":{ORDER:[\"orderClause\"],VALUES:[],LIMIT:[],OFFSET:[],$:[],\"}\":[]},\"?pathMod\":{\"*\":[\"pathMod\"],\"?\":[\"pathMod\"],\"+\":[\"pathMod\"],\"{\":[\"pathMod\"],\"|\":[],\"/\":[],\")\":[],\"(\":[],\"[\":[],VAR1:[],VAR2:[],NIL:[],IRI_REF:[],TRUE:[],FALSE:[],BLANK_NODE_LABEL:[],ANON:[],PNAME_LN:[],PNAME_NS:[],STRING_LITERAL1:[],STRING_LITERAL2:[],STRING_LITERAL_LONG1:[],STRING_LITERAL_LONG2:[],INTEGER:[],DECIMAL:[],DOUBLE:[],INTEGER_POSITIVE:[],DECIMAL_POSITIVE:[],DOUBLE_POSITIVE:[],INTEGER_NEGATIVE:[],DECIMAL_NEGATIVE:[],DOUBLE_NEGATIVE:[]},\"?triplesBlock\":{VAR1:[\"triplesBlock\"],VAR2:[\"triplesBlock\"],NIL:[\"triplesBlock\"],\"(\":[\"triplesBlock\"],\"[\":[\"triplesBlock\"],IRI_REF:[\"triplesBlock\"],TRUE:[\"triplesBlock\"],FALSE:[\"triplesBlock\"],BLANK_NODE_LABEL:[\"triplesBlock\"],ANON:[\"triplesBlock\"],PNAME_LN:[\"triplesBlock\"],PNAME_NS:[\"triplesBlock\"],STRING_LITERAL1:[\"triplesBlock\"],STRING_LITERAL2:[\"triplesBlock\"],STRING_LITERAL_LONG1:[\"triplesBlock\"],STRING_LITERAL_LONG2:[\"triplesBlock\"],INTEGER:[\"triplesBlock\"],DECIMAL:[\"triplesBlock\"],DOUBLE:[\"triplesBlock\"],INTEGER_POSITIVE:[\"triplesBlock\"],DECIMAL_POSITIVE:[\"triplesBlock\"],DOUBLE_POSITIVE:[\"triplesBlock\"],INTEGER_NEGATIVE:[\"triplesBlock\"],DECIMAL_NEGATIVE:[\"triplesBlock\"],DOUBLE_NEGATIVE:[\"triplesBlock\"],\"{\":[],OPTIONAL:[],MINUS:[],GRAPH:[],SERVICE:[],FILTER:[],BIND:[],VALUES:[],\"}\":[]},\"?triplesTemplate\":{VAR1:[\"triplesTemplate\"],VAR2:[\"triplesTemplate\"],NIL:[\"triplesTemplate\"],\"(\":[\"triplesTemplate\"],\"[\":[\"triplesTemplate\"],IRI_REF:[\"triplesTemplate\"],TRUE:[\"triplesTemplate\"],FALSE:[\"triplesTemplate\"],BLANK_NODE_LABEL:[\"triplesTemplate\"],ANON:[\"triplesTemplate\"],PNAME_LN:[\"triplesTemplate\"],PNAME_NS:[\"triplesTemplate\"],STRING_LITERAL1:[\"triplesTemplate\"],STRING_LITERAL2:[\"triplesTemplate\"],STRING_LITERAL_LONG1:[\"triplesTemplate\"],STRING_LITERAL_LONG2:[\"triplesTemplate\"],INTEGER:[\"triplesTemplate\"],DECIMAL:[\"triplesTemplate\"],DOUBLE:[\"triplesTemplate\"],INTEGER_POSITIVE:[\"triplesTemplate\"],DECIMAL_POSITIVE:[\"triplesTemplate\"],DOUBLE_POSITIVE:[\"triplesTemplate\"],INTEGER_NEGATIVE:[\"triplesTemplate\"],DECIMAL_NEGATIVE:[\"triplesTemplate\"],DOUBLE_NEGATIVE:[\"triplesTemplate\"],\"}\":[],GRAPH:[]},\"?whereClause\":{WHERE:[\"whereClause\"],\"{\":[\"whereClause\"],ORDER:[],HAVING:[],GROUP:[],LIMIT:[],OFFSET:[],VALUES:[],$:[]},\"[ (,*dataBlockValue,)]\":{\"(\":[\"(\",\"*dataBlockValue\",\")\"]},\"[ (,*var,)]\":{\"(\":[\"(\",\"*var\",\")\"]},\"[ (,expression,)]\":{\"(\":[\"(\",\"expression\",\")\"]},\"[ (,expression,AS,var,)]\":{\"(\":[\"(\",\"expression\",\"AS\",\"var\",\")\"]},\"[!=,numericExpression]\":{\"!=\":[\"!=\",\"numericExpression\"]},\"[&&,valueLogical]\":{\"&&\":[\"&&\",\"valueLogical\"]},\"[*,unaryExpression]\":{\"*\":[\"*\",\"unaryExpression\"]},\"[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]\":{WHERE:[\"*datasetClause\",\"WHERE\",\"{\",\"?triplesTemplate\",\"}\",\"solutionModifier\"],FROM:[\"*datasetClause\",\"WHERE\",\"{\",\"?triplesTemplate\",\"}\",\"solutionModifier\"]},\"[+,multiplicativeExpression]\":{\"+\":[\"+\",\"multiplicativeExpression\"]},\"[,,expression]\":{\",\":[\",\",\"expression\"]},\"[,,integer,}]\":{\",\":[\",\",\"integer\",\"}\"]},\"[,,objectPath]\":{\",\":[\",\",\"objectPath\"]},\"[,,object]\":{\",\":[\",\",\"object\"]},\"[,,or([},[integer,}]])]\":{\",\":[\",\",\"or([},[integer,}]])\"]},\"[-,multiplicativeExpression]\":{\"-\":[\"-\",\"multiplicativeExpression\"]},\"[.,?constructTriples]\":{\".\":[\".\",\"?constructTriples\"]},\"[.,?triplesBlock]\":{\".\":[\".\",\"?triplesBlock\"]},\"[.,?triplesTemplate]\":{\".\":[\".\",\"?triplesTemplate\"]},\"[/,pathEltOrInverse]\":{\"/\":[\"/\",\"pathEltOrInverse\"]},\"[/,unaryExpression]\":{\"/\":[\"/\",\"unaryExpression\"]},\"[;,?[or([verbPath,verbSimple]),objectList]]\":{\";\":[\";\",\"?[or([verbPath,verbSimple]),objectList]\"]},\"[;,?[verb,objectList]]\":{\";\":[\";\",\"?[verb,objectList]\"]},\"[;,SEPARATOR,=,string]\":{\";\":[\";\",\"SEPARATOR\",\"=\",\"string\"]},\"[;,update]\":{\";\":[\";\",\"update\"]},\"[<,numericExpression]\":{\"<\":[\"<\",\"numericExpression\"]},\"[<=,numericExpression]\":{\"<=\":[\"<=\",\"numericExpression\"]},\"[=,numericExpression]\":{\"=\":[\"=\",\"numericExpression\"]},\"[>,numericExpression]\":{\">\":[\">\",\"numericExpression\"]},\"[>=,numericExpression]\":{\">=\":[\">=\",\"numericExpression\"]},\"[AS,var]\":{AS:[\"AS\",\"var\"]},\"[IN,expressionList]\":{IN:[\"IN\",\"expressionList\"]},\"[INTO,graphRef]\":{INTO:[\"INTO\",\"graphRef\"]},\"[NAMED,iriRef]\":{NAMED:[\"NAMED\",\"iriRef\"]},\"[NOT,IN,expressionList]\":{NOT:[\"NOT\",\"IN\",\"expressionList\"]},\"[UNION,groupGraphPattern]\":{UNION:[\"UNION\",\"groupGraphPattern\"]},\"[^^,iriRef]\":{\"^^\":[\"^^\",\"iriRef\"]},\"[constructTemplate,*datasetClause,whereClause,solutionModifier]\":{\"{\":[\"constructTemplate\",\"*datasetClause\",\"whereClause\",\"solutionModifier\"]},\"[deleteClause,?insertClause]\":{DELETE:[\"deleteClause\",\"?insertClause\"]},\"[graphPatternNotTriples,?.,?triplesBlock]\":{\"{\":[\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"],OPTIONAL:[\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"],MINUS:[\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"],GRAPH:[\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"],SERVICE:[\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"],FILTER:[\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"],BIND:[\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"],VALUES:[\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"]},\"[integer,or([[,,or([},[integer,}]])],}])]\":{INTEGER:[\"integer\",\"or([[,,or([},[integer,}]])],}])\"]},\"[integer,}]\":{INTEGER:[\"integer\",\"}\"]},\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\":{INTEGER_POSITIVE:[\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"],DECIMAL_POSITIVE:[\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"],DOUBLE_POSITIVE:[\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"],INTEGER_NEGATIVE:[\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"],DECIMAL_NEGATIVE:[\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"],DOUBLE_NEGATIVE:[\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"]},\"[or([verbPath,verbSimple]),objectList]\":{VAR1:[\"or([verbPath,verbSimple])\",\"objectList\"],VAR2:[\"or([verbPath,verbSimple])\",\"objectList\"],\"^\":[\"or([verbPath,verbSimple])\",\"objectList\"],a:[\"or([verbPath,verbSimple])\",\"objectList\"],\"!\":[\"or([verbPath,verbSimple])\",\"objectList\"],\"(\":[\"or([verbPath,verbSimple])\",\"objectList\"],IRI_REF:[\"or([verbPath,verbSimple])\",\"objectList\"],PNAME_LN:[\"or([verbPath,verbSimple])\",\"objectList\"],PNAME_NS:[\"or([verbPath,verbSimple])\",\"objectList\"]},\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\":{a:[\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"],\"^\":[\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"],IRI_REF:[\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"],PNAME_LN:[\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"],PNAME_NS:[\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"]},\"[quadsNotTriples,?.,?triplesTemplate]\":{GRAPH:[\"quadsNotTriples\",\"?.\",\"?triplesTemplate\"]},\"[update1,?[;,update]]\":{INSERT:[\"update1\",\"?[;,update]\"],DELETE:[\"update1\",\"?[;,update]\"],LOAD:[\"update1\",\"?[;,update]\"],CLEAR:[\"update1\",\"?[;,update]\"],DROP:[\"update1\",\"?[;,update]\"],ADD:[\"update1\",\"?[;,update]\"],MOVE:[\"update1\",\"?[;,update]\"],COPY:[\"update1\",\"?[;,update]\"],CREATE:[\"update1\",\"?[;,update]\"],WITH:[\"update1\",\"?[;,update]\"]},\"[verb,objectList]\":{a:[\"verb\",\"objectList\"],VAR1:[\"verb\",\"objectList\"],VAR2:[\"verb\",\"objectList\"],IRI_REF:[\"verb\",\"objectList\"],PNAME_LN:[\"verb\",\"objectList\"],PNAME_NS:[\"verb\",\"objectList\"]},\"[|,pathOneInPropertySet]\":{\"|\":[\"|\",\"pathOneInPropertySet\"]},\"[|,pathSequence]\":{\"|\":[\"|\",\"pathSequence\"]},\"[||,conditionalAndExpression]\":{\"||\":[\"||\",\"conditionalAndExpression\"]},add:{ADD:[\"ADD\",\"?SILENT_4\",\"graphOrDefault\",\"TO\",\"graphOrDefault\"]},additiveExpression:{\"!\":[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],\"+\":[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],\"-\":[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],VAR1:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],VAR2:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],\"(\":[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],STR:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],LANG:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],LANGMATCHES:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],DATATYPE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],BOUND:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],IRI:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],URI:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],BNODE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],RAND:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],ABS:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],CEIL:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],FLOOR:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],ROUND:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],CONCAT:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],STRLEN:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],UCASE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],LCASE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],ENCODE_FOR_URI:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],CONTAINS:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],STRSTARTS:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],STRENDS:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],STRBEFORE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],STRAFTER:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],YEAR:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],MONTH:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],DAY:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],HOURS:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],MINUTES:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],SECONDS:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],TIMEZONE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],TZ:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],NOW:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],UUID:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],STRUUID:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],MD5:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],SHA1:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],SHA256:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],SHA384:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],SHA512:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],COALESCE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],IF:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],STRLANG:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],STRDT:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],SAMETERM:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],ISIRI:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],\nISURI:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],ISBLANK:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],ISLITERAL:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],ISNUMERIC:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],TRUE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],FALSE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],COUNT:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],SUM:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],MIN:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],MAX:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],AVG:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],SAMPLE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],GROUP_CONCAT:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],SUBSTR:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],REPLACE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],REGEX:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],EXISTS:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],NOT:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],IRI_REF:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],STRING_LITERAL1:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],STRING_LITERAL2:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],STRING_LITERAL_LONG1:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],STRING_LITERAL_LONG2:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],INTEGER:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],DECIMAL:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],DOUBLE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],INTEGER_POSITIVE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],DECIMAL_POSITIVE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],DOUBLE_POSITIVE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],INTEGER_NEGATIVE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],DECIMAL_NEGATIVE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],DOUBLE_NEGATIVE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],PNAME_LN:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],PNAME_NS:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"]},aggregate:{COUNT:[\"COUNT\",\"(\",\"?DISTINCT\",\"or([*,expression])\",\")\"],SUM:[\"SUM\",\"(\",\"?DISTINCT\",\"expression\",\")\"],MIN:[\"MIN\",\"(\",\"?DISTINCT\",\"expression\",\")\"],MAX:[\"MAX\",\"(\",\"?DISTINCT\",\"expression\",\")\"],AVG:[\"AVG\",\"(\",\"?DISTINCT\",\"expression\",\")\"],SAMPLE:[\"SAMPLE\",\"(\",\"?DISTINCT\",\"expression\",\")\"],GROUP_CONCAT:[\"GROUP_CONCAT\",\"(\",\"?DISTINCT\",\"expression\",\"?[;,SEPARATOR,=,string]\",\")\"]},allowBnodes:{\"}\":[]},allowVars:{\"}\":[]},argList:{NIL:[\"NIL\"],\"(\":[\"(\",\"?DISTINCT\",\"expression\",\"*[,,expression]\",\")\"]},askQuery:{ASK:[\"ASK\",\"*datasetClause\",\"whereClause\",\"solutionModifier\"]},baseDecl:{BASE:[\"BASE\",\"IRI_REF\"]},bind:{BIND:[\"BIND\",\"(\",\"expression\",\"AS\",\"var\",\")\"]},blankNode:{BLANK_NODE_LABEL:[\"BLANK_NODE_LABEL\"],ANON:[\"ANON\"]},blankNodePropertyList:{\"[\":[\"[\",\"propertyListNotEmpty\",\"]\"]},blankNodePropertyListPath:{\"[\":[\"[\",\"propertyListPathNotEmpty\",\"]\"]},booleanLiteral:{TRUE:[\"TRUE\"],FALSE:[\"FALSE\"]},brackettedExpression:{\"(\":[\"(\",\"expression\",\")\"]},builtInCall:{STR:[\"STR\",\"(\",\"expression\",\")\"],LANG:[\"LANG\",\"(\",\"expression\",\")\"],LANGMATCHES:[\"LANGMATCHES\",\"(\",\"expression\",\",\",\"expression\",\")\"],DATATYPE:[\"DATATYPE\",\"(\",\"expression\",\")\"],BOUND:[\"BOUND\",\"(\",\"var\",\")\"],IRI:[\"IRI\",\"(\",\"expression\",\")\"],URI:[\"URI\",\"(\",\"expression\",\")\"],BNODE:[\"BNODE\",\"or([[ (,expression,)],NIL])\"],RAND:[\"RAND\",\"NIL\"],ABS:[\"ABS\",\"(\",\"expression\",\")\"],CEIL:[\"CEIL\",\"(\",\"expression\",\")\"],FLOOR:[\"FLOOR\",\"(\",\"expression\",\")\"],ROUND:[\"ROUND\",\"(\",\"expression\",\")\"],CONCAT:[\"CONCAT\",\"expressionList\"],SUBSTR:[\"substringExpression\"],STRLEN:[\"STRLEN\",\"(\",\"expression\",\")\"],REPLACE:[\"strReplaceExpression\"],UCASE:[\"UCASE\",\"(\",\"expression\",\")\"],LCASE:[\"LCASE\",\"(\",\"expression\",\")\"],ENCODE_FOR_URI:[\"ENCODE_FOR_URI\",\"(\",\"expression\",\")\"],CONTAINS:[\"CONTAINS\",\"(\",\"expression\",\",\",\"expression\",\")\"],STRSTARTS:[\"STRSTARTS\",\"(\",\"expression\",\",\",\"expression\",\")\"],STRENDS:[\"STRENDS\",\"(\",\"expression\",\",\",\"expression\",\")\"],STRBEFORE:[\"STRBEFORE\",\"(\",\"expression\",\",\",\"expression\",\")\"],STRAFTER:[\"STRAFTER\",\"(\",\"expression\",\",\",\"expression\",\")\"],YEAR:[\"YEAR\",\"(\",\"expression\",\")\"],MONTH:[\"MONTH\",\"(\",\"expression\",\")\"],DAY:[\"DAY\",\"(\",\"expression\",\")\"],HOURS:[\"HOURS\",\"(\",\"expression\",\")\"],MINUTES:[\"MINUTES\",\"(\",\"expression\",\")\"],SECONDS:[\"SECONDS\",\"(\",\"expression\",\")\"],TIMEZONE:[\"TIMEZONE\",\"(\",\"expression\",\")\"],TZ:[\"TZ\",\"(\",\"expression\",\")\"],NOW:[\"NOW\",\"NIL\"],UUID:[\"UUID\",\"NIL\"],STRUUID:[\"STRUUID\",\"NIL\"],MD5:[\"MD5\",\"(\",\"expression\",\")\"],SHA1:[\"SHA1\",\"(\",\"expression\",\")\"],SHA256:[\"SHA256\",\"(\",\"expression\",\")\"],SHA384:[\"SHA384\",\"(\",\"expression\",\")\"],SHA512:[\"SHA512\",\"(\",\"expression\",\")\"],COALESCE:[\"COALESCE\",\"expressionList\"],IF:[\"IF\",\"(\",\"expression\",\",\",\"expression\",\",\",\"expression\",\")\"],STRLANG:[\"STRLANG\",\"(\",\"expression\",\",\",\"expression\",\")\"],STRDT:[\"STRDT\",\"(\",\"expression\",\",\",\"expression\",\")\"],SAMETERM:[\"SAMETERM\",\"(\",\"expression\",\",\",\"expression\",\")\"],ISIRI:[\"ISIRI\",\"(\",\"expression\",\")\"],ISURI:[\"ISURI\",\"(\",\"expression\",\")\"],ISBLANK:[\"ISBLANK\",\"(\",\"expression\",\")\"],ISLITERAL:[\"ISLITERAL\",\"(\",\"expression\",\")\"],ISNUMERIC:[\"ISNUMERIC\",\"(\",\"expression\",\")\"],REGEX:[\"regexExpression\"],EXISTS:[\"existsFunc\"],NOT:[\"notExistsFunc\"]},clear:{CLEAR:[\"CLEAR\",\"?SILENT_2\",\"graphRefAll\"]},collection:{\"(\":[\"(\",\"+graphNode\",\")\"]},collectionPath:{\"(\":[\"(\",\"+graphNodePath\",\")\"]},conditionalAndExpression:{\"!\":[\"valueLogical\",\"*[&&,valueLogical]\"],\"+\":[\"valueLogical\",\"*[&&,valueLogical]\"],\"-\":[\"valueLogical\",\"*[&&,valueLogical]\"],VAR1:[\"valueLogical\",\"*[&&,valueLogical]\"],VAR2:[\"valueLogical\",\"*[&&,valueLogical]\"],\"(\":[\"valueLogical\",\"*[&&,valueLogical]\"],STR:[\"valueLogical\",\"*[&&,valueLogical]\"],LANG:[\"valueLogical\",\"*[&&,valueLogical]\"],LANGMATCHES:[\"valueLogical\",\"*[&&,valueLogical]\"],DATATYPE:[\"valueLogical\",\"*[&&,valueLogical]\"],BOUND:[\"valueLogical\",\"*[&&,valueLogical]\"],IRI:[\"valueLogical\",\"*[&&,valueLogical]\"],URI:[\"valueLogical\",\"*[&&,valueLogical]\"],BNODE:[\"valueLogical\",\"*[&&,valueLogical]\"],RAND:[\"valueLogical\",\"*[&&,valueLogical]\"],ABS:[\"valueLogical\",\"*[&&,valueLogical]\"],CEIL:[\"valueLogical\",\"*[&&,valueLogical]\"],FLOOR:[\"valueLogical\",\"*[&&,valueLogical]\"],ROUND:[\"valueLogical\",\"*[&&,valueLogical]\"],CONCAT:[\"valueLogical\",\"*[&&,valueLogical]\"],STRLEN:[\"valueLogical\",\"*[&&,valueLogical]\"],UCASE:[\"valueLogical\",\"*[&&,valueLogical]\"],LCASE:[\"valueLogical\",\"*[&&,valueLogical]\"],ENCODE_FOR_URI:[\"valueLogical\",\"*[&&,valueLogical]\"],CONTAINS:[\"valueLogical\",\"*[&&,valueLogical]\"],STRSTARTS:[\"valueLogical\",\"*[&&,valueLogical]\"],STRENDS:[\"valueLogical\",\"*[&&,valueLogical]\"],STRBEFORE:[\"valueLogical\",\"*[&&,valueLogical]\"],STRAFTER:[\"valueLogical\",\"*[&&,valueLogical]\"],YEAR:[\"valueLogical\",\"*[&&,valueLogical]\"],MONTH:[\"valueLogical\",\"*[&&,valueLogical]\"],DAY:[\"valueLogical\",\"*[&&,valueLogical]\"],HOURS:[\"valueLogical\",\"*[&&,valueLogical]\"],MINUTES:[\"valueLogical\",\"*[&&,valueLogical]\"],SECONDS:[\"valueLogical\",\"*[&&,valueLogical]\"],TIMEZONE:[\"valueLogical\",\"*[&&,valueLogical]\"],TZ:[\"valueLogical\",\"*[&&,valueLogical]\"],NOW:[\"valueLogical\",\"*[&&,valueLogical]\"],UUID:[\"valueLogical\",\"*[&&,valueLogical]\"],STRUUID:[\"valueLogical\",\"*[&&,valueLogical]\"],MD5:[\"valueLogical\",\"*[&&,valueLogical]\"],SHA1:[\"valueLogical\",\"*[&&,valueLogical]\"],SHA256:[\"valueLogical\",\"*[&&,valueLogical]\"],SHA384:[\"valueLogical\",\"*[&&,valueLogical]\"],SHA512:[\"valueLogical\",\"*[&&,valueLogical]\"],COALESCE:[\"valueLogical\",\"*[&&,valueLogical]\"],IF:[\"valueLogical\",\"*[&&,valueLogical]\"],STRLANG:[\"valueLogical\",\"*[&&,valueLogical]\"],STRDT:[\"valueLogical\",\"*[&&,valueLogical]\"],SAMETERM:[\"valueLogical\",\"*[&&,valueLogical]\"],ISIRI:[\"valueLogical\",\"*[&&,valueLogical]\"],ISURI:[\"valueLogical\",\"*[&&,valueLogical]\"],ISBLANK:[\"valueLogical\",\"*[&&,valueLogical]\"],ISLITERAL:[\"valueLogical\",\"*[&&,valueLogical]\"],ISNUMERIC:[\"valueLogical\",\"*[&&,valueLogical]\"],TRUE:[\"valueLogical\",\"*[&&,valueLogical]\"],FALSE:[\"valueLogical\",\"*[&&,valueLogical]\"],COUNT:[\"valueLogical\",\"*[&&,valueLogical]\"],SUM:[\"valueLogical\",\"*[&&,valueLogical]\"],MIN:[\"valueLogical\",\"*[&&,valueLogical]\"],MAX:[\"valueLogical\",\"*[&&,valueLogical]\"],AVG:[\"valueLogical\",\"*[&&,valueLogical]\"],SAMPLE:[\"valueLogical\",\"*[&&,valueLogical]\"],GROUP_CONCAT:[\"valueLogical\",\"*[&&,valueLogical]\"],SUBSTR:[\"valueLogical\",\"*[&&,valueLogical]\"],REPLACE:[\"valueLogical\",\"*[&&,valueLogical]\"],REGEX:[\"valueLogical\",\"*[&&,valueLogical]\"],EXISTS:[\"valueLogical\",\"*[&&,valueLogical]\"],NOT:[\"valueLogical\",\"*[&&,valueLogical]\"],IRI_REF:[\"valueLogical\",\"*[&&,valueLogical]\"],STRING_LITERAL1:[\"valueLogical\",\"*[&&,valueLogical]\"],STRING_LITERAL2:[\"valueLogical\",\"*[&&,valueLogical]\"],STRING_LITERAL_LONG1:[\"valueLogical\",\"*[&&,valueLogical]\"],STRING_LITERAL_LONG2:[\"valueLogical\",\"*[&&,valueLogical]\"],INTEGER:[\"valueLogical\",\"*[&&,valueLogical]\"],DECIMAL:[\"valueLogical\",\"*[&&,valueLogical]\"],DOUBLE:[\"valueLogical\",\"*[&&,valueLogical]\"],INTEGER_POSITIVE:[\"valueLogical\",\"*[&&,valueLogical]\"],DECIMAL_POSITIVE:[\"valueLogical\",\"*[&&,valueLogical]\"],DOUBLE_POSITIVE:[\"valueLogical\",\"*[&&,valueLogical]\"],INTEGER_NEGATIVE:[\"valueLogical\",\"*[&&,valueLogical]\"],DECIMAL_NEGATIVE:[\"valueLogical\",\"*[&&,valueLogical]\"],DOUBLE_NEGATIVE:[\"valueLogical\",\"*[&&,valueLogical]\"],PNAME_LN:[\"valueLogical\",\"*[&&,valueLogical]\"],PNAME_NS:[\"valueLogical\",\"*[&&,valueLogical]\"]},conditionalOrExpression:{\"!\":[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],\"+\":[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],\"-\":[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],VAR1:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],VAR2:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],\"(\":[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],STR:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],LANG:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],LANGMATCHES:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],DATATYPE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],BOUND:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],IRI:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],URI:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],BNODE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],RAND:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],ABS:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],CEIL:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],FLOOR:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],ROUND:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],CONCAT:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],STRLEN:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],UCASE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],LCASE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],ENCODE_FOR_URI:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],CONTAINS:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],STRSTARTS:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],STRENDS:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],STRBEFORE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],STRAFTER:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],YEAR:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],MONTH:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],DAY:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],HOURS:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],MINUTES:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],SECONDS:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],TIMEZONE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],TZ:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],NOW:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],UUID:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],STRUUID:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],MD5:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],SHA1:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],SHA256:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],SHA384:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],SHA512:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],COALESCE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],IF:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],STRLANG:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],STRDT:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],SAMETERM:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],ISIRI:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],ISURI:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],ISBLANK:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],ISLITERAL:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],ISNUMERIC:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],TRUE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],FALSE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],COUNT:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],SUM:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],MIN:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],MAX:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],AVG:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],SAMPLE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],GROUP_CONCAT:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],SUBSTR:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],REPLACE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],REGEX:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],EXISTS:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],NOT:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],IRI_REF:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],STRING_LITERAL1:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],STRING_LITERAL2:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],STRING_LITERAL_LONG1:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],STRING_LITERAL_LONG2:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],INTEGER:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],DECIMAL:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],DOUBLE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],INTEGER_POSITIVE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],DECIMAL_POSITIVE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],DOUBLE_POSITIVE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],INTEGER_NEGATIVE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],DECIMAL_NEGATIVE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],DOUBLE_NEGATIVE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],PNAME_LN:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],PNAME_NS:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"]},constraint:{\"(\":[\"brackettedExpression\"],STR:[\"builtInCall\"],LANG:[\"builtInCall\"],LANGMATCHES:[\"builtInCall\"],DATATYPE:[\"builtInCall\"],BOUND:[\"builtInCall\"],IRI:[\"builtInCall\"],URI:[\"builtInCall\"],BNODE:[\"builtInCall\"],RAND:[\"builtInCall\"],ABS:[\"builtInCall\"],CEIL:[\"builtInCall\"],FLOOR:[\"builtInCall\"],ROUND:[\"builtInCall\"],CONCAT:[\"builtInCall\"],STRLEN:[\"builtInCall\"],UCASE:[\"builtInCall\"],LCASE:[\"builtInCall\"],ENCODE_FOR_URI:[\"builtInCall\"],CONTAINS:[\"builtInCall\"],STRSTARTS:[\"builtInCall\"],STRENDS:[\"builtInCall\"],STRBEFORE:[\"builtInCall\"],STRAFTER:[\"builtInCall\"],YEAR:[\"builtInCall\"],MONTH:[\"builtInCall\"],DAY:[\"builtInCall\"],HOURS:[\"builtInCall\"],MINUTES:[\"builtInCall\"],SECONDS:[\"builtInCall\"],TIMEZONE:[\"builtInCall\"],TZ:[\"builtInCall\"],NOW:[\"builtInCall\"],UUID:[\"builtInCall\"],STRUUID:[\"builtInCall\"],MD5:[\"builtInCall\"],SHA1:[\"builtInCall\"],SHA256:[\"builtInCall\"],SHA384:[\"builtInCall\"],SHA512:[\"builtInCall\"],COALESCE:[\"builtInCall\"],IF:[\"builtInCall\"],STRLANG:[\"builtInCall\"],STRDT:[\"builtInCall\"],SAMETERM:[\"builtInCall\"],ISIRI:[\"builtInCall\"],ISURI:[\"builtInCall\"],ISBLANK:[\"builtInCall\"],ISLITERAL:[\"builtInCall\"],ISNUMERIC:[\"builtInCall\"],SUBSTR:[\"builtInCall\"],REPLACE:[\"builtInCall\"],REGEX:[\"builtInCall\"],EXISTS:[\"builtInCall\"],NOT:[\"builtInCall\"],IRI_REF:[\"functionCall\"],PNAME_LN:[\"functionCall\"],PNAME_NS:[\"functionCall\"]},constructQuery:{CONSTRUCT:[\"CONSTRUCT\",\"or([[constructTemplate,*datasetClause,whereClause,solutionModifier],[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]])\"]},constructTemplate:{\"{\":[\"{\",\"?constructTriples\",\"}\"]},constructTriples:{VAR1:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],VAR2:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],NIL:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],\"(\":[\"triplesSameSubject\",\"?[.,?constructTriples]\"],\"[\":[\"triplesSameSubject\",\"?[.,?constructTriples]\"],IRI_REF:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],TRUE:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],FALSE:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],BLANK_NODE_LABEL:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],ANON:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],PNAME_LN:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],PNAME_NS:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],STRING_LITERAL1:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],STRING_LITERAL2:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],STRING_LITERAL_LONG1:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],STRING_LITERAL_LONG2:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],INTEGER:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],DECIMAL:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],DOUBLE:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],INTEGER_POSITIVE:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],DECIMAL_POSITIVE:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],DOUBLE_POSITIVE:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],INTEGER_NEGATIVE:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],DECIMAL_NEGATIVE:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],DOUBLE_NEGATIVE:[\"triplesSameSubject\",\"?[.,?constructTriples]\"]},copy:{COPY:[\"COPY\",\"?SILENT_4\",\"graphOrDefault\",\"TO\",\"graphOrDefault\"]},create:{CREATE:[\"CREATE\",\"?SILENT_3\",\"graphRef\"]},dataBlock:{NIL:[\"or([inlineDataOneVar,inlineDataFull])\"],\"(\":[\"or([inlineDataOneVar,inlineDataFull])\"],VAR1:[\"or([inlineDataOneVar,inlineDataFull])\"],VAR2:[\"or([inlineDataOneVar,inlineDataFull])\"]},dataBlockValue:{IRI_REF:[\"iriRef\"],PNAME_LN:[\"iriRef\"],PNAME_NS:[\"iriRef\"],STRING_LITERAL1:[\"rdfLiteral\"],STRING_LITERAL2:[\"rdfLiteral\"],STRING_LITERAL_LONG1:[\"rdfLiteral\"],STRING_LITERAL_LONG2:[\"rdfLiteral\"],INTEGER:[\"numericLiteral\"],DECIMAL:[\"numericLiteral\"],DOUBLE:[\"numericLiteral\"],INTEGER_POSITIVE:[\"numericLiteral\"],DECIMAL_POSITIVE:[\"numericLiteral\"],DOUBLE_POSITIVE:[\"numericLiteral\"],INTEGER_NEGATIVE:[\"numericLiteral\"],DECIMAL_NEGATIVE:[\"numericLiteral\"],DOUBLE_NEGATIVE:[\"numericLiteral\"],TRUE:[\"booleanLiteral\"],FALSE:[\"booleanLiteral\"],UNDEF:[\"UNDEF\"]},datasetClause:{FROM:[\"FROM\",\"or([defaultGraphClause,namedGraphClause])\"]},defaultGraphClause:{IRI_REF:[\"sourceSelector\"],PNAME_LN:[\"sourceSelector\"],PNAME_NS:[\"sourceSelector\"]},delete1:{DATA:[\"DATA\",\"quadDataNoBnodes\"],WHERE:[\"WHERE\",\"quadPatternNoBnodes\"],\"{\":[\"quadPatternNoBnodes\",\"?insertClause\",\"*usingClause\",\"WHERE\",\"groupGraphPattern\"]},deleteClause:{DELETE:[\"DELETE\",\"quadPattern\"]},describeDatasetClause:{FROM:[\"FROM\",\"or([defaultGraphClause,namedGraphClause])\"]},describeQuery:{DESCRIBE:[\"DESCRIBE\",\"or([+varOrIRIref,*])\",\"*describeDatasetClause\",\"?whereClause\",\"solutionModifier\"]},disallowBnodes:{\"}\":[],GRAPH:[],VAR1:[],VAR2:[],NIL:[],\"(\":[],\"[\":[],IRI_REF:[],TRUE:[],FALSE:[],BLANK_NODE_LABEL:[],ANON:[],PNAME_LN:[],PNAME_NS:[],STRING_LITERAL1:[],STRING_LITERAL2:[],STRING_LITERAL_LONG1:[],STRING_LITERAL_LONG2:[],INTEGER:[],DECIMAL:[],DOUBLE:[],INTEGER_POSITIVE:[],DECIMAL_POSITIVE:[],DOUBLE_POSITIVE:[],INTEGER_NEGATIVE:[],DECIMAL_NEGATIVE:[],DOUBLE_NEGATIVE:[]},disallowVars:{\"}\":[],GRAPH:[],VAR1:[],VAR2:[],NIL:[],\"(\":[],\"[\":[],IRI_REF:[],TRUE:[],FALSE:[],BLANK_NODE_LABEL:[],ANON:[],PNAME_LN:[],PNAME_NS:[],STRING_LITERAL1:[],STRING_LITERAL2:[],STRING_LITERAL_LONG1:[],STRING_LITERAL_LONG2:[],INTEGER:[],DECIMAL:[],DOUBLE:[],INTEGER_POSITIVE:[],DECIMAL_POSITIVE:[],DOUBLE_POSITIVE:[],INTEGER_NEGATIVE:[],DECIMAL_NEGATIVE:[],DOUBLE_NEGATIVE:[]},drop:{DROP:[\"DROP\",\"?SILENT_2\",\"graphRefAll\"]},existsFunc:{EXISTS:[\"EXISTS\",\"groupGraphPattern\"]},expression:{\"!\":[\"conditionalOrExpression\"],\"+\":[\"conditionalOrExpression\"],\"-\":[\"conditionalOrExpression\"],VAR1:[\"conditionalOrExpression\"],VAR2:[\"conditionalOrExpression\"],\"(\":[\"conditionalOrExpression\"],STR:[\"conditionalOrExpression\"],LANG:[\"conditionalOrExpression\"],LANGMATCHES:[\"conditionalOrExpression\"],DATATYPE:[\"conditionalOrExpression\"],BOUND:[\"conditionalOrExpression\"],IRI:[\"conditionalOrExpression\"],URI:[\"conditionalOrExpression\"],BNODE:[\"conditionalOrExpression\"],RAND:[\"conditionalOrExpression\"],ABS:[\"conditionalOrExpression\"],CEIL:[\"conditionalOrExpression\"],FLOOR:[\"conditionalOrExpression\"],ROUND:[\"conditionalOrExpression\"],CONCAT:[\"conditionalOrExpression\"],STRLEN:[\"conditionalOrExpression\"],UCASE:[\"conditionalOrExpression\"],LCASE:[\"conditionalOrExpression\"],ENCODE_FOR_URI:[\"conditionalOrExpression\"],CONTAINS:[\"conditionalOrExpression\"],STRSTARTS:[\"conditionalOrExpression\"],STRENDS:[\"conditionalOrExpression\"],STRBEFORE:[\"conditionalOrExpression\"],STRAFTER:[\"conditionalOrExpression\"],YEAR:[\"conditionalOrExpression\"],MONTH:[\"conditionalOrExpression\"],DAY:[\"conditionalOrExpression\"],HOURS:[\"conditionalOrExpression\"],MINUTES:[\"conditionalOrExpression\"],SECONDS:[\"conditionalOrExpression\"],TIMEZONE:[\"conditionalOrExpression\"],TZ:[\"conditionalOrExpression\"],NOW:[\"conditionalOrExpression\"],UUID:[\"conditionalOrExpression\"],STRUUID:[\"conditionalOrExpression\"],MD5:[\"conditionalOrExpression\"],SHA1:[\"conditionalOrExpression\"],SHA256:[\"conditionalOrExpression\"],SHA384:[\"conditionalOrExpression\"],SHA512:[\"conditionalOrExpression\"],COALESCE:[\"conditionalOrExpression\"],IF:[\"conditionalOrExpression\"],STRLANG:[\"conditionalOrExpression\"],STRDT:[\"conditionalOrExpression\"],SAMETERM:[\"conditionalOrExpression\"],ISIRI:[\"conditionalOrExpression\"],ISURI:[\"conditionalOrExpression\"],ISBLANK:[\"conditionalOrExpression\"],ISLITERAL:[\"conditionalOrExpression\"],ISNUMERIC:[\"conditionalOrExpression\"],TRUE:[\"conditionalOrExpression\"],FALSE:[\"conditionalOrExpression\"],COUNT:[\"conditionalOrExpression\"],SUM:[\"conditionalOrExpression\"],MIN:[\"conditionalOrExpression\"],MAX:[\"conditionalOrExpression\"],AVG:[\"conditionalOrExpression\"],SAMPLE:[\"conditionalOrExpression\"],GROUP_CONCAT:[\"conditionalOrExpression\"],SUBSTR:[\"conditionalOrExpression\"],REPLACE:[\"conditionalOrExpression\"],REGEX:[\"conditionalOrExpression\"],EXISTS:[\"conditionalOrExpression\"],NOT:[\"conditionalOrExpression\"],IRI_REF:[\"conditionalOrExpression\"],STRING_LITERAL1:[\"conditionalOrExpression\"],STRING_LITERAL2:[\"conditionalOrExpression\"],STRING_LITERAL_LONG1:[\"conditionalOrExpression\"],STRING_LITERAL_LONG2:[\"conditionalOrExpression\"],INTEGER:[\"conditionalOrExpression\"],DECIMAL:[\"conditionalOrExpression\"],DOUBLE:[\"conditionalOrExpression\"],INTEGER_POSITIVE:[\"conditionalOrExpression\"],DECIMAL_POSITIVE:[\"conditionalOrExpression\"],DOUBLE_POSITIVE:[\"conditionalOrExpression\"],INTEGER_NEGATIVE:[\"conditionalOrExpression\"],DECIMAL_NEGATIVE:[\"conditionalOrExpression\"],DOUBLE_NEGATIVE:[\"conditionalOrExpression\"],PNAME_LN:[\"conditionalOrExpression\"],PNAME_NS:[\"conditionalOrExpression\"]},expressionList:{NIL:[\"NIL\"],\"(\":[\"(\",\"expression\",\"*[,,expression]\",\")\"]},filter:{FILTER:[\"FILTER\",\"constraint\"]},functionCall:{IRI_REF:[\"iriRef\",\"argList\"],PNAME_LN:[\"iriRef\",\"argList\"],PNAME_NS:[\"iriRef\",\"argList\"]},graphGraphPattern:{GRAPH:[\"GRAPH\",\"varOrIRIref\",\"groupGraphPattern\"]},graphNode:{VAR1:[\"varOrTerm\"],VAR2:[\"varOrTerm\"],NIL:[\"varOrTerm\"],IRI_REF:[\"varOrTerm\"],TRUE:[\"varOrTerm\"],FALSE:[\"varOrTerm\"],BLANK_NODE_LABEL:[\"varOrTerm\"],ANON:[\"varOrTerm\"],PNAME_LN:[\"varOrTerm\"],PNAME_NS:[\"varOrTerm\"],STRING_LITERAL1:[\"varOrTerm\"],STRING_LITERAL2:[\"varOrTerm\"],STRING_LITERAL_LONG1:[\"varOrTerm\"],STRING_LITERAL_LONG2:[\"varOrTerm\"],INTEGER:[\"varOrTerm\"],DECIMAL:[\"varOrTerm\"],DOUBLE:[\"varOrTerm\"],INTEGER_POSITIVE:[\"varOrTerm\"],DECIMAL_POSITIVE:[\"varOrTerm\"],DOUBLE_POSITIVE:[\"varOrTerm\"],INTEGER_NEGATIVE:[\"varOrTerm\"],DECIMAL_NEGATIVE:[\"varOrTerm\"],DOUBLE_NEGATIVE:[\"varOrTerm\"],\"(\":[\"triplesNode\"],\"[\":[\"triplesNode\"]},graphNodePath:{VAR1:[\"varOrTerm\"],VAR2:[\"varOrTerm\"],NIL:[\"varOrTerm\"],IRI_REF:[\"varOrTerm\"],TRUE:[\"varOrTerm\"],FALSE:[\"varOrTerm\"],BLANK_NODE_LABEL:[\"varOrTerm\"],ANON:[\"varOrTerm\"],PNAME_LN:[\"varOrTerm\"],PNAME_NS:[\"varOrTerm\"],STRING_LITERAL1:[\"varOrTerm\"],STRING_LITERAL2:[\"varOrTerm\"],STRING_LITERAL_LONG1:[\"varOrTerm\"],STRING_LITERAL_LONG2:[\"varOrTerm\"],INTEGER:[\"varOrTerm\"],DECIMAL:[\"varOrTerm\"],DOUBLE:[\"varOrTerm\"],INTEGER_POSITIVE:[\"varOrTerm\"],DECIMAL_POSITIVE:[\"varOrTerm\"],DOUBLE_POSITIVE:[\"varOrTerm\"],INTEGER_NEGATIVE:[\"varOrTerm\"],DECIMAL_NEGATIVE:[\"varOrTerm\"],DOUBLE_NEGATIVE:[\"varOrTerm\"],\"(\":[\"triplesNodePath\"],\"[\":[\"triplesNodePath\"]},graphOrDefault:{DEFAULT:[\"DEFAULT\"],IRI_REF:[\"?GRAPH\",\"iriRef\"],PNAME_LN:[\"?GRAPH\",\"iriRef\"],PNAME_NS:[\"?GRAPH\",\"iriRef\"],GRAPH:[\"?GRAPH\",\"iriRef\"]},graphPatternNotTriples:{\"{\":[\"groupOrUnionGraphPattern\"],OPTIONAL:[\"optionalGraphPattern\"],MINUS:[\"minusGraphPattern\"],GRAPH:[\"graphGraphPattern\"],SERVICE:[\"serviceGraphPattern\"],FILTER:[\"filter\"],BIND:[\"bind\"],VALUES:[\"inlineData\"]},graphRef:{GRAPH:[\"GRAPH\",\"iriRef\"]},graphRefAll:{GRAPH:[\"graphRef\"],DEFAULT:[\"DEFAULT\"],NAMED:[\"NAMED\"],ALL:[\"ALL\"]},graphTerm:{IRI_REF:[\"iriRef\"],PNAME_LN:[\"iriRef\"],PNAME_NS:[\"iriRef\"],STRING_LITERAL1:[\"rdfLiteral\"],STRING_LITERAL2:[\"rdfLiteral\"],STRING_LITERAL_LONG1:[\"rdfLiteral\"],STRING_LITERAL_LONG2:[\"rdfLiteral\"],INTEGER:[\"numericLiteral\"],DECIMAL:[\"numericLiteral\"],DOUBLE:[\"numericLiteral\"],INTEGER_POSITIVE:[\"numericLiteral\"],DECIMAL_POSITIVE:[\"numericLiteral\"],DOUBLE_POSITIVE:[\"numericLiteral\"],INTEGER_NEGATIVE:[\"numericLiteral\"],DECIMAL_NEGATIVE:[\"numericLiteral\"],DOUBLE_NEGATIVE:[\"numericLiteral\"],TRUE:[\"booleanLiteral\"],FALSE:[\"booleanLiteral\"],BLANK_NODE_LABEL:[\"blankNode\"],ANON:[\"blankNode\"],NIL:[\"NIL\"]},groupClause:{GROUP:[\"GROUP\",\"BY\",\"+groupCondition\"]},groupCondition:{STR:[\"builtInCall\"],LANG:[\"builtInCall\"],LANGMATCHES:[\"builtInCall\"],DATATYPE:[\"builtInCall\"],BOUND:[\"builtInCall\"],IRI:[\"builtInCall\"],URI:[\"builtInCall\"],BNODE:[\"builtInCall\"],RAND:[\"builtInCall\"],ABS:[\"builtInCall\"],CEIL:[\"builtInCall\"],FLOOR:[\"builtInCall\"],ROUND:[\"builtInCall\"],CONCAT:[\"builtInCall\"],STRLEN:[\"builtInCall\"],UCASE:[\"builtInCall\"],LCASE:[\"builtInCall\"],ENCODE_FOR_URI:[\"builtInCall\"],CONTAINS:[\"builtInCall\"],STRSTARTS:[\"builtInCall\"],STRENDS:[\"builtInCall\"],STRBEFORE:[\"builtInCall\"],STRAFTER:[\"builtInCall\"],YEAR:[\"builtInCall\"],MONTH:[\"builtInCall\"],\nDAY:[\"builtInCall\"],HOURS:[\"builtInCall\"],MINUTES:[\"builtInCall\"],SECONDS:[\"builtInCall\"],TIMEZONE:[\"builtInCall\"],TZ:[\"builtInCall\"],NOW:[\"builtInCall\"],UUID:[\"builtInCall\"],STRUUID:[\"builtInCall\"],MD5:[\"builtInCall\"],SHA1:[\"builtInCall\"],SHA256:[\"builtInCall\"],SHA384:[\"builtInCall\"],SHA512:[\"builtInCall\"],COALESCE:[\"builtInCall\"],IF:[\"builtInCall\"],STRLANG:[\"builtInCall\"],STRDT:[\"builtInCall\"],SAMETERM:[\"builtInCall\"],ISIRI:[\"builtInCall\"],ISURI:[\"builtInCall\"],ISBLANK:[\"builtInCall\"],ISLITERAL:[\"builtInCall\"],ISNUMERIC:[\"builtInCall\"],SUBSTR:[\"builtInCall\"],REPLACE:[\"builtInCall\"],REGEX:[\"builtInCall\"],EXISTS:[\"builtInCall\"],NOT:[\"builtInCall\"],IRI_REF:[\"functionCall\"],PNAME_LN:[\"functionCall\"],PNAME_NS:[\"functionCall\"],\"(\":[\"(\",\"expression\",\"?[AS,var]\",\")\"],VAR1:[\"var\"],VAR2:[\"var\"]},groupGraphPattern:{\"{\":[\"{\",\"or([subSelect,groupGraphPatternSub])\",\"}\"]},groupGraphPatternSub:{\"{\":[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],OPTIONAL:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],MINUS:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],GRAPH:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],SERVICE:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],FILTER:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],BIND:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],VALUES:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],VAR1:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],VAR2:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],NIL:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],\"(\":[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],\"[\":[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],IRI_REF:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],TRUE:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],FALSE:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],BLANK_NODE_LABEL:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],ANON:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],PNAME_LN:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],PNAME_NS:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],STRING_LITERAL1:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],STRING_LITERAL2:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],STRING_LITERAL_LONG1:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],STRING_LITERAL_LONG2:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],INTEGER:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],DECIMAL:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],DOUBLE:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],INTEGER_POSITIVE:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],DECIMAL_POSITIVE:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],DOUBLE_POSITIVE:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],INTEGER_NEGATIVE:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],DECIMAL_NEGATIVE:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],DOUBLE_NEGATIVE:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],\"}\":[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"]},groupOrUnionGraphPattern:{\"{\":[\"groupGraphPattern\",\"*[UNION,groupGraphPattern]\"]},havingClause:{HAVING:[\"HAVING\",\"+havingCondition\"]},havingCondition:{\"(\":[\"constraint\"],STR:[\"constraint\"],LANG:[\"constraint\"],LANGMATCHES:[\"constraint\"],DATATYPE:[\"constraint\"],BOUND:[\"constraint\"],IRI:[\"constraint\"],URI:[\"constraint\"],BNODE:[\"constraint\"],RAND:[\"constraint\"],ABS:[\"constraint\"],CEIL:[\"constraint\"],FLOOR:[\"constraint\"],ROUND:[\"constraint\"],CONCAT:[\"constraint\"],STRLEN:[\"constraint\"],UCASE:[\"constraint\"],LCASE:[\"constraint\"],ENCODE_FOR_URI:[\"constraint\"],CONTAINS:[\"constraint\"],STRSTARTS:[\"constraint\"],STRENDS:[\"constraint\"],STRBEFORE:[\"constraint\"],STRAFTER:[\"constraint\"],YEAR:[\"constraint\"],MONTH:[\"constraint\"],DAY:[\"constraint\"],HOURS:[\"constraint\"],MINUTES:[\"constraint\"],SECONDS:[\"constraint\"],TIMEZONE:[\"constraint\"],TZ:[\"constraint\"],NOW:[\"constraint\"],UUID:[\"constraint\"],STRUUID:[\"constraint\"],MD5:[\"constraint\"],SHA1:[\"constraint\"],SHA256:[\"constraint\"],SHA384:[\"constraint\"],SHA512:[\"constraint\"],COALESCE:[\"constraint\"],IF:[\"constraint\"],STRLANG:[\"constraint\"],STRDT:[\"constraint\"],SAMETERM:[\"constraint\"],ISIRI:[\"constraint\"],ISURI:[\"constraint\"],ISBLANK:[\"constraint\"],ISLITERAL:[\"constraint\"],ISNUMERIC:[\"constraint\"],SUBSTR:[\"constraint\"],REPLACE:[\"constraint\"],REGEX:[\"constraint\"],EXISTS:[\"constraint\"],NOT:[\"constraint\"],IRI_REF:[\"constraint\"],PNAME_LN:[\"constraint\"],PNAME_NS:[\"constraint\"]},inlineData:{VALUES:[\"VALUES\",\"dataBlock\"]},inlineDataFull:{NIL:[\"or([NIL,[ (,*var,)]])\",\"{\",\"*or([[ (,*dataBlockValue,)],NIL])\",\"}\"],\"(\":[\"or([NIL,[ (,*var,)]])\",\"{\",\"*or([[ (,*dataBlockValue,)],NIL])\",\"}\"]},inlineDataOneVar:{VAR1:[\"var\",\"{\",\"*dataBlockValue\",\"}\"],VAR2:[\"var\",\"{\",\"*dataBlockValue\",\"}\"]},insert1:{DATA:[\"DATA\",\"quadData\"],\"{\":[\"quadPattern\",\"*usingClause\",\"WHERE\",\"groupGraphPattern\"]},insertClause:{INSERT:[\"INSERT\",\"quadPattern\"]},integer:{INTEGER:[\"INTEGER\"]},iriRef:{IRI_REF:[\"IRI_REF\"],PNAME_LN:[\"prefixedName\"],PNAME_NS:[\"prefixedName\"]},iriRefOrFunction:{IRI_REF:[\"iriRef\",\"?argList\"],PNAME_LN:[\"iriRef\",\"?argList\"],PNAME_NS:[\"iriRef\",\"?argList\"]},limitClause:{LIMIT:[\"LIMIT\",\"INTEGER\"]},limitOffsetClauses:{LIMIT:[\"limitClause\",\"?offsetClause\"],OFFSET:[\"offsetClause\",\"?limitClause\"]},load:{LOAD:[\"LOAD\",\"?SILENT_1\",\"iriRef\",\"?[INTO,graphRef]\"]},minusGraphPattern:{MINUS:[\"MINUS\",\"groupGraphPattern\"]},modify:{WITH:[\"WITH\",\"iriRef\",\"or([[deleteClause,?insertClause],insertClause])\",\"*usingClause\",\"WHERE\",\"groupGraphPattern\"]},move:{MOVE:[\"MOVE\",\"?SILENT_4\",\"graphOrDefault\",\"TO\",\"graphOrDefault\"]},multiplicativeExpression:{\"!\":[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],\"+\":[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],\"-\":[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],VAR1:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],VAR2:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],\"(\":[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],STR:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],LANG:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],LANGMATCHES:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],DATATYPE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],BOUND:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],IRI:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],URI:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],BNODE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],RAND:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],ABS:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],CEIL:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],FLOOR:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],ROUND:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],CONCAT:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],STRLEN:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],UCASE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],LCASE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],ENCODE_FOR_URI:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],CONTAINS:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],STRSTARTS:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],STRENDS:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],STRBEFORE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],STRAFTER:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],YEAR:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],MONTH:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],DAY:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],HOURS:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],MINUTES:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],SECONDS:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],TIMEZONE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],TZ:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],NOW:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],UUID:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],STRUUID:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],MD5:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],SHA1:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],SHA256:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],SHA384:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],SHA512:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],COALESCE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],IF:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],STRLANG:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],STRDT:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],SAMETERM:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],ISIRI:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],ISURI:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],ISBLANK:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],ISLITERAL:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],ISNUMERIC:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],TRUE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],FALSE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],COUNT:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],SUM:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],MIN:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],MAX:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],AVG:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],SAMPLE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],GROUP_CONCAT:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],SUBSTR:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],REPLACE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],REGEX:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],EXISTS:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],NOT:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],IRI_REF:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],STRING_LITERAL1:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],STRING_LITERAL2:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],STRING_LITERAL_LONG1:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],STRING_LITERAL_LONG2:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],INTEGER:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],DECIMAL:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],DOUBLE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],INTEGER_POSITIVE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],DECIMAL_POSITIVE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],DOUBLE_POSITIVE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],INTEGER_NEGATIVE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],DECIMAL_NEGATIVE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],DOUBLE_NEGATIVE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],PNAME_LN:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],PNAME_NS:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"]},namedGraphClause:{NAMED:[\"NAMED\",\"sourceSelector\"]},notExistsFunc:{NOT:[\"NOT\",\"EXISTS\",\"groupGraphPattern\"]},numericExpression:{\"!\":[\"additiveExpression\"],\"+\":[\"additiveExpression\"],\"-\":[\"additiveExpression\"],VAR1:[\"additiveExpression\"],VAR2:[\"additiveExpression\"],\"(\":[\"additiveExpression\"],STR:[\"additiveExpression\"],LANG:[\"additiveExpression\"],LANGMATCHES:[\"additiveExpression\"],DATATYPE:[\"additiveExpression\"],BOUND:[\"additiveExpression\"],IRI:[\"additiveExpression\"],URI:[\"additiveExpression\"],BNODE:[\"additiveExpression\"],RAND:[\"additiveExpression\"],ABS:[\"additiveExpression\"],CEIL:[\"additiveExpression\"],FLOOR:[\"additiveExpression\"],ROUND:[\"additiveExpression\"],CONCAT:[\"additiveExpression\"],STRLEN:[\"additiveExpression\"],UCASE:[\"additiveExpression\"],LCASE:[\"additiveExpression\"],ENCODE_FOR_URI:[\"additiveExpression\"],CONTAINS:[\"additiveExpression\"],STRSTARTS:[\"additiveExpression\"],STRENDS:[\"additiveExpression\"],STRBEFORE:[\"additiveExpression\"],STRAFTER:[\"additiveExpression\"],YEAR:[\"additiveExpression\"],MONTH:[\"additiveExpression\"],DAY:[\"additiveExpression\"],HOURS:[\"additiveExpression\"],MINUTES:[\"additiveExpression\"],SECONDS:[\"additiveExpression\"],TIMEZONE:[\"additiveExpression\"],TZ:[\"additiveExpression\"],NOW:[\"additiveExpression\"],UUID:[\"additiveExpression\"],STRUUID:[\"additiveExpression\"],MD5:[\"additiveExpression\"],SHA1:[\"additiveExpression\"],SHA256:[\"additiveExpression\"],SHA384:[\"additiveExpression\"],SHA512:[\"additiveExpression\"],COALESCE:[\"additiveExpression\"],IF:[\"additiveExpression\"],STRLANG:[\"additiveExpression\"],STRDT:[\"additiveExpression\"],SAMETERM:[\"additiveExpression\"],ISIRI:[\"additiveExpression\"],ISURI:[\"additiveExpression\"],ISBLANK:[\"additiveExpression\"],ISLITERAL:[\"additiveExpression\"],ISNUMERIC:[\"additiveExpression\"],TRUE:[\"additiveExpression\"],FALSE:[\"additiveExpression\"],COUNT:[\"additiveExpression\"],SUM:[\"additiveExpression\"],MIN:[\"additiveExpression\"],MAX:[\"additiveExpression\"],AVG:[\"additiveExpression\"],SAMPLE:[\"additiveExpression\"],GROUP_CONCAT:[\"additiveExpression\"],SUBSTR:[\"additiveExpression\"],REPLACE:[\"additiveExpression\"],REGEX:[\"additiveExpression\"],EXISTS:[\"additiveExpression\"],NOT:[\"additiveExpression\"],IRI_REF:[\"additiveExpression\"],STRING_LITERAL1:[\"additiveExpression\"],STRING_LITERAL2:[\"additiveExpression\"],STRING_LITERAL_LONG1:[\"additiveExpression\"],STRING_LITERAL_LONG2:[\"additiveExpression\"],INTEGER:[\"additiveExpression\"],DECIMAL:[\"additiveExpression\"],DOUBLE:[\"additiveExpression\"],INTEGER_POSITIVE:[\"additiveExpression\"],DECIMAL_POSITIVE:[\"additiveExpression\"],DOUBLE_POSITIVE:[\"additiveExpression\"],INTEGER_NEGATIVE:[\"additiveExpression\"],DECIMAL_NEGATIVE:[\"additiveExpression\"],DOUBLE_NEGATIVE:[\"additiveExpression\"],PNAME_LN:[\"additiveExpression\"],PNAME_NS:[\"additiveExpression\"]},numericLiteral:{INTEGER:[\"numericLiteralUnsigned\"],DECIMAL:[\"numericLiteralUnsigned\"],DOUBLE:[\"numericLiteralUnsigned\"],INTEGER_POSITIVE:[\"numericLiteralPositive\"],DECIMAL_POSITIVE:[\"numericLiteralPositive\"],DOUBLE_POSITIVE:[\"numericLiteralPositive\"],INTEGER_NEGATIVE:[\"numericLiteralNegative\"],DECIMAL_NEGATIVE:[\"numericLiteralNegative\"],DOUBLE_NEGATIVE:[\"numericLiteralNegative\"]},numericLiteralNegative:{INTEGER_NEGATIVE:[\"INTEGER_NEGATIVE\"],DECIMAL_NEGATIVE:[\"DECIMAL_NEGATIVE\"],DOUBLE_NEGATIVE:[\"DOUBLE_NEGATIVE\"]},numericLiteralPositive:{INTEGER_POSITIVE:[\"INTEGER_POSITIVE\"],DECIMAL_POSITIVE:[\"DECIMAL_POSITIVE\"],DOUBLE_POSITIVE:[\"DOUBLE_POSITIVE\"]},numericLiteralUnsigned:{INTEGER:[\"INTEGER\"],DECIMAL:[\"DECIMAL\"],DOUBLE:[\"DOUBLE\"]},object:{\"(\":[\"graphNode\"],\"[\":[\"graphNode\"],VAR1:[\"graphNode\"],VAR2:[\"graphNode\"],NIL:[\"graphNode\"],IRI_REF:[\"graphNode\"],TRUE:[\"graphNode\"],FALSE:[\"graphNode\"],BLANK_NODE_LABEL:[\"graphNode\"],ANON:[\"graphNode\"],PNAME_LN:[\"graphNode\"],PNAME_NS:[\"graphNode\"],STRING_LITERAL1:[\"graphNode\"],STRING_LITERAL2:[\"graphNode\"],STRING_LITERAL_LONG1:[\"graphNode\"],STRING_LITERAL_LONG2:[\"graphNode\"],INTEGER:[\"graphNode\"],DECIMAL:[\"graphNode\"],DOUBLE:[\"graphNode\"],INTEGER_POSITIVE:[\"graphNode\"],DECIMAL_POSITIVE:[\"graphNode\"],DOUBLE_POSITIVE:[\"graphNode\"],INTEGER_NEGATIVE:[\"graphNode\"],DECIMAL_NEGATIVE:[\"graphNode\"],DOUBLE_NEGATIVE:[\"graphNode\"]},objectList:{\"(\":[\"object\",\"*[,,object]\"],\"[\":[\"object\",\"*[,,object]\"],VAR1:[\"object\",\"*[,,object]\"],VAR2:[\"object\",\"*[,,object]\"],NIL:[\"object\",\"*[,,object]\"],IRI_REF:[\"object\",\"*[,,object]\"],TRUE:[\"object\",\"*[,,object]\"],FALSE:[\"object\",\"*[,,object]\"],BLANK_NODE_LABEL:[\"object\",\"*[,,object]\"],ANON:[\"object\",\"*[,,object]\"],PNAME_LN:[\"object\",\"*[,,object]\"],PNAME_NS:[\"object\",\"*[,,object]\"],STRING_LITERAL1:[\"object\",\"*[,,object]\"],STRING_LITERAL2:[\"object\",\"*[,,object]\"],STRING_LITERAL_LONG1:[\"object\",\"*[,,object]\"],STRING_LITERAL_LONG2:[\"object\",\"*[,,object]\"],INTEGER:[\"object\",\"*[,,object]\"],DECIMAL:[\"object\",\"*[,,object]\"],DOUBLE:[\"object\",\"*[,,object]\"],INTEGER_POSITIVE:[\"object\",\"*[,,object]\"],DECIMAL_POSITIVE:[\"object\",\"*[,,object]\"],DOUBLE_POSITIVE:[\"object\",\"*[,,object]\"],INTEGER_NEGATIVE:[\"object\",\"*[,,object]\"],DECIMAL_NEGATIVE:[\"object\",\"*[,,object]\"],DOUBLE_NEGATIVE:[\"object\",\"*[,,object]\"]},objectListPath:{\"(\":[\"objectPath\",\"*[,,objectPath]\"],\"[\":[\"objectPath\",\"*[,,objectPath]\"],VAR1:[\"objectPath\",\"*[,,objectPath]\"],VAR2:[\"objectPath\",\"*[,,objectPath]\"],NIL:[\"objectPath\",\"*[,,objectPath]\"],IRI_REF:[\"objectPath\",\"*[,,objectPath]\"],TRUE:[\"objectPath\",\"*[,,objectPath]\"],FALSE:[\"objectPath\",\"*[,,objectPath]\"],BLANK_NODE_LABEL:[\"objectPath\",\"*[,,objectPath]\"],ANON:[\"objectPath\",\"*[,,objectPath]\"],PNAME_LN:[\"objectPath\",\"*[,,objectPath]\"],PNAME_NS:[\"objectPath\",\"*[,,objectPath]\"],STRING_LITERAL1:[\"objectPath\",\"*[,,objectPath]\"],STRING_LITERAL2:[\"objectPath\",\"*[,,objectPath]\"],STRING_LITERAL_LONG1:[\"objectPath\",\"*[,,objectPath]\"],STRING_LITERAL_LONG2:[\"objectPath\",\"*[,,objectPath]\"],INTEGER:[\"objectPath\",\"*[,,objectPath]\"],DECIMAL:[\"objectPath\",\"*[,,objectPath]\"],DOUBLE:[\"objectPath\",\"*[,,objectPath]\"],INTEGER_POSITIVE:[\"objectPath\",\"*[,,objectPath]\"],DECIMAL_POSITIVE:[\"objectPath\",\"*[,,objectPath]\"],DOUBLE_POSITIVE:[\"objectPath\",\"*[,,objectPath]\"],INTEGER_NEGATIVE:[\"objectPath\",\"*[,,objectPath]\"],DECIMAL_NEGATIVE:[\"objectPath\",\"*[,,objectPath]\"],DOUBLE_NEGATIVE:[\"objectPath\",\"*[,,objectPath]\"]},objectPath:{\"(\":[\"graphNodePath\"],\"[\":[\"graphNodePath\"],VAR1:[\"graphNodePath\"],VAR2:[\"graphNodePath\"],NIL:[\"graphNodePath\"],IRI_REF:[\"graphNodePath\"],TRUE:[\"graphNodePath\"],FALSE:[\"graphNodePath\"],BLANK_NODE_LABEL:[\"graphNodePath\"],ANON:[\"graphNodePath\"],PNAME_LN:[\"graphNodePath\"],PNAME_NS:[\"graphNodePath\"],STRING_LITERAL1:[\"graphNodePath\"],STRING_LITERAL2:[\"graphNodePath\"],STRING_LITERAL_LONG1:[\"graphNodePath\"],STRING_LITERAL_LONG2:[\"graphNodePath\"],INTEGER:[\"graphNodePath\"],DECIMAL:[\"graphNodePath\"],DOUBLE:[\"graphNodePath\"],INTEGER_POSITIVE:[\"graphNodePath\"],DECIMAL_POSITIVE:[\"graphNodePath\"],DOUBLE_POSITIVE:[\"graphNodePath\"],INTEGER_NEGATIVE:[\"graphNodePath\"],DECIMAL_NEGATIVE:[\"graphNodePath\"],DOUBLE_NEGATIVE:[\"graphNodePath\"]},offsetClause:{OFFSET:[\"OFFSET\",\"INTEGER\"]},optionalGraphPattern:{OPTIONAL:[\"OPTIONAL\",\"groupGraphPattern\"]},\"or([*,expression])\":{\"*\":[\"*\"],\"!\":[\"expression\"],\"+\":[\"expression\"],\"-\":[\"expression\"],VAR1:[\"expression\"],VAR2:[\"expression\"],\"(\":[\"expression\"],STR:[\"expression\"],LANG:[\"expression\"],LANGMATCHES:[\"expression\"],DATATYPE:[\"expression\"],BOUND:[\"expression\"],IRI:[\"expression\"],URI:[\"expression\"],BNODE:[\"expression\"],RAND:[\"expression\"],ABS:[\"expression\"],CEIL:[\"expression\"],FLOOR:[\"expression\"],ROUND:[\"expression\"],CONCAT:[\"expression\"],STRLEN:[\"expression\"],UCASE:[\"expression\"],LCASE:[\"expression\"],ENCODE_FOR_URI:[\"expression\"],CONTAINS:[\"expression\"],STRSTARTS:[\"expression\"],STRENDS:[\"expression\"],STRBEFORE:[\"expression\"],STRAFTER:[\"expression\"],YEAR:[\"expression\"],MONTH:[\"expression\"],DAY:[\"expression\"],HOURS:[\"expression\"],MINUTES:[\"expression\"],SECONDS:[\"expression\"],TIMEZONE:[\"expression\"],TZ:[\"expression\"],NOW:[\"expression\"],UUID:[\"expression\"],STRUUID:[\"expression\"],MD5:[\"expression\"],SHA1:[\"expression\"],SHA256:[\"expression\"],SHA384:[\"expression\"],SHA512:[\"expression\"],COALESCE:[\"expression\"],IF:[\"expression\"],STRLANG:[\"expression\"],STRDT:[\"expression\"],SAMETERM:[\"expression\"],ISIRI:[\"expression\"],ISURI:[\"expression\"],ISBLANK:[\"expression\"],ISLITERAL:[\"expression\"],ISNUMERIC:[\"expression\"],TRUE:[\"expression\"],FALSE:[\"expression\"],COUNT:[\"expression\"],SUM:[\"expression\"],MIN:[\"expression\"],MAX:[\"expression\"],AVG:[\"expression\"],SAMPLE:[\"expression\"],GROUP_CONCAT:[\"expression\"],SUBSTR:[\"expression\"],REPLACE:[\"expression\"],REGEX:[\"expression\"],EXISTS:[\"expression\"],NOT:[\"expression\"],IRI_REF:[\"expression\"],STRING_LITERAL1:[\"expression\"],STRING_LITERAL2:[\"expression\"],STRING_LITERAL_LONG1:[\"expression\"],STRING_LITERAL_LONG2:[\"expression\"],INTEGER:[\"expression\"],DECIMAL:[\"expression\"],DOUBLE:[\"expression\"],INTEGER_POSITIVE:[\"expression\"],DECIMAL_POSITIVE:[\"expression\"],DOUBLE_POSITIVE:[\"expression\"],INTEGER_NEGATIVE:[\"expression\"],DECIMAL_NEGATIVE:[\"expression\"],DOUBLE_NEGATIVE:[\"expression\"],PNAME_LN:[\"expression\"],PNAME_NS:[\"expression\"]},\"or([+or([var,[ (,expression,AS,var,)]]),*])\":{\"(\":[\"+or([var,[ (,expression,AS,var,)]])\"],VAR1:[\"+or([var,[ (,expression,AS,var,)]])\"],VAR2:[\"+or([var,[ (,expression,AS,var,)]])\"],\"*\":[\"*\"]},\"or([+varOrIRIref,*])\":{VAR1:[\"+varOrIRIref\"],VAR2:[\"+varOrIRIref\"],IRI_REF:[\"+varOrIRIref\"],PNAME_LN:[\"+varOrIRIref\"],PNAME_NS:[\"+varOrIRIref\"],\"*\":[\"*\"]},\"or([ASC,DESC])\":{ASC:[\"ASC\"],DESC:[\"DESC\"]},\"or([DISTINCT,REDUCED])\":{DISTINCT:[\"DISTINCT\"],REDUCED:[\"REDUCED\"]},\"or([LANGTAG,[^^,iriRef]])\":{LANGTAG:[\"LANGTAG\"],\"^^\":[\"[^^,iriRef]\"]},\"or([NIL,[ (,*var,)]])\":{NIL:[\"NIL\"],\"(\":[\"[ (,*var,)]\"]},\"or([[ (,*dataBlockValue,)],NIL])\":{\"(\":[\"[ (,*dataBlockValue,)]\"],NIL:[\"NIL\"]},\"or([[ (,expression,)],NIL])\":{\"(\":[\"[ (,expression,)]\"],NIL:[\"NIL\"]},\"or([[*,unaryExpression],[/,unaryExpression]])\":{\"*\":[\"[*,unaryExpression]\"],\"/\":[\"[/,unaryExpression]\"]},\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\":{\"+\":[\"[+,multiplicativeExpression]\"],\"-\":[\"[-,multiplicativeExpression]\"],INTEGER_POSITIVE:[\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"],DECIMAL_POSITIVE:[\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"],DOUBLE_POSITIVE:[\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"],INTEGER_NEGATIVE:[\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"],DECIMAL_NEGATIVE:[\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"],DOUBLE_NEGATIVE:[\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"]},\"or([[,,or([},[integer,}]])],}])\":{\",\":[\"[,,or([},[integer,}]])]\"],\"}\":[\"}\"]},\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\":{\"=\":[\"[=,numericExpression]\"],\"!=\":[\"[!=,numericExpression]\"],\"<\":[\"[<,numericExpression]\"],\">\":[\"[>,numericExpression]\"],\"<=\":[\"[<=,numericExpression]\"],\">=\":[\"[>=,numericExpression]\"],IN:[\"[IN,expressionList]\"],NOT:[\"[NOT,IN,expressionList]\"]},\"or([[constructTemplate,*datasetClause,whereClause,solutionModifier],[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]])\":{\"{\":[\"[constructTemplate,*datasetClause,whereClause,solutionModifier]\"],WHERE:[\"[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]\"],FROM:[\"[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]\"]},\"or([[deleteClause,?insertClause],insertClause])\":{DELETE:[\"[deleteClause,?insertClause]\"],INSERT:[\"insertClause\"]},\"or([[integer,or([[,,or([},[integer,}]])],}])],[,,integer,}]])\":{INTEGER:[\"[integer,or([[,,or([},[integer,}]])],}])]\"],\",\":[\"[,,integer,}]\"]},\"or([defaultGraphClause,namedGraphClause])\":{IRI_REF:[\"defaultGraphClause\"],PNAME_LN:[\"defaultGraphClause\"],PNAME_NS:[\"defaultGraphClause\"],NAMED:[\"namedGraphClause\"]},\"or([inlineDataOneVar,inlineDataFull])\":{VAR1:[\"inlineDataOneVar\"],VAR2:[\"inlineDataOneVar\"],NIL:[\"inlineDataFull\"],\"(\":[\"inlineDataFull\"]},\"or([iriRef,[NAMED,iriRef]])\":{IRI_REF:[\"iriRef\"],PNAME_LN:[\"iriRef\"],PNAME_NS:[\"iriRef\"],NAMED:[\"[NAMED,iriRef]\"]},\"or([iriRef,a])\":{IRI_REF:[\"iriRef\"],PNAME_LN:[\"iriRef\"],PNAME_NS:[\"iriRef\"],a:[\"a\"]},\"or([numericLiteralPositive,numericLiteralNegative])\":{INTEGER_POSITIVE:[\"numericLiteralPositive\"],DECIMAL_POSITIVE:[\"numericLiteralPositive\"],DOUBLE_POSITIVE:[\"numericLiteralPositive\"],INTEGER_NEGATIVE:[\"numericLiteralNegative\"],DECIMAL_NEGATIVE:[\"numericLiteralNegative\"],DOUBLE_NEGATIVE:[\"numericLiteralNegative\"]},\"or([queryAll,updateAll])\":{CONSTRUCT:[\"queryAll\"],DESCRIBE:[\"queryAll\"],ASK:[\"queryAll\"],SELECT:[\"queryAll\"],INSERT:[\"updateAll\"],DELETE:[\"updateAll\"],LOAD:[\"updateAll\"],CLEAR:[\"updateAll\"],DROP:[\"updateAll\"],ADD:[\"updateAll\"],MOVE:[\"updateAll\"],COPY:[\"updateAll\"],CREATE:[\"updateAll\"],WITH:[\"updateAll\"],$:[\"updateAll\"]},\"or([selectQuery,constructQuery,describeQuery,askQuery])\":{SELECT:[\"selectQuery\"],CONSTRUCT:[\"constructQuery\"],DESCRIBE:[\"describeQuery\"],ASK:[\"askQuery\"]},\"or([subSelect,groupGraphPatternSub])\":{SELECT:[\"subSelect\"],\"{\":[\"groupGraphPatternSub\"],OPTIONAL:[\"groupGraphPatternSub\"],MINUS:[\"groupGraphPatternSub\"],GRAPH:[\"groupGraphPatternSub\"],SERVICE:[\"groupGraphPatternSub\"],FILTER:[\"groupGraphPatternSub\"],BIND:[\"groupGraphPatternSub\"],VALUES:[\"groupGraphPatternSub\"],VAR1:[\"groupGraphPatternSub\"],VAR2:[\"groupGraphPatternSub\"],NIL:[\"groupGraphPatternSub\"],\"(\":[\"groupGraphPatternSub\"],\"[\":[\"groupGraphPatternSub\"],IRI_REF:[\"groupGraphPatternSub\"],TRUE:[\"groupGraphPatternSub\"],FALSE:[\"groupGraphPatternSub\"],BLANK_NODE_LABEL:[\"groupGraphPatternSub\"],ANON:[\"groupGraphPatternSub\"],PNAME_LN:[\"groupGraphPatternSub\"],PNAME_NS:[\"groupGraphPatternSub\"],STRING_LITERAL1:[\"groupGraphPatternSub\"],STRING_LITERAL2:[\"groupGraphPatternSub\"],STRING_LITERAL_LONG1:[\"groupGraphPatternSub\"],STRING_LITERAL_LONG2:[\"groupGraphPatternSub\"],INTEGER:[\"groupGraphPatternSub\"],DECIMAL:[\"groupGraphPatternSub\"],DOUBLE:[\"groupGraphPatternSub\"],INTEGER_POSITIVE:[\"groupGraphPatternSub\"],DECIMAL_POSITIVE:[\"groupGraphPatternSub\"],DOUBLE_POSITIVE:[\"groupGraphPatternSub\"],INTEGER_NEGATIVE:[\"groupGraphPatternSub\"],DECIMAL_NEGATIVE:[\"groupGraphPatternSub\"],DOUBLE_NEGATIVE:[\"groupGraphPatternSub\"],\"}\":[\"groupGraphPatternSub\"]},\"or([var,[ (,expression,AS,var,)]])\":{VAR1:[\"var\"],VAR2:[\"var\"],\"(\":[\"[ (,expression,AS,var,)]\"]},\"or([verbPath,verbSimple])\":{\"^\":[\"verbPath\"],a:[\"verbPath\"],\"!\":[\"verbPath\"],\"(\":[\"verbPath\"],IRI_REF:[\"verbPath\"],PNAME_LN:[\"verbPath\"],PNAME_NS:[\"verbPath\"],VAR1:[\"verbSimple\"],VAR2:[\"verbSimple\"]},\"or([},[integer,}]])\":{\"}\":[\"}\"],INTEGER:[\"[integer,}]\"]},orderClause:{ORDER:[\"ORDER\",\"BY\",\"+orderCondition\"]},orderCondition:{ASC:[\"or([ASC,DESC])\",\"brackettedExpression\"],DESC:[\"or([ASC,DESC])\",\"brackettedExpression\"],\"(\":[\"constraint\"],STR:[\"constraint\"],LANG:[\"constraint\"],LANGMATCHES:[\"constraint\"],DATATYPE:[\"constraint\"],BOUND:[\"constraint\"],IRI:[\"constraint\"],URI:[\"constraint\"],BNODE:[\"constraint\"],RAND:[\"constraint\"],ABS:[\"constraint\"],CEIL:[\"constraint\"],FLOOR:[\"constraint\"],ROUND:[\"constraint\"],CONCAT:[\"constraint\"],STRLEN:[\"constraint\"],UCASE:[\"constraint\"],LCASE:[\"constraint\"],ENCODE_FOR_URI:[\"constraint\"],CONTAINS:[\"constraint\"],STRSTARTS:[\"constraint\"],STRENDS:[\"constraint\"],STRBEFORE:[\"constraint\"],STRAFTER:[\"constraint\"],YEAR:[\"constraint\"],MONTH:[\"constraint\"],DAY:[\"constraint\"],HOURS:[\"constraint\"],MINUTES:[\"constraint\"],SECONDS:[\"constraint\"],TIMEZONE:[\"constraint\"],TZ:[\"constraint\"],NOW:[\"constraint\"],UUID:[\"constraint\"],STRUUID:[\"constraint\"],MD5:[\"constraint\"],SHA1:[\"constraint\"],SHA256:[\"constraint\"],SHA384:[\"constraint\"],SHA512:[\"constraint\"],COALESCE:[\"constraint\"],IF:[\"constraint\"],STRLANG:[\"constraint\"],STRDT:[\"constraint\"],SAMETERM:[\"constraint\"],ISIRI:[\"constraint\"],ISURI:[\"constraint\"],ISBLANK:[\"constraint\"],ISLITERAL:[\"constraint\"],ISNUMERIC:[\"constraint\"],SUBSTR:[\"constraint\"],REPLACE:[\"constraint\"],REGEX:[\"constraint\"],EXISTS:[\"constraint\"],NOT:[\"constraint\"],IRI_REF:[\"constraint\"],PNAME_LN:[\"constraint\"],PNAME_NS:[\"constraint\"],VAR1:[\"var\"],VAR2:[\"var\"]},path:{\"^\":[\"pathAlternative\"],a:[\"pathAlternative\"],\"!\":[\"pathAlternative\"],\"(\":[\"pathAlternative\"],IRI_REF:[\"pathAlternative\"],PNAME_LN:[\"pathAlternative\"],PNAME_NS:[\"pathAlternative\"]},pathAlternative:{\"^\":[\"pathSequence\",\"*[|,pathSequence]\"],a:[\"pathSequence\",\"*[|,pathSequence]\"],\"!\":[\"pathSequence\",\"*[|,pathSequence]\"],\"(\":[\"pathSequence\",\"*[|,pathSequence]\"],IRI_REF:[\"pathSequence\",\"*[|,pathSequence]\"],PNAME_LN:[\"pathSequence\",\"*[|,pathSequence]\"],PNAME_NS:[\"pathSequence\",\"*[|,pathSequence]\"]},pathElt:{a:[\"pathPrimary\",\"?pathMod\"],\"!\":[\"pathPrimary\",\"?pathMod\"],\"(\":[\"pathPrimary\",\"?pathMod\"],IRI_REF:[\"pathPrimary\",\"?pathMod\"],PNAME_LN:[\"pathPrimary\",\"?pathMod\"],PNAME_NS:[\"pathPrimary\",\"?pathMod\"]},pathEltOrInverse:{a:[\"pathElt\"],\"!\":[\"pathElt\"],\"(\":[\"pathElt\"],IRI_REF:[\"pathElt\"],PNAME_LN:[\"pathElt\"],PNAME_NS:[\"pathElt\"],\"^\":[\"^\",\"pathElt\"]},pathMod:{\"*\":[\"*\"],\"?\":[\"?\"],\"+\":[\"+\"],\"{\":[\"{\",\"or([[integer,or([[,,or([},[integer,}]])],}])],[,,integer,}]])\"]},pathNegatedPropertySet:{a:[\"pathOneInPropertySet\"],\"^\":[\"pathOneInPropertySet\"],IRI_REF:[\"pathOneInPropertySet\"],PNAME_LN:[\"pathOneInPropertySet\"],PNAME_NS:[\"pathOneInPropertySet\"],\"(\":[\"(\",\"?[pathOneInPropertySet,*[|,pathOneInPropertySet]]\",\")\"]},pathOneInPropertySet:{IRI_REF:[\"iriRef\"],PNAME_LN:[\"iriRef\"],PNAME_NS:[\"iriRef\"],a:[\"a\"],\"^\":[\"^\",\"or([iriRef,a])\"]},pathPrimary:{IRI_REF:[\"storeProperty\",\"iriRef\"],PNAME_LN:[\"storeProperty\",\"iriRef\"],PNAME_NS:[\"storeProperty\",\"iriRef\"],a:[\"storeProperty\",\"a\"],\"!\":[\"!\",\"pathNegatedPropertySet\"],\"(\":[\"(\",\"path\",\")\"]},pathSequence:{\"^\":[\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"],a:[\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"],\"!\":[\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"],\"(\":[\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"],IRI_REF:[\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"],PNAME_LN:[\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"],PNAME_NS:[\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"]},prefixDecl:{PREFIX:[\"PREFIX\",\"PNAME_NS\",\"IRI_REF\"]},prefixedName:{PNAME_LN:[\"PNAME_LN\"],PNAME_NS:[\"PNAME_NS\"]},primaryExpression:{\"(\":[\"brackettedExpression\"],STR:[\"builtInCall\"],LANG:[\"builtInCall\"],LANGMATCHES:[\"builtInCall\"],DATATYPE:[\"builtInCall\"],BOUND:[\"builtInCall\"],IRI:[\"builtInCall\"],URI:[\"builtInCall\"],BNODE:[\"builtInCall\"],RAND:[\"builtInCall\"],ABS:[\"builtInCall\"],CEIL:[\"builtInCall\"],FLOOR:[\"builtInCall\"],ROUND:[\"builtInCall\"],CONCAT:[\"builtInCall\"],STRLEN:[\"builtInCall\"],UCASE:[\"builtInCall\"],LCASE:[\"builtInCall\"],ENCODE_FOR_URI:[\"builtInCall\"],CONTAINS:[\"builtInCall\"],STRSTARTS:[\"builtInCall\"],STRENDS:[\"builtInCall\"],STRBEFORE:[\"builtInCall\"],STRAFTER:[\"builtInCall\"],YEAR:[\"builtInCall\"],MONTH:[\"builtInCall\"],DAY:[\"builtInCall\"],HOURS:[\"builtInCall\"],MINUTES:[\"builtInCall\"],SECONDS:[\"builtInCall\"],TIMEZONE:[\"builtInCall\"],TZ:[\"builtInCall\"],NOW:[\"builtInCall\"],UUID:[\"builtInCall\"],STRUUID:[\"builtInCall\"],MD5:[\"builtInCall\"],SHA1:[\"builtInCall\"],SHA256:[\"builtInCall\"],SHA384:[\"builtInCall\"],SHA512:[\"builtInCall\"],COALESCE:[\"builtInCall\"],IF:[\"builtInCall\"],STRLANG:[\"builtInCall\"],STRDT:[\"builtInCall\"],SAMETERM:[\"builtInCall\"],ISIRI:[\"builtInCall\"],ISURI:[\"builtInCall\"],ISBLANK:[\"builtInCall\"],ISLITERAL:[\"builtInCall\"],ISNUMERIC:[\"builtInCall\"],SUBSTR:[\"builtInCall\"],REPLACE:[\"builtInCall\"],REGEX:[\"builtInCall\"],\nEXISTS:[\"builtInCall\"],NOT:[\"builtInCall\"],IRI_REF:[\"iriRefOrFunction\"],PNAME_LN:[\"iriRefOrFunction\"],PNAME_NS:[\"iriRefOrFunction\"],STRING_LITERAL1:[\"rdfLiteral\"],STRING_LITERAL2:[\"rdfLiteral\"],STRING_LITERAL_LONG1:[\"rdfLiteral\"],STRING_LITERAL_LONG2:[\"rdfLiteral\"],INTEGER:[\"numericLiteral\"],DECIMAL:[\"numericLiteral\"],DOUBLE:[\"numericLiteral\"],INTEGER_POSITIVE:[\"numericLiteral\"],DECIMAL_POSITIVE:[\"numericLiteral\"],DOUBLE_POSITIVE:[\"numericLiteral\"],INTEGER_NEGATIVE:[\"numericLiteral\"],DECIMAL_NEGATIVE:[\"numericLiteral\"],DOUBLE_NEGATIVE:[\"numericLiteral\"],TRUE:[\"booleanLiteral\"],FALSE:[\"booleanLiteral\"],VAR1:[\"var\"],VAR2:[\"var\"],COUNT:[\"aggregate\"],SUM:[\"aggregate\"],MIN:[\"aggregate\"],MAX:[\"aggregate\"],AVG:[\"aggregate\"],SAMPLE:[\"aggregate\"],GROUP_CONCAT:[\"aggregate\"]},prologue:{PREFIX:[\"?baseDecl\",\"*prefixDecl\"],BASE:[\"?baseDecl\",\"*prefixDecl\"],$:[\"?baseDecl\",\"*prefixDecl\"],CONSTRUCT:[\"?baseDecl\",\"*prefixDecl\"],DESCRIBE:[\"?baseDecl\",\"*prefixDecl\"],ASK:[\"?baseDecl\",\"*prefixDecl\"],INSERT:[\"?baseDecl\",\"*prefixDecl\"],DELETE:[\"?baseDecl\",\"*prefixDecl\"],SELECT:[\"?baseDecl\",\"*prefixDecl\"],LOAD:[\"?baseDecl\",\"*prefixDecl\"],CLEAR:[\"?baseDecl\",\"*prefixDecl\"],DROP:[\"?baseDecl\",\"*prefixDecl\"],ADD:[\"?baseDecl\",\"*prefixDecl\"],MOVE:[\"?baseDecl\",\"*prefixDecl\"],COPY:[\"?baseDecl\",\"*prefixDecl\"],CREATE:[\"?baseDecl\",\"*prefixDecl\"],WITH:[\"?baseDecl\",\"*prefixDecl\"]},propertyList:{a:[\"propertyListNotEmpty\"],VAR1:[\"propertyListNotEmpty\"],VAR2:[\"propertyListNotEmpty\"],IRI_REF:[\"propertyListNotEmpty\"],PNAME_LN:[\"propertyListNotEmpty\"],PNAME_NS:[\"propertyListNotEmpty\"],\".\":[],\"}\":[],GRAPH:[]},propertyListNotEmpty:{a:[\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"],VAR1:[\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"],VAR2:[\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"],IRI_REF:[\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"],PNAME_LN:[\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"],PNAME_NS:[\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"]},propertyListPath:{a:[\"propertyListNotEmpty\"],VAR1:[\"propertyListNotEmpty\"],VAR2:[\"propertyListNotEmpty\"],IRI_REF:[\"propertyListNotEmpty\"],PNAME_LN:[\"propertyListNotEmpty\"],PNAME_NS:[\"propertyListNotEmpty\"],\".\":[],\"{\":[],OPTIONAL:[],MINUS:[],GRAPH:[],SERVICE:[],FILTER:[],BIND:[],VALUES:[],\"}\":[]},propertyListPathNotEmpty:{VAR1:[\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"],VAR2:[\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"],\"^\":[\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"],a:[\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"],\"!\":[\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"],\"(\":[\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"],IRI_REF:[\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"],PNAME_LN:[\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"],PNAME_NS:[\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"]},quadData:{\"{\":[\"{\",\"disallowVars\",\"quads\",\"allowVars\",\"}\"]},quadDataNoBnodes:{\"{\":[\"{\",\"disallowBnodes\",\"disallowVars\",\"quads\",\"allowVars\",\"allowBnodes\",\"}\"]},quadPattern:{\"{\":[\"{\",\"quads\",\"}\"]},quadPatternNoBnodes:{\"{\":[\"{\",\"disallowBnodes\",\"quads\",\"allowBnodes\",\"}\"]},quads:{GRAPH:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],VAR1:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],VAR2:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],NIL:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],\"(\":[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],\"[\":[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],IRI_REF:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],TRUE:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],FALSE:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],BLANK_NODE_LABEL:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],ANON:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],PNAME_LN:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],PNAME_NS:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],STRING_LITERAL1:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],STRING_LITERAL2:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],STRING_LITERAL_LONG1:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],STRING_LITERAL_LONG2:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],INTEGER:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],DECIMAL:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],DOUBLE:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],INTEGER_POSITIVE:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],DECIMAL_POSITIVE:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],DOUBLE_POSITIVE:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],INTEGER_NEGATIVE:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],DECIMAL_NEGATIVE:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],DOUBLE_NEGATIVE:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],\"}\":[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"]},quadsNotTriples:{GRAPH:[\"GRAPH\",\"varOrIRIref\",\"{\",\"?triplesTemplate\",\"}\"]},queryAll:{CONSTRUCT:[\"or([selectQuery,constructQuery,describeQuery,askQuery])\",\"valuesClause\"],DESCRIBE:[\"or([selectQuery,constructQuery,describeQuery,askQuery])\",\"valuesClause\"],ASK:[\"or([selectQuery,constructQuery,describeQuery,askQuery])\",\"valuesClause\"],SELECT:[\"or([selectQuery,constructQuery,describeQuery,askQuery])\",\"valuesClause\"]},rdfLiteral:{STRING_LITERAL1:[\"string\",\"?or([LANGTAG,[^^,iriRef]])\"],STRING_LITERAL2:[\"string\",\"?or([LANGTAG,[^^,iriRef]])\"],STRING_LITERAL_LONG1:[\"string\",\"?or([LANGTAG,[^^,iriRef]])\"],STRING_LITERAL_LONG2:[\"string\",\"?or([LANGTAG,[^^,iriRef]])\"]},regexExpression:{REGEX:[\"REGEX\",\"(\",\"expression\",\",\",\"expression\",\"?[,,expression]\",\")\"]},relationalExpression:{\"!\":[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],\"+\":[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],\"-\":[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],VAR1:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],VAR2:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],\"(\":[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],STR:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],LANG:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],LANGMATCHES:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],DATATYPE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],BOUND:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],IRI:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],URI:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],BNODE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],RAND:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],ABS:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],CEIL:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],FLOOR:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],ROUND:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],CONCAT:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],STRLEN:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],UCASE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],LCASE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],ENCODE_FOR_URI:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],CONTAINS:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],STRSTARTS:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],STRENDS:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],STRBEFORE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],STRAFTER:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],YEAR:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],MONTH:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],DAY:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],HOURS:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],MINUTES:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],SECONDS:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],TIMEZONE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],TZ:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],NOW:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],UUID:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],STRUUID:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],MD5:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],SHA1:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],SHA256:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],SHA384:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],SHA512:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],COALESCE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],IF:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],STRLANG:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],STRDT:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],SAMETERM:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],ISIRI:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],ISURI:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],ISBLANK:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],ISLITERAL:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],ISNUMERIC:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],TRUE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],FALSE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],COUNT:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],SUM:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],MIN:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],MAX:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],AVG:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],SAMPLE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],GROUP_CONCAT:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],SUBSTR:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],REPLACE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],REGEX:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],EXISTS:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],NOT:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],IRI_REF:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],STRING_LITERAL1:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],STRING_LITERAL2:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],STRING_LITERAL_LONG1:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],STRING_LITERAL_LONG2:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],INTEGER:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],DECIMAL:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],DOUBLE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],INTEGER_POSITIVE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],DECIMAL_POSITIVE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],DOUBLE_POSITIVE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],INTEGER_NEGATIVE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],DECIMAL_NEGATIVE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],DOUBLE_NEGATIVE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],PNAME_LN:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],PNAME_NS:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"]},selectClause:{SELECT:[\"SELECT\",\"?or([DISTINCT,REDUCED])\",\"or([+or([var,[ (,expression,AS,var,)]]),*])\"]},selectQuery:{SELECT:[\"selectClause\",\"*datasetClause\",\"whereClause\",\"solutionModifier\"]},serviceGraphPattern:{SERVICE:[\"SERVICE\",\"?SILENT\",\"varOrIRIref\",\"groupGraphPattern\"]},solutionModifier:{LIMIT:[\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"],OFFSET:[\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"],ORDER:[\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"],HAVING:[\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"],GROUP:[\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"],VALUES:[\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"],$:[\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"],\"}\":[\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"]},sourceSelector:{IRI_REF:[\"iriRef\"],PNAME_LN:[\"iriRef\"],PNAME_NS:[\"iriRef\"]},sparql11:{$:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"],CONSTRUCT:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"],DESCRIBE:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"],ASK:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"],INSERT:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"],DELETE:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"],SELECT:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"],LOAD:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"],CLEAR:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"],DROP:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"],ADD:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"],MOVE:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"],COPY:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"],CREATE:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"],WITH:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"],PREFIX:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"],BASE:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"]},storeProperty:{VAR1:[],VAR2:[],IRI_REF:[],PNAME_LN:[],PNAME_NS:[],a:[]},strReplaceExpression:{REPLACE:[\"REPLACE\",\"(\",\"expression\",\",\",\"expression\",\",\",\"expression\",\"?[,,expression]\",\")\"]},string:{STRING_LITERAL1:[\"STRING_LITERAL1\"],STRING_LITERAL2:[\"STRING_LITERAL2\"],STRING_LITERAL_LONG1:[\"STRING_LITERAL_LONG1\"],STRING_LITERAL_LONG2:[\"STRING_LITERAL_LONG2\"]},subSelect:{SELECT:[\"selectClause\",\"whereClause\",\"solutionModifier\",\"valuesClause\"]},substringExpression:{SUBSTR:[\"SUBSTR\",\"(\",\"expression\",\",\",\"expression\",\"?[,,expression]\",\")\"]},triplesBlock:{VAR1:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],VAR2:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],NIL:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],\"(\":[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],\"[\":[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],IRI_REF:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],TRUE:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],FALSE:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],BLANK_NODE_LABEL:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],ANON:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],PNAME_LN:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],PNAME_NS:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],STRING_LITERAL1:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],STRING_LITERAL2:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],STRING_LITERAL_LONG1:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],STRING_LITERAL_LONG2:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],INTEGER:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],DECIMAL:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],DOUBLE:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],INTEGER_POSITIVE:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],DECIMAL_POSITIVE:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],DOUBLE_POSITIVE:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],INTEGER_NEGATIVE:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],DECIMAL_NEGATIVE:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],DOUBLE_NEGATIVE:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"]},triplesNode:{\"(\":[\"collection\"],\"[\":[\"blankNodePropertyList\"]},triplesNodePath:{\"(\":[\"collectionPath\"],\"[\":[\"blankNodePropertyListPath\"]},triplesSameSubject:{VAR1:[\"varOrTerm\",\"propertyListNotEmpty\"],VAR2:[\"varOrTerm\",\"propertyListNotEmpty\"],NIL:[\"varOrTerm\",\"propertyListNotEmpty\"],IRI_REF:[\"varOrTerm\",\"propertyListNotEmpty\"],TRUE:[\"varOrTerm\",\"propertyListNotEmpty\"],FALSE:[\"varOrTerm\",\"propertyListNotEmpty\"],BLANK_NODE_LABEL:[\"varOrTerm\",\"propertyListNotEmpty\"],ANON:[\"varOrTerm\",\"propertyListNotEmpty\"],PNAME_LN:[\"varOrTerm\",\"propertyListNotEmpty\"],PNAME_NS:[\"varOrTerm\",\"propertyListNotEmpty\"],STRING_LITERAL1:[\"varOrTerm\",\"propertyListNotEmpty\"],STRING_LITERAL2:[\"varOrTerm\",\"propertyListNotEmpty\"],STRING_LITERAL_LONG1:[\"varOrTerm\",\"propertyListNotEmpty\"],STRING_LITERAL_LONG2:[\"varOrTerm\",\"propertyListNotEmpty\"],INTEGER:[\"varOrTerm\",\"propertyListNotEmpty\"],DECIMAL:[\"varOrTerm\",\"propertyListNotEmpty\"],DOUBLE:[\"varOrTerm\",\"propertyListNotEmpty\"],INTEGER_POSITIVE:[\"varOrTerm\",\"propertyListNotEmpty\"],DECIMAL_POSITIVE:[\"varOrTerm\",\"propertyListNotEmpty\"],DOUBLE_POSITIVE:[\"varOrTerm\",\"propertyListNotEmpty\"],INTEGER_NEGATIVE:[\"varOrTerm\",\"propertyListNotEmpty\"],DECIMAL_NEGATIVE:[\"varOrTerm\",\"propertyListNotEmpty\"],DOUBLE_NEGATIVE:[\"varOrTerm\",\"propertyListNotEmpty\"],\"(\":[\"triplesNode\",\"propertyList\"],\"[\":[\"triplesNode\",\"propertyList\"]},triplesSameSubjectPath:{VAR1:[\"varOrTerm\",\"propertyListPathNotEmpty\"],VAR2:[\"varOrTerm\",\"propertyListPathNotEmpty\"],NIL:[\"varOrTerm\",\"propertyListPathNotEmpty\"],IRI_REF:[\"varOrTerm\",\"propertyListPathNotEmpty\"],TRUE:[\"varOrTerm\",\"propertyListPathNotEmpty\"],FALSE:[\"varOrTerm\",\"propertyListPathNotEmpty\"],BLANK_NODE_LABEL:[\"varOrTerm\",\"propertyListPathNotEmpty\"],ANON:[\"varOrTerm\",\"propertyListPathNotEmpty\"],PNAME_LN:[\"varOrTerm\",\"propertyListPathNotEmpty\"],PNAME_NS:[\"varOrTerm\",\"propertyListPathNotEmpty\"],STRING_LITERAL1:[\"varOrTerm\",\"propertyListPathNotEmpty\"],STRING_LITERAL2:[\"varOrTerm\",\"propertyListPathNotEmpty\"],STRING_LITERAL_LONG1:[\"varOrTerm\",\"propertyListPathNotEmpty\"],STRING_LITERAL_LONG2:[\"varOrTerm\",\"propertyListPathNotEmpty\"],INTEGER:[\"varOrTerm\",\"propertyListPathNotEmpty\"],DECIMAL:[\"varOrTerm\",\"propertyListPathNotEmpty\"],DOUBLE:[\"varOrTerm\",\"propertyListPathNotEmpty\"],INTEGER_POSITIVE:[\"varOrTerm\",\"propertyListPathNotEmpty\"],DECIMAL_POSITIVE:[\"varOrTerm\",\"propertyListPathNotEmpty\"],DOUBLE_POSITIVE:[\"varOrTerm\",\"propertyListPathNotEmpty\"],INTEGER_NEGATIVE:[\"varOrTerm\",\"propertyListPathNotEmpty\"],DECIMAL_NEGATIVE:[\"varOrTerm\",\"propertyListPathNotEmpty\"],DOUBLE_NEGATIVE:[\"varOrTerm\",\"propertyListPathNotEmpty\"],\"(\":[\"triplesNodePath\",\"propertyListPath\"],\"[\":[\"triplesNodePath\",\"propertyListPath\"]},triplesTemplate:{VAR1:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],VAR2:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],NIL:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],\"(\":[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],\"[\":[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],IRI_REF:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],TRUE:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],FALSE:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],BLANK_NODE_LABEL:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],ANON:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],PNAME_LN:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],PNAME_NS:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],STRING_LITERAL1:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],STRING_LITERAL2:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],\nSTRING_LITERAL_LONG1:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],STRING_LITERAL_LONG2:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],INTEGER:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],DECIMAL:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],DOUBLE:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],INTEGER_POSITIVE:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],DECIMAL_POSITIVE:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],DOUBLE_POSITIVE:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],INTEGER_NEGATIVE:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],DECIMAL_NEGATIVE:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],DOUBLE_NEGATIVE:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"]},unaryExpression:{\"!\":[\"!\",\"primaryExpression\"],\"+\":[\"+\",\"primaryExpression\"],\"-\":[\"-\",\"primaryExpression\"],VAR1:[\"primaryExpression\"],VAR2:[\"primaryExpression\"],\"(\":[\"primaryExpression\"],STR:[\"primaryExpression\"],LANG:[\"primaryExpression\"],LANGMATCHES:[\"primaryExpression\"],DATATYPE:[\"primaryExpression\"],BOUND:[\"primaryExpression\"],IRI:[\"primaryExpression\"],URI:[\"primaryExpression\"],BNODE:[\"primaryExpression\"],RAND:[\"primaryExpression\"],ABS:[\"primaryExpression\"],CEIL:[\"primaryExpression\"],FLOOR:[\"primaryExpression\"],ROUND:[\"primaryExpression\"],CONCAT:[\"primaryExpression\"],STRLEN:[\"primaryExpression\"],UCASE:[\"primaryExpression\"],LCASE:[\"primaryExpression\"],ENCODE_FOR_URI:[\"primaryExpression\"],CONTAINS:[\"primaryExpression\"],STRSTARTS:[\"primaryExpression\"],STRENDS:[\"primaryExpression\"],STRBEFORE:[\"primaryExpression\"],STRAFTER:[\"primaryExpression\"],YEAR:[\"primaryExpression\"],MONTH:[\"primaryExpression\"],DAY:[\"primaryExpression\"],HOURS:[\"primaryExpression\"],MINUTES:[\"primaryExpression\"],SECONDS:[\"primaryExpression\"],TIMEZONE:[\"primaryExpression\"],TZ:[\"primaryExpression\"],NOW:[\"primaryExpression\"],UUID:[\"primaryExpression\"],STRUUID:[\"primaryExpression\"],MD5:[\"primaryExpression\"],SHA1:[\"primaryExpression\"],SHA256:[\"primaryExpression\"],SHA384:[\"primaryExpression\"],SHA512:[\"primaryExpression\"],COALESCE:[\"primaryExpression\"],IF:[\"primaryExpression\"],STRLANG:[\"primaryExpression\"],STRDT:[\"primaryExpression\"],SAMETERM:[\"primaryExpression\"],ISIRI:[\"primaryExpression\"],ISURI:[\"primaryExpression\"],ISBLANK:[\"primaryExpression\"],ISLITERAL:[\"primaryExpression\"],ISNUMERIC:[\"primaryExpression\"],TRUE:[\"primaryExpression\"],FALSE:[\"primaryExpression\"],COUNT:[\"primaryExpression\"],SUM:[\"primaryExpression\"],MIN:[\"primaryExpression\"],MAX:[\"primaryExpression\"],AVG:[\"primaryExpression\"],SAMPLE:[\"primaryExpression\"],GROUP_CONCAT:[\"primaryExpression\"],SUBSTR:[\"primaryExpression\"],REPLACE:[\"primaryExpression\"],REGEX:[\"primaryExpression\"],EXISTS:[\"primaryExpression\"],NOT:[\"primaryExpression\"],IRI_REF:[\"primaryExpression\"],STRING_LITERAL1:[\"primaryExpression\"],STRING_LITERAL2:[\"primaryExpression\"],STRING_LITERAL_LONG1:[\"primaryExpression\"],STRING_LITERAL_LONG2:[\"primaryExpression\"],INTEGER:[\"primaryExpression\"],DECIMAL:[\"primaryExpression\"],DOUBLE:[\"primaryExpression\"],INTEGER_POSITIVE:[\"primaryExpression\"],DECIMAL_POSITIVE:[\"primaryExpression\"],DOUBLE_POSITIVE:[\"primaryExpression\"],INTEGER_NEGATIVE:[\"primaryExpression\"],DECIMAL_NEGATIVE:[\"primaryExpression\"],DOUBLE_NEGATIVE:[\"primaryExpression\"],PNAME_LN:[\"primaryExpression\"],PNAME_NS:[\"primaryExpression\"]},update:{INSERT:[\"prologue\",\"?[update1,?[;,update]]\"],DELETE:[\"prologue\",\"?[update1,?[;,update]]\"],LOAD:[\"prologue\",\"?[update1,?[;,update]]\"],CLEAR:[\"prologue\",\"?[update1,?[;,update]]\"],DROP:[\"prologue\",\"?[update1,?[;,update]]\"],ADD:[\"prologue\",\"?[update1,?[;,update]]\"],MOVE:[\"prologue\",\"?[update1,?[;,update]]\"],COPY:[\"prologue\",\"?[update1,?[;,update]]\"],CREATE:[\"prologue\",\"?[update1,?[;,update]]\"],WITH:[\"prologue\",\"?[update1,?[;,update]]\"],PREFIX:[\"prologue\",\"?[update1,?[;,update]]\"],BASE:[\"prologue\",\"?[update1,?[;,update]]\"],$:[\"prologue\",\"?[update1,?[;,update]]\"]},update1:{LOAD:[\"load\"],CLEAR:[\"clear\"],DROP:[\"drop\"],ADD:[\"add\"],MOVE:[\"move\"],COPY:[\"copy\"],CREATE:[\"create\"],INSERT:[\"INSERT\",\"insert1\"],DELETE:[\"DELETE\",\"delete1\"],WITH:[\"modify\"]},updateAll:{INSERT:[\"?[update1,?[;,update]]\"],DELETE:[\"?[update1,?[;,update]]\"],LOAD:[\"?[update1,?[;,update]]\"],CLEAR:[\"?[update1,?[;,update]]\"],DROP:[\"?[update1,?[;,update]]\"],ADD:[\"?[update1,?[;,update]]\"],MOVE:[\"?[update1,?[;,update]]\"],COPY:[\"?[update1,?[;,update]]\"],CREATE:[\"?[update1,?[;,update]]\"],WITH:[\"?[update1,?[;,update]]\"],$:[\"?[update1,?[;,update]]\"]},usingClause:{USING:[\"USING\",\"or([iriRef,[NAMED,iriRef]])\"]},valueLogical:{\"!\":[\"relationalExpression\"],\"+\":[\"relationalExpression\"],\"-\":[\"relationalExpression\"],VAR1:[\"relationalExpression\"],VAR2:[\"relationalExpression\"],\"(\":[\"relationalExpression\"],STR:[\"relationalExpression\"],LANG:[\"relationalExpression\"],LANGMATCHES:[\"relationalExpression\"],DATATYPE:[\"relationalExpression\"],BOUND:[\"relationalExpression\"],IRI:[\"relationalExpression\"],URI:[\"relationalExpression\"],BNODE:[\"relationalExpression\"],RAND:[\"relationalExpression\"],ABS:[\"relationalExpression\"],CEIL:[\"relationalExpression\"],FLOOR:[\"relationalExpression\"],ROUND:[\"relationalExpression\"],CONCAT:[\"relationalExpression\"],STRLEN:[\"relationalExpression\"],UCASE:[\"relationalExpression\"],LCASE:[\"relationalExpression\"],ENCODE_FOR_URI:[\"relationalExpression\"],CONTAINS:[\"relationalExpression\"],STRSTARTS:[\"relationalExpression\"],STRENDS:[\"relationalExpression\"],STRBEFORE:[\"relationalExpression\"],STRAFTER:[\"relationalExpression\"],YEAR:[\"relationalExpression\"],MONTH:[\"relationalExpression\"],DAY:[\"relationalExpression\"],HOURS:[\"relationalExpression\"],MINUTES:[\"relationalExpression\"],SECONDS:[\"relationalExpression\"],TIMEZONE:[\"relationalExpression\"],TZ:[\"relationalExpression\"],NOW:[\"relationalExpression\"],UUID:[\"relationalExpression\"],STRUUID:[\"relationalExpression\"],MD5:[\"relationalExpression\"],SHA1:[\"relationalExpression\"],SHA256:[\"relationalExpression\"],SHA384:[\"relationalExpression\"],SHA512:[\"relationalExpression\"],COALESCE:[\"relationalExpression\"],IF:[\"relationalExpression\"],STRLANG:[\"relationalExpression\"],STRDT:[\"relationalExpression\"],SAMETERM:[\"relationalExpression\"],ISIRI:[\"relationalExpression\"],ISURI:[\"relationalExpression\"],ISBLANK:[\"relationalExpression\"],ISLITERAL:[\"relationalExpression\"],ISNUMERIC:[\"relationalExpression\"],TRUE:[\"relationalExpression\"],FALSE:[\"relationalExpression\"],COUNT:[\"relationalExpression\"],SUM:[\"relationalExpression\"],MIN:[\"relationalExpression\"],MAX:[\"relationalExpression\"],AVG:[\"relationalExpression\"],SAMPLE:[\"relationalExpression\"],GROUP_CONCAT:[\"relationalExpression\"],SUBSTR:[\"relationalExpression\"],REPLACE:[\"relationalExpression\"],REGEX:[\"relationalExpression\"],EXISTS:[\"relationalExpression\"],NOT:[\"relationalExpression\"],IRI_REF:[\"relationalExpression\"],STRING_LITERAL1:[\"relationalExpression\"],STRING_LITERAL2:[\"relationalExpression\"],STRING_LITERAL_LONG1:[\"relationalExpression\"],STRING_LITERAL_LONG2:[\"relationalExpression\"],INTEGER:[\"relationalExpression\"],DECIMAL:[\"relationalExpression\"],DOUBLE:[\"relationalExpression\"],INTEGER_POSITIVE:[\"relationalExpression\"],DECIMAL_POSITIVE:[\"relationalExpression\"],DOUBLE_POSITIVE:[\"relationalExpression\"],INTEGER_NEGATIVE:[\"relationalExpression\"],DECIMAL_NEGATIVE:[\"relationalExpression\"],DOUBLE_NEGATIVE:[\"relationalExpression\"],PNAME_LN:[\"relationalExpression\"],PNAME_NS:[\"relationalExpression\"]},valuesClause:{VALUES:[\"VALUES\",\"dataBlock\"],$:[],\"}\":[]},\"var\":{VAR1:[\"VAR1\"],VAR2:[\"VAR2\"]},varOrIRIref:{VAR1:[\"var\"],VAR2:[\"var\"],IRI_REF:[\"iriRef\"],PNAME_LN:[\"iriRef\"],PNAME_NS:[\"iriRef\"]},varOrTerm:{VAR1:[\"var\"],VAR2:[\"var\"],NIL:[\"graphTerm\"],IRI_REF:[\"graphTerm\"],TRUE:[\"graphTerm\"],FALSE:[\"graphTerm\"],BLANK_NODE_LABEL:[\"graphTerm\"],ANON:[\"graphTerm\"],PNAME_LN:[\"graphTerm\"],PNAME_NS:[\"graphTerm\"],STRING_LITERAL1:[\"graphTerm\"],STRING_LITERAL2:[\"graphTerm\"],STRING_LITERAL_LONG1:[\"graphTerm\"],STRING_LITERAL_LONG2:[\"graphTerm\"],INTEGER:[\"graphTerm\"],DECIMAL:[\"graphTerm\"],DOUBLE:[\"graphTerm\"],INTEGER_POSITIVE:[\"graphTerm\"],DECIMAL_POSITIVE:[\"graphTerm\"],DOUBLE_POSITIVE:[\"graphTerm\"],INTEGER_NEGATIVE:[\"graphTerm\"],DECIMAL_NEGATIVE:[\"graphTerm\"],DOUBLE_NEGATIVE:[\"graphTerm\"]},verb:{VAR1:[\"storeProperty\",\"varOrIRIref\"],VAR2:[\"storeProperty\",\"varOrIRIref\"],IRI_REF:[\"storeProperty\",\"varOrIRIref\"],PNAME_LN:[\"storeProperty\",\"varOrIRIref\"],PNAME_NS:[\"storeProperty\",\"varOrIRIref\"],a:[\"storeProperty\",\"a\"]},verbPath:{\"^\":[\"path\"],a:[\"path\"],\"!\":[\"path\"],\"(\":[\"path\"],IRI_REF:[\"path\"],PNAME_LN:[\"path\"],PNAME_NS:[\"path\"]},verbSimple:{VAR1:[\"var\"],VAR2:[\"var\"]},whereClause:{\"{\":[\"?WHERE\",\"groupGraphPattern\"],WHERE:[\"?WHERE\",\"groupGraphPattern\"]}}),a=/^(GROUP_CONCAT|DATATYPE|BASE|PREFIX|SELECT|CONSTRUCT|DESCRIBE|ASK|FROM|NAMED|ORDER|BY|LIMIT|ASC|DESC|OFFSET|DISTINCT|REDUCED|WHERE|GRAPH|OPTIONAL|UNION|FILTER|GROUP|HAVING|AS|VALUES|LOAD|CLEAR|DROP|CREATE|MOVE|COPY|SILENT|INSERT|DELETE|DATA|WITH|TO|USING|NAMED|MINUS|BIND|LANGMATCHES|LANG|BOUND|SAMETERM|ISIRI|ISURI|ISBLANK|ISLITERAL|REGEX|TRUE|FALSE|UNDEF|ADD|DEFAULT|ALL|SERVICE|INTO|IN|NOT|IRI|URI|BNODE|RAND|ABS|CEIL|FLOOR|ROUND|CONCAT|STRLEN|UCASE|LCASE|ENCODE_FOR_URI|CONTAINS|STRSTARTS|STRENDS|STRBEFORE|STRAFTER|YEAR|MONTH|DAY|HOURS|MINUTES|SECONDS|TIMEZONE|TZ|NOW|UUID|STRUUID|MD5|SHA1|SHA256|SHA384|SHA512|COALESCE|IF|STRLANG|STRDT|ISNUMERIC|SUBSTR|REPLACE|EXISTS|COUNT|SUM|MIN|MAX|AVG|SAMPLE|SEPARATOR|STR)/i,p=/^(\\*|a|\\.|\\{|\\}|,|\\(|\\)|;|\\[|\\]|\\|\\||&&|=|!=|!|<=|>=|<|>|\\+|-|\\/|\\^\\^|\\?|\\||\\^)/,l=null,E=\"sparql11\",u=\"sparql11\",c=!0,d=r(),N=d.terminal,I={\"*[,, object]\":3,\"*[(,),object]\":3,\"*[(,),objectPath]\":3,\"*[/,pathEltOrInverse]\":2,object:2,objectPath:2,objectList:2,objectListPath:2,storeProperty:2,pathMod:2,\"?pathMod\":2,propertyListNotEmpty:1,propertyList:1,propertyListPath:1,propertyListPathNotEmpty:1,\"?[verb,objectList]\":1,\"?[or([verbPath, verbSimple]),objectList]\":1},x={\"}\":1,\"]\":0,\")\":1,\"{\":-1,\"(\":-1,\"*[;,?[or([verbPath,verbSimple]),objectList]]\":1};return{token:o,startState:function(e){return{tokenize:o,OK:!0,complete:c,errorStartPos:null,errorEndPos:null,queryType:l,possibleCurrent:n(u),possibleNext:n(u),allowVars:!0,allowBnodes:!0,storeProperty:!1,lastProperty:\"\",stack:[u]}},indent:t,electricChars:\"}])\"}});e.defineMIME(\"application/x-sparql-query\",\"sparql11\")})},{codemirror:void 0}],4:[function(e,i,r){var n=i.exports=function(){this.words=0;this.prefixes=0;this.children=[]};n.prototype={insert:function(e,i){if(0!=e.length){var r,o,t=this;void 0===i&&(i=0);if(i!==e.length){t.prefixes++;r=e[i];void 0===t.children[r]&&(t.children[r]=new n);o=t.children[r];o.insert(e,i+1)}else t.words++}},remove:function(e,i){if(0!=e.length){var r,n,o=this;void 0===i&&(i=0);if(void 0!==o)if(i!==e.length){o.prefixes--;r=e[i];n=o.children[r];n.remove(e,i+1)}else o.words--}},update:function(e,i){if(0!=e.length&&0!=i.length){this.remove(e);this.insert(i)}},countWord:function(e,i){if(0==e.length)return 0;var r,n,o=this,t=0;void 0===i&&(i=0);if(i===e.length)return o.words;r=e[i];n=o.children[r];void 0!==n&&(t=n.countWord(e,i+1));return t},countPrefix:function(e,i){if(0==e.length)return 0;var r,n,o=this,t=0;void 0===i&&(i=0);if(i===e.length)return o.prefixes;var r=e[i];n=o.children[r];void 0!==n&&(t=n.countPrefix(e,i+1));return t},find:function(e){return 0==e.length?!1:this.countWord(e)>0?!0:!1},getAllWords:function(e){var i,r,n=this,o=[];void 0===e&&(e=\"\");if(void 0===n)return[];n.words>0&&o.push(e);for(i in n.children){r=n.children[i];o=o.concat(r.getAllWords(e+i))}return o},autoComplete:function(e,i){var r,n,o=this;if(0==e.length)return void 0===i?o.getAllWords(e):[];void 0===i&&(i=0);r=e[i];n=o.children[r];return void 0===n?[]:i===e.length-1?n.getAllWords(e):n.autoComplete(e,i+1)}}},{}],5:[function(i,r,n){(function(o){\"object\"==typeof n&&\"object\"==typeof r?o(function(){try{return i(\"codemirror\")}catch(e){return window.CodeMirror}}()):\"function\"==typeof e&&e.amd?e([\"../../lib/codemirror\"],o):o(CodeMirror)})(function(e){\"use strict\";function i(e){var i=e.getWrapperElement();e.state.fullScreenRestore={scrollTop:window.pageYOffset,scrollLeft:window.pageXOffset,width:i.style.width,height:i.style.height};i.style.width=\"\";i.style.height=\"auto\";i.className+=\" CodeMirror-fullscreen\";document.documentElement.style.overflow=\"hidden\";e.refresh()}function r(e){var i=e.getWrapperElement();i.className=i.className.replace(/\\s*CodeMirror-fullscreen\\b/,\"\");document.documentElement.style.overflow=\"\";var r=e.state.fullScreenRestore;i.style.width=r.width;i.style.height=r.height;window.scrollTo(r.scrollLeft,r.scrollTop);e.refresh()}e.defineOption(\"fullScreen\",!1,function(n,o,t){t==e.Init&&(t=!1);!t!=!o&&(o?i(n):r(n))})})},{codemirror:void 0}],6:[function(i,r,n){(function(o){\"object\"==typeof n&&\"object\"==typeof r?o(function(){try{return i(\"codemirror\")}catch(e){return window.CodeMirror}}()):\"function\"==typeof e&&e.amd?e([\"../../lib/codemirror\"],o):o(CodeMirror)})(function(e){function i(e,i,n,o){var t=e.getLineHandle(i.line),p=i.ch-1,l=p>=0&&a[t.text.charAt(p)]||a[t.text.charAt(++p)];if(!l)return null;var E=\">\"==l.charAt(1)?1:-1;if(n&&E>0!=(p==i.ch))return null;var u=e.getTokenTypeAt(s(i.line,p+1)),c=r(e,s(i.line,p+(E>0?1:0)),E,u||null,o);return null==c?null:{from:s(i.line,p),to:c&&c.pos,match:c&&c.ch==l.charAt(0),forward:E>0}}function r(e,i,r,n,o){for(var t=o&&o.maxScanLineLength||1e4,p=o&&o.maxScanLines||1e3,l=[],E=o&&o.bracketRegex?o.bracketRegex:/[(){}[\\]]/,u=r>0?Math.min(i.line+p,e.lastLine()+1):Math.max(e.firstLine()-1,i.line-p),c=i.line;c!=u;c+=r){var d=e.getLine(c);if(d){var N=r>0?0:d.length-1,I=r>0?d.length:-1;if(!(d.length>t)){c==i.line&&(N=i.ch-(0>r?1:0));for(;N!=I;N+=r){var x=d.charAt(N);if(E.test(x)&&(void 0===n||e.getTokenTypeAt(s(c,N+1))==n)){var m=a[x];if(\">\"==m.charAt(1)==r>0)l.push(x);else{if(!l.length)return{pos:s(c,N),ch:x};l.pop()}}}}}}return c-r==(r>0?e.lastLine():e.firstLine())?!1:null}function n(e,r,n){for(var o=e.state.matchBrackets.maxHighlightLineLength||1e3,a=[],p=e.listSelections(),l=0;l<p.length;l++){var E=p[l].empty()&&i(e,p[l].head,!1,n);if(E&&e.getLine(E.from.line).length<=o){var u=E.match?\"CodeMirror-matchingbracket\":\"CodeMirror-nonmatchingbracket\";a.push(e.markText(E.from,s(E.from.line,E.from.ch+1),{className:u}));E.to&&e.getLine(E.to.line).length<=o&&a.push(e.markText(E.to,s(E.to.line,E.to.ch+1),{className:u}))}}if(a.length){t&&e.state.focused&&e.display.input.focus();var c=function(){e.operation(function(){for(var e=0;e<a.length;e++)a[e].clear()})};if(!r)return c;setTimeout(c,800)}}function o(e){e.operation(function(){if(p){p();p=null}p=n(e,!1,e.state.matchBrackets)})}var t=/MSIE \\d/.test(navigator.userAgent)&&(null==document.documentMode||document.documentMode<8),s=e.Pos,a={\"(\":\")>\",\")\":\"(<\",\"[\":\"]>\",\"]\":\"[<\",\"{\":\"}>\",\"}\":\"{<\"},p=null;e.defineOption(\"matchBrackets\",!1,function(i,r,n){n&&n!=e.Init&&i.off(\"cursorActivity\",o);if(r){i.state.matchBrackets=\"object\"==typeof r?r:{};i.on(\"cursorActivity\",o)}});e.defineExtension(\"matchBrackets\",function(){n(this,!0)});e.defineExtension(\"findMatchingBracket\",function(e,r,n){return i(this,e,r,n)});e.defineExtension(\"scanForBracket\",function(e,i,n,o){return r(this,e,i,n,o)})})},{codemirror:void 0}],7:[function(i,r,n){(function(o){\"object\"==typeof n&&\"object\"==typeof r?o(function(){try{return i(\"codemirror\")}catch(e){return window.CodeMirror}}()):\"function\"==typeof e&&e.amd?e([\"../../lib/codemirror\"],o):o(CodeMirror)})(function(e){\"use strict\";e.registerHelper(\"fold\",\"brace\",function(i,r){function n(n){for(var o=r.ch,p=0;;){var l=0>=o?-1:a.lastIndexOf(n,o-1);if(-1!=l){if(1==p&&l<r.ch)break;t=i.getTokenTypeAt(e.Pos(s,l+1));if(!/^(comment|string)/.test(t))return l+1;o=l-1}else{if(1==p)break;p=1;o=a.length}}}var o,t,s=r.line,a=i.getLine(s),p=\"{\",l=\"}\",o=n(\"{\");if(null==o){p=\"[\",l=\"]\";o=n(\"[\")}if(null!=o){var E,u,c=1,d=i.lastLine();e:for(var N=s;d>=N;++N)for(var I=i.getLine(N),x=N==s?o:0;;){var m=I.indexOf(p,x),L=I.indexOf(l,x);0>m&&(m=I.length);0>L&&(L=I.length);x=Math.min(m,L);if(x==I.length)break;if(i.getTokenTypeAt(e.Pos(N,x+1))==t)if(x==m)++c;else if(!--c){E=N;u=x;break e}++x}if(null!=E&&(s!=E||u!=o))return{from:e.Pos(s,o),to:e.Pos(E,u)}}});e.registerHelper(\"fold\",\"import\",function(i,r){function n(r){if(r<i.firstLine()||r>i.lastLine())return null;var n=i.getTokenAt(e.Pos(r,1));/\\S/.test(n.string)||(n=i.getTokenAt(e.Pos(r,n.end+1)));if(\"keyword\"!=n.type||\"import\"!=n.string)return null;for(var o=r,t=Math.min(i.lastLine(),r+10);t>=o;++o){var s=i.getLine(o),a=s.indexOf(\";\");if(-1!=a)return{startCh:n.end,end:e.Pos(o,a)}}}var o,r=r.line,t=n(r);if(!t||n(r-1)||(o=n(r-2))&&o.end.line==r-1)return null;for(var s=t.end;;){var a=n(s.line+1);if(null==a)break;s=a.end}return{from:i.clipPos(e.Pos(r,t.startCh+1)),to:s}});e.registerHelper(\"fold\",\"include\",function(i,r){function n(r){if(r<i.firstLine()||r>i.lastLine())return null;var n=i.getTokenAt(e.Pos(r,1));/\\S/.test(n.string)||(n=i.getTokenAt(e.Pos(r,n.end+1)));return\"meta\"==n.type&&\"#include\"==n.string.slice(0,8)?n.start+8:void 0}var r=r.line,o=n(r);if(null==o||null!=n(r-1))return null;for(var t=r;;){var s=n(t+1);if(null==s)break;++t}return{from:e.Pos(r,o+1),to:i.clipPos(e.Pos(t))}})})},{codemirror:void 0}],8:[function(i,r,n){(function(o){\"object\"==typeof n&&\"object\"==typeof r?o(function(){try{return i(\"codemirror\")}catch(e){return window.CodeMirror}}()):\"function\"==typeof e&&e.amd?e([\"../../lib/codemirror\"],o):o(CodeMirror)})(function(e){\"use strict\";function i(i,o,t,s){function a(e){var r=p(i,o);if(!r||r.to.line-r.from.line<l)return null;for(var n=i.findMarksAt(r.from),t=0;t<n.length;++t)if(n[t].__isFold&&\"fold\"!==s){if(!e)return null;r.cleared=!0;n[t].clear()}return r}if(t&&t.call){var p=t;t=null}else var p=n(i,t,\"rangeFinder\");\"number\"==typeof o&&(o=e.Pos(o,0));var l=n(i,t,\"minFoldSize\"),E=a(!0);if(n(i,t,\"scanUp\"))for(;!E&&o.line>i.firstLine();){o=e.Pos(o.line-1,0);E=a(!1)}if(E&&!E.cleared&&\"unfold\"!==s){var u=r(i,t);e.on(u,\"mousedown\",function(i){c.clear();e.e_preventDefault(i)});var c=i.markText(E.from,E.to,{replacedWith:u,clearOnEnter:!0,__isFold:!0});c.on(\"clear\",function(r,n){e.signal(i,\"unfold\",i,r,n)});e.signal(i,\"fold\",i,E.from,E.to)}}function r(e,i){var r=n(e,i,\"widget\");if(\"string\"==typeof r){var o=document.createTextNode(r);r=document.createElement(\"span\");r.appendChild(o);r.className=\"CodeMirror-foldmarker\"}return r}function n(e,i,r){if(i&&void 0!==i[r])return i[r];var n=e.options.foldOptions;return n&&void 0!==n[r]?n[r]:o[r]}e.newFoldFunction=function(e,r){return function(n,o){i(n,o,{rangeFinder:e,widget:r})}};e.defineExtension(\"foldCode\",function(e,r,n){i(this,e,r,n)});e.defineExtension(\"isFolded\",function(e){for(var i=this.findMarksAt(e),r=0;r<i.length;++r)if(i[r].__isFold)return!0});e.commands.toggleFold=function(e){e.foldCode(e.getCursor())};e.commands.fold=function(e){e.foldCode(e.getCursor(),null,\"fold\")};e.commands.unfold=function(e){e.foldCode(e.getCursor(),null,\"unfold\")};e.commands.foldAll=function(i){i.operation(function(){for(var r=i.firstLine(),n=i.lastLine();n>=r;r++)i.foldCode(e.Pos(r,0),null,\"fold\")})};e.commands.unfoldAll=function(i){i.operation(function(){for(var r=i.firstLine(),n=i.lastLine();n>=r;r++)i.foldCode(e.Pos(r,0),null,\"unfold\")})};e.registerHelper(\"fold\",\"combine\",function(){var e=Array.prototype.slice.call(arguments,0);return function(i,r){for(var n=0;n<e.length;++n){var o=e[n](i,r);if(o)return o}}});e.registerHelper(\"fold\",\"auto\",function(e,i){for(var r=e.getHelpers(i,\"fold\"),n=0;n<r.length;n++){var o=r[n](e,i);if(o)return o}});var o={rangeFinder:e.fold.auto,widget:\"↔\",minFoldSize:0,scanUp:!1};e.defineOption(\"foldOptions\",null);e.defineExtension(\"foldOption\",function(e,i){return n(this,e,i)})})},{codemirror:void 0}],9:[function(i,r,n){(function(o){\"object\"==typeof n&&\"object\"==typeof r?o(function(){try{return i(\"codemirror\")}catch(e){return window.CodeMirror}}(),i(\"./foldcode\")):\"function\"==typeof e&&e.amd?e([\"../../lib/codemirror\",\"./foldcode\"],o):o(CodeMirror)})(function(e){\"use strict\";function i(e){this.options=e;this.from=this.to=0}function r(e){e===!0&&(e={});null==e.gutter&&(e.gutter=\"CodeMirror-foldgutter\");null==e.indicatorOpen&&(e.indicatorOpen=\"CodeMirror-foldgutter-open\");null==e.indicatorFolded&&(e.indicatorFolded=\"CodeMirror-foldgutter-folded\");return e}function n(e,i){for(var r=e.findMarksAt(u(i)),n=0;n<r.length;++n)if(r[n].__isFold&&r[n].find().from.line==i)return!0}function o(e){if(\"string\"==typeof e){var i=document.createElement(\"div\");i.className=e+\" CodeMirror-guttermarker-subtle\";return i}return e.cloneNode(!0)}function t(e,i,r){var t=e.state.foldGutter.options,s=i,a=e.foldOption(t,\"minFoldSize\"),p=e.foldOption(t,\"rangeFinder\");e.eachLine(i,r,function(i){var r=null;if(n(e,s))r=o(t.indicatorFolded);else{var l=u(s,0),E=p&&p(e,l);E&&E.to.line-E.from.line>=a&&(r=o(t.indicatorOpen))}e.setGutterMarker(i,t.gutter,r);++s})}function s(e){var i=e.getViewport(),r=e.state.foldGutter;if(r){e.operation(function(){t(e,i.from,i.to)});r.from=i.from;r.to=i.to}}function a(e,i,r){var n=e.state.foldGutter;if(n){var o=n.options;r==o.gutter&&e.foldCode(u(i,0),o.rangeFinder)}}function p(e){var i=e.state.foldGutter;if(i){var r=i.options;i.from=i.to=0;clearTimeout(i.changeUpdate);i.changeUpdate=setTimeout(function(){s(e)},r.foldOnChangeTimeSpan||600)}}function l(e){var i=e.state.foldGutter;if(i){var r=i.options;clearTimeout(i.changeUpdate);i.changeUpdate=setTimeout(function(){var r=e.getViewport();i.from==i.to||r.from-i.to>20||i.from-r.to>20?s(e):e.operation(function(){if(r.from<i.from){t(e,r.from,i.from);i.from=r.from}if(r.to>i.to){t(e,i.to,r.to);i.to=r.to}})},r.updateViewportTimeSpan||400)}}function E(e,i){var r=e.state.foldGutter;if(r){var n=i.line;n>=r.from&&n<r.to&&t(e,n,n+1)}}e.defineOption(\"foldGutter\",!1,function(n,o,t){if(t&&t!=e.Init){n.clearGutter(n.state.foldGutter.options.gutter);n.state.foldGutter=null;n.off(\"gutterClick\",a);n.off(\"change\",p);n.off(\"viewportChange\",l);n.off(\"fold\",E);n.off(\"unfold\",E);n.off(\"swapDoc\",s)}if(o){n.state.foldGutter=new i(r(o));s(n);n.on(\"gutterClick\",a);n.on(\"change\",p);n.on(\"viewportChange\",l);n.on(\"fold\",E);n.on(\"unfold\",E);n.on(\"swapDoc\",s)}});var u=e.Pos})},{\"./foldcode\":8,codemirror:void 0}],10:[function(i,r,n){(function(o){\"object\"==typeof n&&\"object\"==typeof r?o(function(){try{return i(\"codemirror\")}catch(e){return window.CodeMirror}}()):\"function\"==typeof e&&e.amd?e([\"../../lib/codemirror\"],o):o(CodeMirror)})(function(e){\"use strict\";function i(e,i){return e.line-i.line||e.ch-i.ch}function r(e,i,r,n){this.line=i;this.ch=r;this.cm=e;this.text=e.getLine(i);this.min=n?n.from:e.firstLine();this.max=n?n.to-1:e.lastLine()}function n(e,i){var r=e.cm.getTokenTypeAt(c(e.line,i));return r&&/\\btag\\b/.test(r)}function o(e){if(!(e.line>=e.max)){e.ch=0;e.text=e.cm.getLine(++e.line);return!0}}function t(e){if(!(e.line<=e.min)){e.text=e.cm.getLine(--e.line);e.ch=e.text.length;return!0}}function s(e){for(;;){var i=e.text.indexOf(\">\",e.ch);if(-1==i){if(o(e))continue;return}if(n(e,i+1)){var r=e.text.lastIndexOf(\"/\",i),t=r>-1&&!/\\S/.test(e.text.slice(r+1,i));e.ch=i+1;return t?\"selfClose\":\"regular\"}e.ch=i+1}}function a(e){for(;;){var i=e.ch?e.text.lastIndexOf(\"<\",e.ch-1):-1;if(-1==i){if(t(e))continue;return}if(n(e,i+1)){I.lastIndex=i;e.ch=i;var r=I.exec(e.text);if(r&&r.index==i)return r}else e.ch=i}}function p(e){for(;;){I.lastIndex=e.ch;var i=I.exec(e.text);if(!i){if(o(e))continue;return}if(n(e,i.index+1)){e.ch=i.index+i[0].length;return i}e.ch=i.index+1}}function l(e){for(;;){var i=e.ch?e.text.lastIndexOf(\">\",e.ch-1):-1;if(-1==i){if(t(e))continue;return}if(n(e,i+1)){var r=e.text.lastIndexOf(\"/\",i),o=r>-1&&!/\\S/.test(e.text.slice(r+1,i));e.ch=i+1;return o?\"selfClose\":\"regular\"}e.ch=i}}function E(e,i){for(var r=[];;){var n,o=p(e),t=e.line,a=e.ch-(o?o[0].length:0);if(!o||!(n=s(e)))return;if(\"selfClose\"!=n)if(o[1]){for(var l=r.length-1;l>=0;--l)if(r[l]==o[2]){r.length=l;break}if(0>l&&(!i||i==o[2]))return{tag:o[2],from:c(t,a),to:c(e.line,e.ch)}}else r.push(o[2])}}function u(e,i){for(var r=[];;){var n=l(e);if(!n)return;if(\"selfClose\"!=n){var o=e.line,t=e.ch,s=a(e);if(!s)return;if(s[1])r.push(s[2]);else{for(var p=r.length-1;p>=0;--p)if(r[p]==s[2]){r.length=p;break}if(0>p&&(!i||i==s[2]))return{tag:s[2],from:c(e.line,e.ch),to:c(o,t)}}}else a(e)}}var c=e.Pos,d=\"A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\",N=d+\"-:.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\",I=new RegExp(\"<(/?)([\"+d+\"][\"+N+\"]*)\",\"g\");e.registerHelper(\"fold\",\"xml\",function(e,i){for(var n=new r(e,i.line,0);;){var o,t=p(n);if(!t||n.line!=i.line||!(o=s(n)))return;if(!t[1]&&\"selfClose\"!=o){var i=c(n.line,n.ch),a=E(n,t[2]);return a&&{from:i,to:a.from}}}});e.findMatchingTag=function(e,n,o){var t=new r(e,n.line,n.ch,o);if(-1!=t.text.indexOf(\">\")||-1!=t.text.indexOf(\"<\")){var p=s(t),l=p&&c(t.line,t.ch),d=p&&a(t);if(p&&d&&!(i(t,n)>0)){var N={from:c(t.line,t.ch),to:l,tag:d[2]};if(\"selfClose\"==p)return{open:N,close:null,at:\"open\"};if(d[1])return{open:u(t,d[2]),close:N,at:\"close\"};t=new r(e,l.line,l.ch,o);return{open:N,close:E(t,d[2]),at:\"open\"}}}};e.findEnclosingTag=function(e,i,n){for(var o=new r(e,i.line,i.ch,n);;){var t=u(o);if(!t)break;var s=new r(e,i.line,i.ch,n),a=E(s,t.tag);if(a)return{open:t,close:a}}};e.scanForClosingTag=function(e,i,n,o){var t=new r(e,i.line,i.ch,o?{from:0,to:o}:null);return E(t,n)}})},{codemirror:void 0}],11:[function(i,r,n){(function(o){\"object\"==typeof n&&\"object\"==typeof r?o(function(){try{return i(\"codemirror\")}catch(e){return window.CodeMirror}}()):\"function\"==typeof e&&e.amd?e([\"../../lib/codemirror\"],o):o(CodeMirror)})(function(e){\"use strict\";function i(e,i,r,n){if(e.async){var o=++l;e(i,function(e){l==o&&n(e)},r)}else n(e(i,r))}function r(e,i){this.cm=e;this.options=this.buildOptions(i);this.widget=this.onClose=null}function n(e){return\"string\"==typeof e?e:e.text}function o(e,i){function r(e,r){var o;o=\"string\"!=typeof r?function(e){return r(e,i)}:n.hasOwnProperty(r)?n[r]:r;t[e]=o}var n={Up:function(){i.moveFocus(-1)},Down:function(){i.moveFocus(1)},PageUp:function(){i.moveFocus(-i.menuSize()+1,!0)},PageDown:function(){i.moveFocus(i.menuSize()-1,!0)},Home:function(){i.setFocus(0)},End:function(){i.setFocus(i.length-1)},Enter:i.pick,Tab:i.pick,Esc:i.close},o=e.options.customKeys,t=o?{}:n;if(o)for(var s in o)o.hasOwnProperty(s)&&r(s,o[s]);var a=e.options.extraKeys;if(a)for(var s in a)a.hasOwnProperty(s)&&r(s,a[s]);return t}function t(e,i){for(;i&&i!=e;){if(\"LI\"===i.nodeName.toUpperCase()&&i.parentNode==e)return i;i=i.parentNode}}function s(i,r){this.completion=i;this.data=r;var s=this,l=i.cm,E=this.hints=document.createElement(\"ul\");E.className=\"CodeMirror-hints\";this.selectedHint=r.selectedHint||0;for(var u=r.list,c=0;c<u.length;++c){var d=E.appendChild(document.createElement(\"li\")),N=u[c],I=a+(c!=this.selectedHint?\"\":\" \"+p);null!=N.className&&(I=N.className+\" \"+I);d.className=I;N.render?N.render(d,r,N):d.appendChild(document.createTextNode(N.displayText||n(N)));d.hintId=c}var x=l.cursorCoords(i.options.alignWithWord?r.from:null),m=x.left,L=x.bottom,T=!0;E.style.left=m+\"px\";E.style.top=L+\"px\";var A=window.innerWidth||Math.max(document.body.offsetWidth,document.documentElement.offsetWidth),g=window.innerHeight||Math.max(document.body.offsetHeight,document.documentElement.offsetHeight);(i.options.container||document.body).appendChild(E);var S=E.getBoundingClientRect(),R=S.bottom-g;if(R>0){var v=S.bottom-S.top,h=x.top-(x.bottom-S.top);if(h-v>0){E.style.top=(L=x.top-v)+\"px\";T=!1}else if(v>g){E.style.height=g-5+\"px\";E.style.top=(L=x.bottom-S.top)+\"px\";var C=l.getCursor();if(r.from.ch!=C.ch){x=l.cursorCoords(C);E.style.left=(m=x.left)+\"px\";S=E.getBoundingClientRect()}}}var f=S.right-A;if(f>0){if(S.right-S.left>A){E.style.width=A-5+\"px\";f-=S.right-S.left-A}E.style.left=(m=x.left-f)+\"px\"}l.addKeyMap(this.keyMap=o(i,{moveFocus:function(e,i){s.changeActive(s.selectedHint+e,i)},setFocus:function(e){s.changeActive(e)},menuSize:function(){return s.screenAmount()},length:u.length,close:function(){i.close()},pick:function(){s.pick()},data:r}));if(i.options.closeOnUnfocus){var O;l.on(\"blur\",this.onBlur=function(){O=setTimeout(function(){i.close()},100)});l.on(\"focus\",this.onFocus=function(){clearTimeout(O)})}var y=l.getScrollInfo();l.on(\"scroll\",this.onScroll=function(){var e=l.getScrollInfo(),r=l.getWrapperElement().getBoundingClientRect(),n=L+y.top-e.top,o=n-(window.pageYOffset||(document.documentElement||document.body).scrollTop);T||(o+=E.offsetHeight);if(o<=r.top||o>=r.bottom)return i.close();E.style.top=n+\"px\";E.style.left=m+y.left-e.left+\"px\"});e.on(E,\"dblclick\",function(e){var i=t(E,e.target||e.srcElement);if(i&&null!=i.hintId){s.changeActive(i.hintId);s.pick()}});e.on(E,\"click\",function(e){var r=t(E,e.target||e.srcElement);if(r&&null!=r.hintId){s.changeActive(r.hintId);i.options.completeOnSingleClick&&s.pick()}});e.on(E,\"mousedown\",function(){setTimeout(function(){l.focus()},20)});e.signal(r,\"select\",u[0],E.firstChild);return!0}var a=\"CodeMirror-hint\",p=\"CodeMirror-hint-active\";e.showHint=function(e,i,r){if(!i)return e.showHint(r);r&&r.async&&(i.async=!0);var n={hint:i};if(r)for(var o in r)n[o]=r[o];return e.showHint(n)};var l=0;e.defineExtension(\"showHint\",function(n){if(!(this.listSelections().length>1||this.somethingSelected())){this.state.completionActive&&this.state.completionActive.close();var o=this.state.completionActive=new r(this,n),t=o.options.hint;if(t){e.signal(this,\"startCompletion\",this);return i(t,this,o.options,function(e){o.showHints(e)})}}});r.prototype={close:function(){if(this.active()){this.cm.state.completionActive=null;this.widget&&this.widget.close();this.onClose&&this.onClose();e.signal(this.cm,\"endCompletion\",this.cm)}},active:function(){return this.cm.state.completionActive==this},pick:function(i,r){var o=i.list[r];o.hint?o.hint(this.cm,i,o):this.cm.replaceRange(n(o),o.from||i.from,o.to||i.to,\"complete\");e.signal(i,\"pick\",o);this.close()},showHints:function(e){if(!e||!e.list.length||!this.active())return this.close();this.options.completeSingle&&1==e.list.length?this.pick(e,0):this.showWidget(e);return void 0},showWidget:function(r){function n(){if(!l){l=!0;u.close();u.cm.off(\"cursorActivity\",p);r&&e.signal(r,\"close\")}}function o(){if(!l){e.signal(r,\"update\");i(u.options.hint,u.cm,u.options,t)}}function t(e){r=e;if(!l){if(!r||!r.list.length)return n();u.widget&&u.widget.close();u.widget=new s(u,r)}}function a(){if(E){x(E);E=0}}function p(){a();var e=u.cm.getCursor(),i=u.cm.getLine(e.line);if(e.line!=d.line||i.length-e.ch!=N-d.ch||e.ch<d.ch||u.cm.somethingSelected()||e.ch&&c.test(i.charAt(e.ch-1)))u.close();else{E=I(o);u.widget&&u.widget.close()}}this.widget=new s(this,r);e.signal(r,\"shown\");var l,E=0,u=this,c=this.options.closeCharacters,d=this.cm.getCursor(),N=this.cm.getLine(d.line).length,I=window.requestAnimationFrame||function(e){return setTimeout(e,1e3/60)},x=window.cancelAnimationFrame||clearTimeout;this.cm.on(\"cursorActivity\",p);this.onClose=n},buildOptions:function(e){var i=this.cm.options.hintOptions,r={};for(var n in E)r[n]=E[n];if(i)for(var n in i)void 0!==i[n]&&(r[n]=i[n]);if(e)for(var n in e)void 0!==e[n]&&(r[n]=e[n]);return r}};s.prototype={close:function(){if(this.completion.widget==this){this.completion.widget=null;this.hints.parentNode.removeChild(this.hints);this.completion.cm.removeKeyMap(this.keyMap);var e=this.completion.cm;if(this.completion.options.closeOnUnfocus){e.off(\"blur\",this.onBlur);e.off(\"focus\",this.onFocus)}e.off(\"scroll\",this.onScroll)}},pick:function(){this.completion.pick(this.data,this.selectedHint)},changeActive:function(i,r){i>=this.data.list.length?i=r?this.data.list.length-1:0:0>i&&(i=r?0:this.data.list.length-1);if(this.selectedHint!=i){var n=this.hints.childNodes[this.selectedHint];n.className=n.className.replace(\" \"+p,\"\");n=this.hints.childNodes[this.selectedHint=i];n.className+=\" \"+p;n.offsetTop<this.hints.scrollTop?this.hints.scrollTop=n.offsetTop-3:n.offsetTop+n.offsetHeight>this.hints.scrollTop+this.hints.clientHeight&&(this.hints.scrollTop=n.offsetTop+n.offsetHeight-this.hints.clientHeight+3);e.signal(this.data,\"select\",this.data.list[this.selectedHint],n)}},screenAmount:function(){return Math.floor(this.hints.clientHeight/this.hints.firstChild.offsetHeight)||1;\n\n}};e.registerHelper(\"hint\",\"auto\",function(i,r){var n,o=i.getHelpers(i.getCursor(),\"hint\");if(o.length)for(var t=0;t<o.length;t++){var s=o[t](i,r);if(s&&s.list.length)return s}else if(n=i.getHelper(i.getCursor(),\"hintWords\")){if(n)return e.hint.fromList(i,{words:n})}else if(e.hint.anyword)return e.hint.anyword(i,r)});e.registerHelper(\"hint\",\"fromList\",function(i,r){for(var n=i.getCursor(),o=i.getTokenAt(n),t=[],s=0;s<r.words.length;s++){var a=r.words[s];a.slice(0,o.string.length)==o.string&&t.push(a)}return t.length?{list:t,from:e.Pos(n.line,o.start),to:e.Pos(n.line,o.end)}:void 0});e.commands.autocomplete=e.showHint;var E={hint:e.hint.auto,completeSingle:!0,alignWithWord:!0,closeCharacters:/[\\s()\\[\\]{};:>,]/,closeOnUnfocus:!0,completeOnSingleClick:!1,container:null,customKeys:null,extraKeys:null};e.defineOption(\"hintOptions\",null)})},{codemirror:void 0}],12:[function(i,r,n){(function(o){\"object\"==typeof n&&\"object\"==typeof r?o(function(){try{return i(\"codemirror\")}catch(e){return window.CodeMirror}}()):\"function\"==typeof e&&e.amd?e([\"../../lib/codemirror\"],o):o(CodeMirror)})(function(e){\"use strict\";e.runMode=function(i,r,n,o){var t=e.getMode(e.defaults,r),s=/MSIE \\d/.test(navigator.userAgent),a=s&&(null==document.documentMode||document.documentMode<9);if(1==n.nodeType){var p=o&&o.tabSize||e.defaults.tabSize,l=n,E=0;l.innerHTML=\"\";n=function(e,i){if(\"\\n\"!=e){for(var r=\"\",n=0;;){var o=e.indexOf(\"\t\",n);if(-1==o){r+=e.slice(n);E+=e.length-n;break}E+=o-n;r+=e.slice(n,o);var t=p-E%p;E+=t;for(var s=0;t>s;++s)r+=\" \";n=o+1}if(i){var u=l.appendChild(document.createElement(\"span\"));u.className=\"cm-\"+i.replace(/ +/g,\" cm-\");u.appendChild(document.createTextNode(r))}else l.appendChild(document.createTextNode(r))}else{l.appendChild(document.createTextNode(a?\"\\r\":e));E=0}}}for(var u=e.splitLines(i),c=o&&o.state||e.startState(t),d=0,N=u.length;N>d;++d){d&&n(\"\\n\");var I=new e.StringStream(u[d]);!I.string&&t.blankLine&&t.blankLine(c);for(;!I.eol();){var x=t.token(I,c);n(I.current(),x,d,I.start,c);I.start=I.pos}}}})},{codemirror:void 0}],13:[function(i,r,n){(function(o){\"object\"==typeof n&&\"object\"==typeof r?o(function(){try{return i(\"codemirror\")}catch(e){return window.CodeMirror}}()):\"function\"==typeof e&&e.amd?e([\"../../lib/codemirror\"],o):o(CodeMirror)})(function(e){\"use strict\";function i(e,i,o,t){this.atOccurrence=!1;this.doc=e;null==t&&\"string\"==typeof i&&(t=!1);o=o?e.clipPos(o):n(0,0);this.pos={from:o,to:o};if(\"string\"!=typeof i){i.global||(i=new RegExp(i.source,i.ignoreCase?\"ig\":\"g\"));this.matches=function(r,o){if(r){i.lastIndex=0;for(var t,s,a=e.getLine(o.line).slice(0,o.ch),p=0;;){i.lastIndex=p;var l=i.exec(a);if(!l)break;t=l;s=t.index;p=t.index+(t[0].length||1);if(p==a.length)break}var E=t&&t[0].length||0;E||(0==s&&0==a.length?t=void 0:s!=e.getLine(o.line).length&&E++)}else{i.lastIndex=o.ch;var a=e.getLine(o.line),t=i.exec(a),E=t&&t[0].length||0,s=t&&t.index;s+E==a.length||E||(E=1)}return t&&E?{from:n(o.line,s),to:n(o.line,s+E),match:t}:void 0}}else{var s=i;t&&(i=i.toLowerCase());var a=t?function(e){return e.toLowerCase()}:function(e){return e},p=i.split(\"\\n\");if(1==p.length)this.matches=i.length?function(o,t){if(o){var p=e.getLine(t.line).slice(0,t.ch),l=a(p),E=l.lastIndexOf(i);if(E>-1){E=r(p,l,E);return{from:n(t.line,E),to:n(t.line,E+s.length)}}}else{var p=e.getLine(t.line).slice(t.ch),l=a(p),E=l.indexOf(i);if(E>-1){E=r(p,l,E)+t.ch;return{from:n(t.line,E),to:n(t.line,E+s.length)}}}}:function(){};else{var l=s.split(\"\\n\");this.matches=function(i,r){var o=p.length-1;if(i){if(r.line-(p.length-1)<e.firstLine())return;if(a(e.getLine(r.line).slice(0,l[o].length))!=p[p.length-1])return;for(var t=n(r.line,l[o].length),s=r.line-1,E=o-1;E>=1;--E,--s)if(p[E]!=a(e.getLine(s)))return;var u=e.getLine(s),c=u.length-l[0].length;if(a(u.slice(c))!=p[0])return;return{from:n(s,c),to:t}}if(!(r.line+(p.length-1)>e.lastLine())){var u=e.getLine(r.line),c=u.length-l[0].length;if(a(u.slice(c))==p[0]){for(var d=n(r.line,c),s=r.line+1,E=1;o>E;++E,++s)if(p[E]!=a(e.getLine(s)))return;if(a(e.getLine(s).slice(0,l[o].length))==p[o])return{from:d,to:n(s,l[o].length)}}}}}}}function r(e,i,r){if(e.length==i.length)return r;for(var n=Math.min(r,e.length);;){var o=e.slice(0,n).toLowerCase().length;if(r>o)++n;else{if(!(o>r))return n;--n}}}var n=e.Pos;i.prototype={findNext:function(){return this.find(!1)},findPrevious:function(){return this.find(!0)},find:function(e){function i(e){var i=n(e,0);r.pos={from:i,to:i};r.atOccurrence=!1;return!1}for(var r=this,o=this.doc.clipPos(e?this.pos.from:this.pos.to);;){if(this.pos=this.matches(e,o)){this.atOccurrence=!0;return this.pos.match||!0}if(e){if(!o.line)return i(0);o=n(o.line-1,this.doc.getLine(o.line-1).length)}else{var t=this.doc.lineCount();if(o.line==t-1)return i(t);o=n(o.line+1,0)}}},from:function(){return this.atOccurrence?this.pos.from:void 0},to:function(){return this.atOccurrence?this.pos.to:void 0},replace:function(i){if(this.atOccurrence){var r=e.splitLines(i);this.doc.replaceRange(r,this.pos.from,this.pos.to);this.pos.to=n(this.pos.from.line+r.length-1,r[r.length-1].length+(1==r.length?this.pos.from.ch:0))}}};e.defineExtension(\"getSearchCursor\",function(e,r,n){return new i(this.doc,e,r,n)});e.defineDocExtension(\"getSearchCursor\",function(e,r,n){return new i(this,e,r,n)});e.defineExtension(\"selectMatches\",function(i,r){for(var n,o=[],t=this.getSearchCursor(i,this.getCursor(\"from\"),r);(n=t.findNext())&&!(e.cmpPos(t.to(),this.getCursor(\"to\"))>0);)o.push({anchor:t.from(),head:t.to()});o.length&&this.setSelections(o,0)})})},{codemirror:void 0}],14:[function(i,r,n){(function(i){function n(){try{return p in i&&i[p]}catch(e){return!1}}function o(e){return e.replace(/^d/,\"___$&\").replace(N,\"___\")}var t,s={},a=i.document,p=\"localStorage\",l=\"script\";s.disabled=!1;s.version=\"1.3.17\";s.set=function(e,i){};s.get=function(e,i){};s.has=function(e){return void 0!==s.get(e)};s.remove=function(e){};s.clear=function(){};s.transact=function(e,i,r){if(null==r){r=i;i=null}null==i&&(i={});var n=s.get(e,i);r(n);s.set(e,n)};s.getAll=function(){};s.forEach=function(){};s.serialize=function(e){return JSON.stringify(e)};s.deserialize=function(e){if(\"string\"!=typeof e)return void 0;try{return JSON.parse(e)}catch(i){return e||void 0}};if(n()){t=i[p];s.set=function(e,i){if(void 0===i)return s.remove(e);t.setItem(e,s.serialize(i));return i};s.get=function(e,i){var r=s.deserialize(t.getItem(e));return void 0===r?i:r};s.remove=function(e){t.removeItem(e)};s.clear=function(){t.clear()};s.getAll=function(){var e={};s.forEach(function(i,r){e[i]=r});return e};s.forEach=function(e){for(var i=0;i<t.length;i++){var r=t.key(i);e(r,s.get(r))}}}else if(a.documentElement.addBehavior){var E,u;try{u=new ActiveXObject(\"htmlfile\");u.open();u.write(\"<\"+l+\">document.w=window</\"+l+'><iframe src=\"/favicon.ico\"></iframe>');u.close();E=u.w.frames[0].document;t=E.createElement(\"div\")}catch(c){t=a.createElement(\"div\");E=a.body}var d=function(e){return function(){var i=Array.prototype.slice.call(arguments,0);i.unshift(t);E.appendChild(t);t.addBehavior(\"#default#userData\");t.load(p);var r=e.apply(s,i);E.removeChild(t);return r}},N=new RegExp(\"[!\\\"#$%&'()*+,/\\\\\\\\:;<=>?@[\\\\]^`{|}~]\",\"g\");s.set=d(function(e,i,r){i=o(i);if(void 0===r)return s.remove(i);e.setAttribute(i,s.serialize(r));e.save(p);return r});s.get=d(function(e,i,r){i=o(i);var n=s.deserialize(e.getAttribute(i));return void 0===n?r:n});s.remove=d(function(e,i){i=o(i);e.removeAttribute(i);e.save(p)});s.clear=d(function(e){var i=e.XMLDocument.documentElement.attributes;e.load(p);for(var r,n=0;r=i[n];n++)e.removeAttribute(r.name);e.save(p)});s.getAll=function(e){var i={};s.forEach(function(e,r){i[e]=r});return i};s.forEach=d(function(e,i){for(var r,n=e.XMLDocument.documentElement.attributes,o=0;r=n[o];++o)i(r.name,s.deserialize(e.getAttribute(r.name)))})}try{var I=\"__storejs__\";s.set(I,I);s.get(I)!=I&&(s.disabled=!0);s.remove(I)}catch(c){s.disabled=!0}s.enabled=!s.disabled;\"undefined\"!=typeof r&&r.exports&&this.module!==r?r.exports=s:\"function\"==typeof e&&e.amd?e(s):i.store=s})(Function(\"return this\")())},{}],15:[function(e,i,r){i.exports={name:\"yasgui-utils\",version:\"1.6.0\",description:\"Utils for YASGUI libs\",main:\"src/main.js\",repository:{type:\"git\",url:\"git://github.com/YASGUI/Utils.git\"},licenses:[{type:\"MIT\",url:\"http://yasgui.github.io/license.txt\"}],author:{name:\"Laurens Rietveld\"},maintainers:[{name:\"laurens.rietveld\",email:\"laurens.rietveld@gmail.com\"}],bugs:{url:\"https://github.com/YASGUI/Utils/issues\"},homepage:\"https://github.com/YASGUI/Utils\",dependencies:{store:\"^1.3.14\"},_id:\"yasgui-utils@1.6.0\",dist:{shasum:\"bcb9091109c233e3e82737c94c202e6512389c47\",tarball:\"http://registry.npmjs.org/yasgui-utils/-/yasgui-utils-1.6.0.tgz\"},_from:\"yasgui-utils@>=1.4.1 <2.0.0\",_npmVersion:\"1.4.3\",_npmUser:{name:\"laurens.rietveld\",email:\"laurens.rietveld@gmail.com\"},directories:{},_shasum:\"bcb9091109c233e3e82737c94c202e6512389c47\",_resolved:\"https://registry.npmjs.org/yasgui-utils/-/yasgui-utils-1.6.0.tgz\",readme:\"ERROR: No README data found!\"}},{}],16:[function(e,i,r){window.console=window.console||{log:function(){}};i.exports={storage:e(\"./storage.js\"),svg:e(\"./svg.js\"),version:{\"yasgui-utils\":e(\"../package.json\").version},nestedExists:function(e){for(var i=Array.prototype.slice.call(arguments,1),r=0;r<i.length;r++){if(!e||!e.hasOwnProperty(i[r]))return!1;e=e[i[r]]}return!0}}},{\"../package.json\":15,\"./storage.js\":17,\"./svg.js\":18}],17:[function(e,i,r){var n=e(\"store\"),o={day:function(){return 864e5},month:function(){30*o.day()},year:function(){12*o.month()}},t=i.exports={set:function(e,i,r){if(n.enabled&&e&&void 0!==i){\"string\"==typeof r&&(r=o[r]());i.documentElement&&(i=(new XMLSerializer).serializeToString(i.documentElement));n.set(e,{val:i,exp:r,time:(new Date).getTime()})}},remove:function(e){n.enabled&&e&&n.remove(e)},removeAll:function(e){if(n.enabled&&\"function\"==typeof e)for(var i in n.getAll())e(i,t.get(i))&&t.remove(i)},get:function(e){if(!n.enabled)return null;if(e){var i=n.get(e);return i?i.exp&&(new Date).getTime()-i.time>i.exp?null:i.val:null}return null}}},{store:14}],18:[function(e,i,r){i.exports={draw:function(e,r){if(e){var n=i.exports.getElement(r);n&&(e.append?e.append(n):e.appendChild(n))}},getElement:function(e){if(e&&0==e.indexOf(\"<svg\")){var i=new DOMParser,r=i.parseFromString(e,\"text/xml\"),n=r.documentElement,o=document.createElement(\"div\");o.className=\"svgImg\";o.appendChild(n);return o}return!1}}},{}],19:[function(e,i,r){i.exports={name:\"yasgui-yasqe\",description:\"Yet Another SPARQL Query Editor\",version:\"2.3.7\",main:\"src/main.js\",licenses:[{type:\"MIT\",url:\"http://yasqe.yasgui.org/license.txt\"}],author:\"Laurens Rietveld\",homepage:\"http://yasqe.yasgui.org\",devDependencies:{browserify:\"^6.1.0\",gulp:\"~3.6.0\",\"gulp-bump\":\"^0.1.11\",\"gulp-concat\":\"^2.4.1\",\"gulp-connect\":\"^2.0.5\",\"gulp-embedlr\":\"^0.5.2\",\"gulp-filter\":\"^1.0.2\",\"gulp-git\":\"^0.5.2\",\"gulp-jsvalidate\":\"^0.2.0\",\"gulp-livereload\":\"^1.3.1\",\"gulp-minify-css\":\"0.3.11\",\"gulp-notify\":\"^2.0.1\",\"gulp-rename\":\"^1.2.0\",\"gulp-streamify\":\"0.0.5\",\"gulp-tag-version\":\"^1.1.0\",\"gulp-uglify\":\"^1.0.1\",\"require-dir\":\"^0.1.0\",\"run-sequence\":\"^1.0.1\",\"vinyl-buffer\":\"^1.0.0\",\"vinyl-source-stream\":\"~0.1.1\",watchify:\"^0.6.4\",\"gulp-sourcemaps\":\"^1.2.8\",exorcist:\"^0.1.6\",\"vinyl-transform\":\"0.0.1\",\"gulp-sass\":\"^1.2.2\",\"bootstrap-sass\":\"^3.3.1\",\"browserify-transform-tools\":\"^1.2.1\",\"gulp-cssimport\":\"^1.3.1\"},bugs:\"https://github.com/YASGUI/YASQE/issues/\",keywords:[\"JavaScript\",\"SPARQL\",\"Editor\",\"Semantic Web\",\"Linked Data\"],maintainers:[{name:\"Laurens Rietveld\",email:\"laurens.rietveld@gmail.com\",web:\"http://laurensrietveld.nl\"}],repository:{type:\"git\",url:\"https://github.com/YASGUI/YASQE.git\"},dependencies:{jquery:\"~ 1.11.0\",codemirror:\"^4.7.0\",\"yasgui-utils\":\"^1.4.1\"},optionalShim:{codemirror:{require:\"codemirror\",global:\"CodeMirror\"},jquery:{require:\"jquery\",global:\"jQuery\"},\"../../lib/codemirror\":{require:\"codemirror\",global:\"CodeMirror\"}}}},{}],20:[function(i,r,n){(function(o){\"object\"==typeof n&&\"object\"==typeof r?o(function(){try{return i(\"codemirror\")}catch(e){return window.CodeMirror}}()):\"function\"==typeof e&&e.amd?e([\"codemirror\"],o):o(CodeMirror)})(function(e){function i(e,i){var r=e.getRange(p(i.line,i.ch-1),p(i.line,i.ch+1));return 2==r.length?r:null}function r(i,r,n){var o=i.getLine(r.line),t=i.getTokenAt(r);if(/\\bstring2?\\b/.test(t.type))return!1;var s=new e.StringStream(o.slice(0,r.ch)+n+o.slice(r.ch),4);s.pos=s.start=t.start;for(;;){var a=i.getMode().token(s,t.state);if(s.pos>=r.ch+1)return/\\bstring2?\\b/.test(a)||\"error\"===a;s.start=s.pos}}function n(n){for(var o={name:\"autoCloseBrackets\",Backspace:function(r){if(r.getOption(\"disableInput\"))return e.Pass;for(var o=r.listSelections(),t=0;t<o.length;t++){if(!o[t].empty())return e.Pass;var s=i(r,o[t].head);if(!s||n.indexOf(s)%2!=0)return e.Pass}for(var t=o.length-1;t>=0;t--){var a=o[t].head;r.replaceRange(\"\",p(a.line,a.ch-1),p(a.line,a.ch+1))}}},t=\"\",s=0;s<n.length;s+=2)(function(i,n){t+=n;o[\"'\"+i+\"'\"]=function(o){if(o.getOption(\"disableInput\"))return e.Pass;for(var s,l,E=o.listSelections(),u=0;u<E.length;u++){var c,d=E[u],N=d.head,l=o.getRange(N,p(N.line,N.ch+1));if(d.empty())if(i==n&&l==n)c=o.getRange(N,p(N.line,N.ch+3))==i+i+i?\"skipThree\":\"skip\";else if(i==n&&N.ch>1&&o.getRange(p(N.line,N.ch-2),N)==i+i&&(N.ch<=2||o.getRange(p(N.line,N.ch-3),p(N.line,N.ch-2))!=i))c=\"addFour\";else if('\"'==i||\"'\"==i){if(e.isWordChar(l)||!r(o,N,i))return e.Pass;c=\"both\"}else{if(!(o.getLine(N.line).length==N.ch||t.indexOf(l)>=0||a.test(l)))return e.Pass;c=\"both\"}else c=\"surround\";if(s){if(s!=c)return e.Pass}else s=c}o.operation(function(){if(\"skip\"==s)o.execCommand(\"goCharRight\");else if(\"skipThree\"==s)for(var e=0;3>e;e++)o.execCommand(\"goCharRight\");else if(\"surround\"==s){for(var r=o.getSelections(),e=0;e<r.length;e++)r[e]=i+r[e]+n;o.replaceSelections(r,\"around\")}else if(\"both\"==s){o.replaceSelection(i+n,null);o.execCommand(\"goCharLeft\")}else if(\"addFour\"==s){o.replaceSelection(i+i+i+i,\"before\");o.execCommand(\"goCharRight\")}})};i!=n&&(o[\"'\"+n+\"'\"]=function(i){for(var r=i.listSelections(),o=0;o<r.length;o++){var t=r[o];if(!t.empty()||i.getRange(t.head,p(t.head.line,t.head.ch+1))!=n)return e.Pass}i.execCommand(\"goCharRight\")})})(n.charAt(s),n.charAt(s+1));return o}function o(r){return function(n){if(n.getOption(\"disableInput\"))return e.Pass;for(var o=n.listSelections(),t=0;t<o.length;t++){if(!o[t].empty())return e.Pass;var s=i(n,o[t].head);if(!s||r.indexOf(s)%2!=0)return e.Pass}n.operation(function(){n.replaceSelection(\"\\n\\n\",null);n.execCommand(\"goCharLeft\");o=n.listSelections();for(var e=0;e<o.length;e++){var i=o[e].head.line;n.indentLine(i,null,!0);n.indentLine(i+1,null,!0)}})}}var t=\"()[]{}''\\\"\\\"\",s=\"[]{}\",a=/\\s/,p=e.Pos;e.defineOption(\"autoCloseBrackets\",!1,function(i,r,a){a!=e.Init&&a&&i.removeKeyMap(\"autoCloseBrackets\");if(r){var p=t,l=s;if(\"string\"==typeof r)p=r;else if(\"object\"==typeof r){null!=r.pairs&&(p=r.pairs);null!=r.explode&&(l=r.explode)}var E=n(p);l&&(E.Enter=o(l));i.addKeyMap(E)}})})},{codemirror:void 0}],21:[function(e,i,r){\"use strict\";var n=function(){try{return e(\"jquery\")}catch(i){return window.jQuery}}(),o=e(\"../utils.js\"),t=e(\"yasgui-utils\"),s=e(\"../../lib/trie.js\");i.exports=function(e,i){var r={},p={},l={};i.on(\"cursorActivity\",function(e,i){c(!0)});i.on(\"change\",function(){var e=[];for(var o in r)r[o].is(\":visible\")&&e.push(r[o]);if(e.length>0){var t=n(i.getWrapperElement()).find(\".CodeMirror-vscrollbar\"),s=0;t.is(\":visible\")&&(s=t.outerWidth());e.forEach(function(e){e.css(\"right\",s)})}});var E=function(e,r){l[e.name]=new s;for(var n=0;n<r.length;n++)l[e.name].insert(r[n]);var a=o.getPersistencyId(i,e.persistent);a&&t.storage.set(a,r,\"month\")},u=function(e,r){var n=p[e]=new r(i,e);n.name=e;if(n.bulk){var s=function(e){e&&e instanceof Array&&e.length>0&&E(n,e)};if(n.get instanceof Array)s(n.get);else{var a=null,l=o.getPersistencyId(i,n.persistent);l&&(a=t.storage.get(l));a&&a.length>0?s(a):n.get instanceof Function&&(n.async?n.get(null,s):s(n.get()))}}},c=function(r){if(!i.somethingSelected()){var o=function(n){if(r&&(!n.autoShow||!n.bulk&&n.async))return!1;var o={closeCharacters:/(?=a)b/,completeSingle:!1};!n.bulk&&n.async&&(o.async=!0);{var t=function(e,i){return d(n,i)};e.showHint(i,t,o)}return!0};for(var t in p)if(-1!=n.inArray(t,i.options.autocompleters)){var s=p[t];if(s.isValidCompletionPosition)if(s.isValidCompletionPosition()){if(!s.callbacks||!s.callbacks.validPosition||s.callbacks.validPosition(i,s)!==!1){var a=o(s);if(a)break}}else s.callbacks&&s.callbacks.invalidPosition&&s.callbacks.invalidPosition(i,s)}}},d=function(e,r){var n=function(i){var r=i.autocompletionString||i.string,n=[];if(l[e.name])n=l[e.name].autoComplete(r);else if(\"function\"==typeof e.get&&0==e.async)n=e.get(r);else if(\"object\"==typeof e.get)for(var o=r.length,t=0;t<e.get.length;t++){var s=e.get[t];s.slice(0,o)==r&&n.push(s)}return N(n,e,i)},o=i.getCompleteToken();e.preProcessToken&&(o=e.preProcessToken(o));if(o){if(e.bulk||!e.async)return n(o);var t=function(i){r(N(i,e,o))};e.get(o,t)}},N=function(e,r,n){for(var o=[],t=0;t<e.length;t++){var s=e[t];r.postProcessToken&&(s=r.postProcessToken(n,s));o.push({text:s,displayText:s,hint:a})}var p=i.getCursor(),l={completionToken:n.string,list:o,from:{line:p.line,ch:n.start},to:{line:p.line,ch:n.end}};if(r.callbacks)for(var E in r.callbacks)r.callbacks[E]&&i.on(l,E,r.callbacks[E]);return l};return{init:u,completers:p,notifications:{getEl:function(e){return n(r[e.name])},show:function(e,i){if(!i.autoshow){r[i.name]||(r[i.name]=n(\"<div class='completionNotification'></div>\"));r[i.name].show().text(\"Press \"+(-1!=navigator.userAgent.indexOf(\"Mac OS X\")?\"CMD\":\"CTRL\")+\" - <spacebar> to autocomplete\").appendTo(n(e.getWrapperElement()))}},hide:function(e,i){r[i.name]&&r[i.name].hide()}},autoComplete:c,getTrie:function(e){return\"string\"==typeof e?l[e]:l[e.name]}}};var a=function(e,i,r){r.text!=e.getTokenAt(e.getCursor()).string&&e.replaceRange(r.text,i.from,i.to)}},{\"../../lib/trie.js\":4,\"../utils.js\":35,jquery:void 0,\"yasgui-utils\":16}],22:[function(e,i,r){\"use strict\";(function(){try{return e(\"jquery\")}catch(i){return window.jQuery}})();i.exports=function(r,n){return{isValidCompletionPosition:function(){return i.exports.isValidCompletionPosition(r)},get:function(i,n){return e(\"./utils\").fetchFromLov(r,this,i,n)},preProcessToken:function(e){return i.exports.preProcessToken(r,e)},postProcessToken:function(e,n){return i.exports.postProcessToken(r,e,n)},async:!0,bulk:!1,autoShow:!1,persistent:n,callbacks:{validPosition:r.autocompleters.notifications.show,invalidPosition:r.autocompleters.notifications.hide}}};i.exports.isValidCompletionPosition=function(e){var i=e.getCompleteToken();if(0==i.string.indexOf(\"?\"))return!1;var r=e.getCursor(),n=e.getPreviousNonWsToken(r.line,i);return\"a\"==n.string?!0:\"rdf:type\"==n.string?!0:\"rdfs:domain\"==n.string?!0:\"rdfs:range\"==n.string?!0:!1};i.exports.preProcessToken=function(i,r){return e(\"./utils.js\").preprocessResourceTokenForCompletion(i,r)};i.exports.postProcessToken=function(i,r,n){return e(\"./utils.js\").postprocessResourceTokenForCompletion(i,r,n)}},{\"./utils\":26,\"./utils.js\":26,jquery:void 0}],23:[function(e,i,r){\"use strict\";var n=function(){try{return e(\"jquery\")}catch(i){return window.jQuery}}();i.exports=function(r,n){return{isValidCompletionPosition:function(){return i.exports.isValidCompletionPosition(r)},get:function(i,n){return e(\"./utils\").fetchFromLov(r,this,i,n)},preProcessToken:function(e){return i.exports.preProcessToken(r,e)},postProcessToken:function(e,n){return i.exports.postProcessToken(r,e,n)},async:!0,bulk:!1,autoShow:!1,persistent:n,callbacks:{validPosition:r.autocompleters.notifications.show,invalidPosition:r.autocompleters.notifications.hide}}};i.exports.isValidCompletionPosition=function(e){var i=e.getCompleteToken();if(0==i.string.length)return!1;if(0==i.string.indexOf(\"?\"))return!1;if(n.inArray(\"a\",i.state.possibleCurrent)>=0)return!0;var r=e.getCursor(),o=e.getPreviousNonWsToken(r.line,i);return\"rdfs:subPropertyOf\"==o.string?!0:!1};i.exports.preProcessToken=function(i,r){return e(\"./utils.js\").preprocessResourceTokenForCompletion(i,r)};i.exports.postProcessToken=function(i,r,n){return e(\"./utils.js\").postprocessResourceTokenForCompletion(i,r,n)}},{\"./utils\":26,\"./utils.js\":26,jquery:void 0}],24:[function(e,i,r){\"use strict\";var n=function(){try{return e(\"jquery\")}catch(i){return window.jQuery}}(),o={\"string-2\":\"prefixed\",atom:\"var\"};i.exports=function(e,r){e.on(\"change\",function(){i.exports.appendPrefixIfNeeded(e,r)});return{isValidCompletionPosition:function(){return i.exports.isValidCompletionPosition(e)},get:function(e,i){\"\"!=backendRepositoryID&&n.get(\"repositories/\"+backendRepositoryID+\"/namespaces\",function(e){if(e.results){var r=e.results.bindings.map(function(e){return e.prefix.value+\": <\"+e.namespace.value+\">\"});r.sort();i(r)}},\"json\")},preProcessToken:function(r){return i.exports.preprocessPrefixTokenForCompletion(e,r)},async:!0,bulk:!0,autoShow:!0,persistent:null}};i.exports.isValidCompletionPosition=function(e){var i=e.getCursor(),r=e.getTokenAt(i);if(e.getLine(i.line).length>i.ch)return!1;\"ws\"!=r.type&&(r=e.getCompleteToken());if(0==!r.string.indexOf(\"a\")&&-1==n.inArray(\"PNAME_NS\",r.state.possibleCurrent))return!1;var o=e.getPreviousNonWsToken(i.line,r);return o&&\"PREFIX\"==o.string.toUpperCase()?!0:!1};i.exports.preprocessPrefixTokenForCompletion=function(e,i){var r=e.getPreviousNonWsToken(e.getCursor().line,i);r&&r.string&&\":\"==r.string.slice(-1)&&(i={start:r.start,end:i.end,string:r.string+\" \"+i.string,state:i.state});return i};i.exports.appendPrefixIfNeeded=function(e,i){if(e.autocompleters.getTrie(i)&&e.options.autocompleters&&-1!=e.options.autocompleters.indexOf(i)){var r=e.getCursor(),n=e.getTokenAt(r);if(\"prefixed\"==o[n.type]){var t=n.string.indexOf(\":\");if(-1!==t){var s=e.getPreviousNonWsToken(r.line,n).string.toUpperCase(),a=e.getTokenAt({line:r.line,ch:n.start});if(\"PREFIX\"!=s&&(\"ws\"==a.type||null==a.type)){var p=n.string.substring(0,t+1),l=e.getPrefixesFromQuery();if(null==l[p.slice(0,-1)]){var E=e.autocompleters.getTrie(i).autoComplete(p);E.length>0&&e.addPrefixes(E[0])}}}}}}},{jquery:void 0}],25:[function(e,i,r){i.exports=function(e,i){return{isValidCompletionPosition:function(){var i=e.getTokenAt(e.getCursor());if(\"ws\"!=i.type){i=e.getCompleteToken();if(i.string.length>1)return!0}return!1},get:function(e,i){for(var r=[\"COUNT\",\"SUM\",\"MIN\",\"MAX\",\"AVG\",\"SAMPLE\",\"STR\",\"LANG\",\"LANGMATCHES\",\"DATATYPE\",\"BOUND\",\"IRI\",\"URI\",\"BNODE\",\"RAND\",\"ABS\",\"CEIL\",\"FLOOR\",\"ROUND\",\"CONCAT\",\"SUBSTR\",\"STRLEN\",\"REPLACE\",\"UCASE\",\"LCASE\",\"ENCODE_FOR_URI\",\"CONTAINS\",\"STRSTARTS\",\"STRENDS\",\"STRBEFORE\",\"STRAFTER\",\"YEAR\",\"MONTH\",\"DAY\",\"HOURS\",\"MINUTES\",\"SECONDS\",\"TIMEZONE\",\"TZ\",\"NOW\",\"UUID\",\"STRUUID\",\"MD5\",\"SHA1\",\"SHA256\",\"SHA384\",\"SHA512\",\"COALESCE\",\"IF\",\"STRLANG\",\"STRDT\",\"sameTerm\",\"isIRI\",\"isURI\",\"isBLANK\",\"isLITERAL\",\"isNUMERIC\",\"REGEX\",\"EXISTS\",\"FILTER\"],n=[],o=0;o<r.length;o++){var t=r[o],s=t.toLowerCase(),a=e.toLowerCase();0===s.indexOf(a)&&n.push(t+\"(\")}n.sort();return n},preProcessToken:null,postProcessToken:null,async:!1,bulk:!1,autoShow:!0,persistent:null,handlers:{validPosition:null,invalidPosition:null,shown:null,select:null,pick:null,close:null}}}},{}],26:[function(e,i,r){\"use strict\";var n=function(){try{return e(\"jquery\")}catch(i){return window.jQuery}}(),o=(e(\"./utils.js\"),e(\"yasgui-utils\")),t=function(e,i){var r=e.getPrefixesFromQuery();if(0==!i.string.indexOf(\"<\")){i.tokenPrefix=i.string.substring(0,i.string.indexOf(\":\")+1);null!=r[i.tokenPrefix.slice(0,-1)]&&(i.tokenPrefixUri=r[i.tokenPrefix.slice(0,-1)])}i.autocompletionString=i.string.trim();if(0==!i.string.indexOf(\"<\")&&i.string.indexOf(\":\")>-1)for(var n in r)if(0==i.string.indexOf(n)){i.autocompletionString=r[n];i.autocompletionString+=i.string.substring(n.length+1);break}0==i.autocompletionString.indexOf(\"<\")&&(i.autocompletionString=i.autocompletionString.substring(1));-1!==i.autocompletionString.indexOf(\">\",i.length-1)&&(i.autocompletionString=i.autocompletionString.substring(0,i.autocompletionString.length-1));return i},s=function(e,i,r){r=i.tokenPrefix&&i.autocompletionString&&i.tokenPrefixUri?i.tokenPrefix+r.substring(i.tokenPrefixUri.length):\"<\"+r+\">\";return r},a=function(i,r,t,s){if(!t||!t.string||0==t.string.trim().length){i.autocompleters.notifications.getEl(r).empty().append(\"Nothing to autocomplete yet!\");return!1}var a=50,p={q:t.autocompletionString,page:1};p.type=\"classes\"==r.name?\"class\":\"property\";var l=[],E=\"\",u=function(){E=\"http://lov.okfn.org/dataset/lov/api/v2/autocomplete/terms?\"+n.param(p)};u();var c=function(){p.page++;u()},d=function(){n.get(E,function(e){for(var o=0;o<e.results.length;o++)l.push(n.isArray(e.results[o].uri)&&e.results[o].uri.length>0?e.results[o].uri[0]:e.results[o].uri);if(l.length<e.total_results&&l.length<a){c();d()}else{l.length>0?i.autocompleters.notifications.hide(i,r):i.autocompleters.notifications.getEl(r).text(\"0 matches found...\");s(l)}}).fail(function(e,n,o){i.autocompleters.notifications.getEl(r).empty().append(\"Failed fetching suggestions..\")})};i.autocompleters.notifications.getEl(r).empty().append(n(\"<span>Fetchting autocompletions &nbsp;</span>\")).append(n(o.svg.getElement(e(\"../imgs.js\").loader)).addClass(\"notificationLoader\"));d()};i.exports={fetchFromLov:a,preprocessResourceTokenForCompletion:t,postprocessResourceTokenForCompletion:s}},{\"../imgs.js\":29,\"./utils.js\":26,jquery:void 0,\"yasgui-utils\":16}],27:[function(e,i,r){\"use strict\";var n=function(){try{return e(\"jquery\")}catch(i){return window.jQuery}}();i.exports=function(e){return{isValidCompletionPosition:function(){var i=e.getTokenAt(e.getCursor());if(\"ws\"!=i.type){i=e.getCompleteToken(i);if(i&&0==i.string.indexOf(\"?\"))return!0}return!1},get:function(i){if(0==i.trim().length)return[];var r={};n(e.getWrapperElement()).find(\".cm-atom\").each(function(){var e=this.innerHTML;if(0==e.indexOf(\"?\")){var o=n(this).next(),t=o.attr(\"class\");t&&o.attr(\"class\").indexOf(\"cm-atom\")>=0&&(e+=o.text());if(e.length<=1)return;if(0!==e.indexOf(i))return;if(e==i)return;r[e]=!0}});var o=[];for(var t in r)o.push(t);o.sort();return o},async:!1,bulk:!1,autoShow:!0}}},{jquery:void 0}],28:[function(e,i,r){var n=function(){try{return e(\"jquery\")}catch(i){return window.jQuery}}(),o=e(\"./main.js\");o.defaults=n.extend(!0,{},o.defaults,{mode:\"sparql11\",value:\"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\\nSELECT * WHERE {\\n  ?sub ?pred ?obj .\\n} \\nLIMIT 10\",highlightSelectionMatches:{showToken:/\\w/},tabMode:\"indent\",autoCloseBrackets:!0,lineNumbers:!0,lineWrapping:!0,foldGutter:{rangeFinder:o.fold.brace},gutters:[\"gutterErrorBar\",\"CodeMirror-linenumbers\",\"CodeMirror-foldgutter\"],matchBrackets:!0,fixedGutter:!0,syntaxErrorCheck:!0,extraKeys:{\"Ctrl-Space\":o.autoComplete,\"Cmd-Space\":o.autoComplete,\"Ctrl-D\":o.deleteLine,\"Ctrl-K\":o.deleteLine,\"Cmd-D\":o.deleteLine,\"Cmd-K\":o.deleteLine,\"Ctrl-/\":o.commentLines,\"Cmd-/\":o.commentLines,\"Ctrl-Alt-Down\":o.copyLineDown,\"Ctrl-Alt-Up\":o.copyLineUp,\"Cmd-Alt-Down\":o.copyLineDown,\"Cmd-Alt-Up\":o.copyLineUp,\"Shift-Ctrl-F\":o.doAutoFormat,\"Shift-Cmd-F\":o.doAutoFormat,\"Ctrl-]\":o.indentMore,\"Cmd-]\":o.indentMore,\"Ctrl-[\":o.indentLess,\"Cmd-[\":o.indentLess,\"Ctrl-S\":o.storeQuery,\"Cmd-S\":o.storeQuery,\"Ctrl-Enter\":o.executeQuery,\"Cmd-Enter\":o.executeQuery,F11:function(e){e.setOption(\"fullScreen\",!e.getOption(\"fullScreen\"))},Esc:function(e){e.getOption(\"fullScreen\")&&e.setOption(\"fullScreen\",!1)}},cursorHeight:.9,createShareLink:o.createShareLink,consumeShareLink:o.consumeShareLink,persistent:function(e){return\"yasqe_\"+n(e.getWrapperElement()).closest(\"[id]\").attr(\"id\")+\"_queryVal\"},sparql:{showQueryButton:!1,endpoint:\"http://dbpedia.org/sparql\",requestMethod:\"POST\",acceptHeaderGraph:\"text/turtle,*/*;q=0.9\",acceptHeaderSelect:\"application/sparql-results+json,*/*;q=0.9\",acceptHeaderUpdate:\"text/plain,*/*;q=0.9\",namedGraphs:[],defaultGraphs:[],args:[],headers:{},callbacks:{beforeSend:null,complete:null,error:null,success:null},handlers:{}}})},{\"./main.js\":30,jquery:void 0}],29:[function(e,i,r){\"use strict\";i.exports={loader:'<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\" width=\"100%\" height=\"100%\" fill=\"black\">  <circle cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(45 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.125s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(90 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.25s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(135 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.375s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(180 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.5s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(225 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.625s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(270 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.75s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(315 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.875s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(180 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.5s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle></svg>',query:'<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" x=\"0px\" y=\"0px\" width=\"100%\" height=\"100%\" viewBox=\"0 0 80 80\" enable-background=\"new 0 0 80 80\" xml:space=\"preserve\"><g ></g><g >\t<path d=\"M64.622,2.411H14.995c-6.627,0-12,5.373-12,12v49.897c0,6.627,5.373,12,12,12h49.627c6.627,0,12-5.373,12-12V14.411   C76.622,7.783,71.249,2.411,64.622,2.411z M24.125,63.906V15.093L61,39.168L24.125,63.906z\"/></g></svg>',queryInvalid:'<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"   x=\"0px\"   y=\"0px\"   width=\"100%\"   height=\"100%\"   viewBox=\"0 0 73.627 73.897\"   enable-background=\"new 0 0 80 80\"   xml:space=\"preserve\"      inkscape:version=\"0.48.4 r9939\"   sodipodi:docname=\"warning.svg\"><metadata     ><rdf:RDF><cc:Work         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /></cc:Work></rdf:RDF></metadata><defs      /><sodipodi:namedview     pagecolor=\"#ffffff\"     bordercolor=\"#666666\"     borderopacity=\"1\"     objecttolerance=\"10\"     gridtolerance=\"10\"     guidetolerance=\"10\"     inkscape:pageopacity=\"0\"     inkscape:pageshadow=\"2\"     inkscape:window-width=\"1855\"     inkscape:window-height=\"1056\"          showgrid=\"false\"     inkscape:zoom=\"3.1936344\"     inkscape:cx=\"36.8135\"     inkscape:cy=\"36.9485\"     inkscape:window-x=\"2625\"     inkscape:window-y=\"24\"     inkscape:window-maximized=\"1\"     inkscape:current-layer=\"svg2\" /><g     transform=\"translate(-2.995,-2.411)\"      /><g     transform=\"translate(-2.995,-2.411)\"     ><path       d=\"M 64.622,2.411 H 14.995 c -6.627,0 -12,5.373 -12,12 v 49.897 c 0,6.627 5.373,12 12,12 h 49.627 c 6.627,0 12,-5.373 12,-12 V 14.411 c 0,-6.628 -5.373,-12 -12,-12 z M 24.125,63.906 V 15.093 L 61,39.168 24.125,63.906 z\"       inkscape:connector-curvature=\"0\"        /></g><path     d=\"M 66.129381,65.903784 H 49.769875 c -1.64721,0 -2.889385,-0.581146 -3.498678,-1.63595 -0.609293,-1.055608 -0.491079,-2.422161 0.332391,-3.848223 l 8.179753,-14.167069 c 0.822934,-1.42633 1.9477,-2.211737 3.166018,-2.211737 1.218319,0 2.343086,0.785407 3.166019,2.211737 l 8.179751,14.167069 c 0.823472,1.426062 0.941686,2.792615 0.33239,3.848223 -0.609023,1.054804 -1.851197,1.63595 -3.498138,1.63595 z M 59.618815,60.91766 c 0,-0.850276 -0.68944,-1.539719 -1.539717,-1.539719 -0.850276,0 -1.539718,0.689443 -1.539718,1.539719 0,0.850277 0.689442,1.539718 1.539718,1.539718 0.850277,0 1.539717,-0.689441 1.539717,-1.539718 z m 0.04155,-9.265919 c 0,-0.873061 -0.707939,-1.580998 -1.580999,-1.580998 -0.873061,0 -1.580999,0.707937 -1.580999,1.580998 l 0.373403,5.610965 h 0.0051 c 0.05415,0.619747 0.568548,1.10761 1.202504,1.10761 0.586239,0 1.075443,-0.415756 1.188563,-0.968489 0.0092,-0.04476 0.0099,-0.09248 0.01392,-0.138854 h 0.01072 l 0.367776,-5.611232 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#aa8800\" /></svg>',\ndownload:'<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" baseProfile=\"tiny\" x=\"0px\" y=\"0px\" width=\"100%\" height=\"100%\" viewBox=\"0 0 100 100\" xml:space=\"preserve\"><g ></g><g >\t<path fill-rule=\"evenodd\" fill=\"#000000\" d=\"M88,84v-2c0-2.961-0.859-4-4-4H16c-2.961,0-4,0.98-4,4v2c0,3.102,1.039,4,4,4h68   C87.02,88,88,87.039,88,84z M58,12H42c-5,0-6,0.941-6,6v22H16l34,34l34-34H64V18C64,12.941,62.939,12,58,12z\"/></g></svg>',share:'<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\"  x=\"0px\" y=\"0px\" width=\"100%\" height=\"100%\" viewBox=\"0 0 100 100\" style=\"enable-background:new 0 0 100 100;\" xml:space=\"preserve\"><path d=\"M36.764,50c0,0.308-0.07,0.598-0.088,0.905l32.247,16.119c2.76-2.338,6.293-3.797,10.195-3.797  C87.89,63.228,95,70.338,95,79.109C95,87.89,87.89,95,79.118,95c-8.78,0-15.882-7.11-15.882-15.891c0-0.316,0.07-0.598,0.088-0.905  L31.077,62.085c-2.769,2.329-6.293,3.788-10.195,3.788C12.11,65.873,5,58.771,5,50c0-8.78,7.11-15.891,15.882-15.891  c3.902,0,7.427,1.468,10.195,3.797l32.247-16.119c-0.018-0.308-0.088-0.598-0.088-0.914C63.236,12.11,70.338,5,79.118,5  C87.89,5,95,12.11,95,20.873c0,8.78-7.11,15.891-15.882,15.891c-3.911,0-7.436-1.468-10.195-3.806L36.676,49.086  C36.693,49.394,36.764,49.684,36.764,50z\"/></svg>',warning:'<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"   x=\"0px\"   y=\"0px\"   viewBox=\"0 0 66.399998 66.399998\"   enable-background=\"new 0 0 69.3 69.3\"   xml:space=\"preserve\"   height=\"100%\"   width=\"100%\"   inkscape:version=\"0.48.4 r9939\"   ><g      transform=\"translate(-1.5,-1.5)\"     style=\"fill:#ff0000\"><path       d=\"M 34.7,1.5 C 16.4,1.5 1.5,16.4 1.5,34.7 1.5,53 16.4,67.9 34.7,67.9 53,67.9 67.9,53 67.9,34.7 67.9,16.4 53,1.5 34.7,1.5 z m 0,59.4 C 20.2,60.9 8.5,49.1 8.5,34.7 8.5,20.2 20.3,8.5 34.7,8.5 c 14.4,0 26.2,11.8 26.2,26.2 0,14.4 -11.8,26.2 -26.2,26.2 z\"      inkscape:connector-curvature=\"0\"       style=\"fill:#ff0000\" /><path       d=\"m 34.6,47.1 c -1.4,0 -2.5,0.5 -3.5,1.5 -0.9,1 -1.4,2.2 -1.4,3.6 0,1.6 0.5,2.8 1.5,3.8 1,0.9 2.1,1.3 3.4,1.3 1.3,0 2.4,-0.5 3.4,-1.4 1,-0.9 1.5,-2.2 1.5,-3.7 0,-1.4 -0.5,-2.6 -1.4,-3.6 -0.9,-1 -2.1,-1.5 -3.5,-1.5 z\"       inkscape:connector-curvature=\"0\"       style=\"fill:#ff0000\" /><path       d=\"m 34.8,13.9 c -1.5,0 -2.8,0.5 -3.7,1.6 -0.9,1 -1.4,2.4 -1.4,4.2 0,1.1 0.1,2.9 0.2,5.6 l 0.8,13.1 c 0.2,1.8 0.4,3.2 0.9,4.1 0.5,1.2 1.5,1.8 2.9,1.8 1.3,0 2.3,-0.7 2.9,-1.9 0.5,-1 0.7,-2.3 0.9,-4 L 39.4,25 c 0.1,-1.3 0.2,-2.5 0.2,-3.8 0,-2.2 -0.3,-3.9 -0.8,-5.1 -0.5,-1 -1.6,-2.2 -4,-2.2 z\"       inkscape:connector-curvature=\"0\"       style=\"fill:#ff0000\" /></g></svg>',fullscreen:'<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"      x=\"0px\"   y=\"0px\"   width=\"100%\"   height=\"100%\"   viewBox=\"5 -10 74.074074 100\"   enable-background=\"new 0 0 100 100\"   xml:space=\"preserve\"   inkscape:version=\"0.48.4 r9939\"   sodipodi:docname=\"noun_2186_cc.svg\"><metadata     ><rdf:RDF><cc:Work         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /></cc:Work></rdf:RDF></metadata><defs      /><sodipodi:namedview     pagecolor=\"#ffffff\"     bordercolor=\"#666666\"     borderopacity=\"1\"     objecttolerance=\"10\"     gridtolerance=\"10\"     guidetolerance=\"10\"     inkscape:pageopacity=\"0\"     inkscape:pageshadow=\"2\"     inkscape:window-width=\"640\"     inkscape:window-height=\"480\"          showgrid=\"false\"     fit-margin-top=\"0\"     fit-margin-left=\"0\"     fit-margin-right=\"0\"     fit-margin-bottom=\"0\"     inkscape:zoom=\"2.36\"     inkscape:cx=\"44.101509\"     inkscape:cy=\"31.481481\"     inkscape:window-x=\"65\"     inkscape:window-y=\"24\"     inkscape:window-maximized=\"0\"     inkscape:current-layer=\"Layer_1\" /><path     d=\"m -7.962963,-10 v 38.889 l 16.667,-16.667 16.667,16.667 5.555,-5.555 -16.667,-16.667 16.667,-16.667 h -38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 92.037037,-10 v 38.889 l -16.667,-16.667 -16.666,16.667 -5.556,-5.555 16.666,-16.667 -16.666,-16.667 h 38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"M -7.962963,90 V 51.111 l 16.667,16.666 16.667,-16.666 5.555,5.556 -16.667,16.666 16.667,16.667 h -38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"M 92.037037,90 V 51.111 l -16.667,16.666 -16.666,-16.666 -5.556,5.556 16.666,16.666 -16.666,16.667 h 38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /></svg>',smallscreen:'<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"      x=\"0px\"   y=\"0px\"   width=\"100%\"   height=\"100%\"   viewBox=\"5 -10 74.074074 100\"   enable-background=\"new 0 0 100 100\"   xml:space=\"preserve\"   inkscape:version=\"0.48.4 r9939\"   sodipodi:docname=\"noun_2186_cc.svg\"><metadata     ><rdf:RDF><cc:Work         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /></cc:Work></rdf:RDF></metadata><defs      /><sodipodi:namedview     pagecolor=\"#ffffff\"     bordercolor=\"#666666\"     borderopacity=\"1\"     objecttolerance=\"10\"     gridtolerance=\"10\"     guidetolerance=\"10\"     inkscape:pageopacity=\"0\"     inkscape:pageshadow=\"2\"     inkscape:window-width=\"1855\"     inkscape:window-height=\"1056\"          showgrid=\"false\"     fit-margin-top=\"0\"     fit-margin-left=\"0\"     fit-margin-right=\"0\"     fit-margin-bottom=\"0\"     inkscape:zoom=\"2.36\"     inkscape:cx=\"44.101509\"     inkscape:cy=\"31.481481\"     inkscape:window-x=\"65\"     inkscape:window-y=\"24\"     inkscape:window-maximized=\"1\"     inkscape:current-layer=\"Layer_1\" /><path     d=\"m 30.926037,28.889 0,-38.889 -16.667,16.667 -16.667,-16.667 -5.555,5.555 16.667,16.667 -16.667,16.667 38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 53.148037,28.889 0,-38.889 16.667,16.667 16.666,-16.667 5.556,5.555 -16.666,16.667 16.666,16.667 -38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 30.926037,51.111 0,38.889 -16.667,-16.666 -16.667,16.666 -5.555,-5.556 16.667,-16.666 -16.667,-16.667 38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 53.148037,51.111 0,38.889 16.667,-16.666 16.666,16.666 5.556,-5.556 -16.666,-16.666 16.666,-16.667 -38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /></svg>'}},{}],30:[function(e,i,r){\"use strict\";window.console=window.console||{log:function(){}};var n=function(){try{return e(\"jquery\")}catch(i){return window.jQuery}}(),o=function(){try{return e(\"codemirror\")}catch(i){return window.CodeMirror}}(),t=e(\"./utils.js\"),s=e(\"yasgui-utils\"),a=e(\"./imgs.js\");e(\"../lib/deparam.js\");e(\"codemirror/addon/fold/foldcode.js\");e(\"codemirror/addon/fold/foldgutter.js\");e(\"codemirror/addon/fold/xml-fold.js\");e(\"codemirror/addon/fold/brace-fold.js\");e(\"codemirror/addon/hint/show-hint.js\");e(\"codemirror/addon/search/searchcursor.js\");e(\"./addon/edit/closebrackets.js\");e(\"codemirror/addon/edit/matchbrackets.js\");e(\"codemirror/addon/runmode/runmode.js\");e(\"codemirror/addon/display/fullscreen.js\");e(\"../lib/flint.js\");var p=i.exports=function(e,i){var r=n(\"<div>\",{\"class\":\"yasqe\"}).appendTo(n(e));i=l(i);var t=E(o(r[0],i));d(t);return t},l=function(e){var i=n.extend(!0,{},p.defaults,e);return i},E=function(i){i.autocompleters=e(\"./autocompleters/autocompleterBase.js\")(p,i);i.options.autocompleters&&i.options.autocompleters.forEach(function(e){p.Autocompleters[e]&&i.autocompleters.init(e,p.Autocompleters[e])});i.getCompleteToken=function(r,n){return e(\"./tokenUtils.js\").getCompleteToken(i,r,n)};i.getPreviousNonWsToken=function(r,n){return e(\"./tokenUtils.js\").getPreviousNonWsToken(i,r,n)};i.getNextNonWsToken=function(r,n){return e(\"./tokenUtils.js\").getNextNonWsToken(i,r,n)};i.query=function(e){p.executeQuery(i,e)};i.getUrlArguments=function(e){return p.getUrlArguments(i,e)};i.getPrefixesFromQuery=function(){return e(\"./prefixUtils.js\").getPrefixesFromQuery(i)};i.addPrefixes=function(r){return e(\"./prefixUtils.js\").addPrefixes(i,r)};i.removePrefixes=function(r){return e(\"./prefixUtils.js\").removePrefixes(i,r)};i.getValueWithoutComments=function(){var e=\"\";p.runMode(i.getValue(),\"sparql11\",function(i,r){\"comment\"!=r&&(e+=i)});return e};i.getQueryType=function(){return i.queryType};i.getQueryMode=function(){var e=i.getQueryType();return\"INSERT\"==e||\"DELETE\"==e||\"LOAD\"==e||\"CLEAR\"==e||\"CREATE\"==e||\"DROP\"==e||\"COPY\"==e||\"MOVE\"==e||\"ADD\"==e?\"update\":\"query\"};i.setCheckSyntaxErrors=function(e){i.options.syntaxErrorCheck=e;I(i)};i.enableCompleter=function(e){u(i.options,e);p.Autocompleters[e]&&i.autocompleters.init(e,p.Autocompleters[e])};i.disableCompleter=function(e){c(i.options,e)};return i},u=function(e,i){e.autocompleters||(e.autocompleters=[]);e.autocompleters.push(i)},c=function(e,i){if(\"object\"==typeof e.autocompleters){var r=n.inArray(i,e.autocompleters);if(r>=0){e.autocompleters.splice(r,1);c(e,i)}}},d=function(e){var i=t.getPersistencyId(e,e.options.persistent);if(i){var r=s.storage.get(i);r&&e.setValue(r)}p.drawButtons(e);e.on(\"blur\",function(e,i){p.storeQuery(e)});e.on(\"change\",function(e,i){I(e);p.updateQueryButton(e);p.positionButtons(e)});e.on(\"changes\",function(){I(e);p.updateQueryButton(e);p.positionButtons(e)});e.on(\"cursorActivity\",function(e,i){N(e)});e.prevQueryValid=!1;I(e);p.positionButtons(e);if(e.options.consumeShareLink){var o=n.deparam(window.location.search.substring(1));e.options.consumeShareLink(e,o)}},N=function(e){e.cursor=n(\".CodeMirror-cursor\");e.buttons&&e.buttons.is(\":visible\")&&e.cursor.length>0&&(t.elementsOverlap(e.cursor,e.buttons)?e.buttons.find(\"svg\").attr(\"opacity\",\"0.2\"):e.buttons.find(\"svg\").attr(\"opacity\",\"1.0\"))},I=function(i,r){i.queryValid=!0;i.clearGutter(\"gutterErrorBar\");for(var o=null,t=0;t<i.lineCount();++t){var p=!1;i.prevQueryValid||(p=!0);var l=i.getTokenAt({line:t,ch:i.getLine(t).length},p),o=l.state;i.queryType=o.queryType;if(0==o.OK){if(!i.options.syntaxErrorCheck){n(i.getWrapperElement).find(\".sp-error\").css(\"color\",\"black\");return}var E=s.svg.getElement(a.warning);o.possibleCurrent&&o.possibleCurrent.length>0&&e(\"./tooltip\")(i,E,function(){var e=[];o.possibleCurrent.forEach(function(i){e.push(\"<strong style='text-decoration:underline'>\"+n(\"<div/>\").text(i).html()+\"</strong>\")});return\"This line is invalid. Expected: \"+e.join(\", \")});E.style.marginTop=\"2px\";E.style.marginLeft=\"2px\";E.className=\"parseErrorIcon\";i.setGutterMarker(t,\"gutterErrorBar\",E);i.queryValid=!1;break}}i.prevQueryValid=i.queryValid;if(r&&null!=o&&void 0!=o.stack){var u=o.stack,c=o.stack.length;c>1?i.queryValid=!1:1==c&&\"solutionModifier\"!=u[0]&&\"?limitOffsetClauses\"!=u[0]&&\"?offsetClause\"!=u[0]&&(i.queryValid=!1)}};n.extend(p,o);p.Autocompleters={};p.registerAutocompleter=function(e,i){p.Autocompleters[e]=i;u(p.defaults,e)};p.autoComplete=function(e){e.autocompleters.autoComplete(!1)};p.registerAutocompleter(\"sesame-prefixes\",e(\"./autocompleters/sesame-prefixes.js\"));p.registerAutocompleter(\"properties\",e(\"./autocompleters/properties.js\"));p.registerAutocompleter(\"classes\",e(\"./autocompleters/classes.js\"));p.registerAutocompleter(\"standard\",e(\"./autocompleters/standard.js\"));p.registerAutocompleter(\"variables\",e(\"./autocompleters/variables.js\"));p.positionButtons=function(e){var i=n(e.getWrapperElement()).find(\".CodeMirror-vscrollbar\"),r=0;i.is(\":visible\")&&(r=i.outerWidth());e.buttons.is(\":visible\")&&e.buttons.css(\"right\",r+6)};p.createShareLink=function(e){var i=n.deparam(window.location.search.substring(1));i.query=e.getValue();return i};p.consumeShareLink=function(e,i){i.query&&e.setValue(i.query)};p.drawButtons=function(e){e.buttons=n(\"<div class='yasqe_buttons'></div>\").appendTo(n(e.getWrapperElement()));if(e.options.createShareLink){var i=n(s.svg.getElement(a.share));i.click(function(r){r.stopPropagation();var o=n(\"<div class='yasqe_sharePopup'></div>\").appendTo(e.buttons);n(\"html\").click(function(){o&&o.remove()});o.click(function(e){e.stopPropagation()});var t=n(\"<textarea></textarea>\").val(location.protocol+\"//\"+location.host+location.pathname+\"?\"+n.param(e.options.createShareLink(e)));t.focus(function(){var e=n(this);e.select();e.mouseup(function(){e.unbind(\"mouseup\");return!1})});o.empty().append(t);var s=i.position();o.css(\"top\",s.top+i.outerHeight()+\"px\").css(\"left\",s.left+i.outerWidth()-o.outerWidth()+\"px\")}).addClass(\"yasqe_share\").attr(\"title\",\"Share your query\").appendTo(e.buttons)}var r=n(\"<div>\",{\"class\":\"fullscreenToggleBtns\"}).append(n(s.svg.getElement(a.fullscreen)).addClass(\"yasqe_fullscreenBtn\").attr(\"title\",\"Set editor full screen\").click(function(){e.setOption(\"fullScreen\",!0)})).append(n(s.svg.getElement(a.smallscreen)).addClass(\"yasqe_smallscreenBtn\").attr(\"title\",\"Set editor to normale size\").click(function(){e.setOption(\"fullScreen\",!1)}));e.buttons.append(r);if(e.options.sparql.showQueryButton){n(\"<div>\",{\"class\":\"yasqe_queryButton\"}).click(function(){if(n(this).hasClass(\"query_busy\")){e.xhr&&e.xhr.abort();p.updateQueryButton(e)}else e.query()}).appendTo(e.buttons);p.updateQueryButton(e)}};var x={busy:\"loader\",valid:\"query\",error:\"queryInvalid\"};p.updateQueryButton=function(e,i){var r=n(e.getWrapperElement()).find(\".yasqe_queryButton\");if(0!=r.length){if(!i){i=\"valid\";e.queryValid===!1&&(i=\"error\")}if(i!=e.queryStatus&&(\"busy\"==i||\"valid\"==i||\"error\"==i)){r.empty().removeClass(function(e,i){return i.split(\" \").filter(function(e){return 0==e.indexOf(\"query_\")}).join(\" \")}).addClass(\"query_\"+i);s.svg.draw(r,a[x[i]]);e.queryStatus=i}}};p.fromTextArea=function(e,i){i=l(i);var r=(n(\"<div>\",{\"class\":\"yasqe\"}).insertBefore(n(e)).append(n(e)),E(o.fromTextArea(e,i)));d(r);return r};p.storeQuery=function(e){var i=t.getPersistencyId(e,e.options.persistent);i&&s.storage.set(i,e.getValue(),\"month\")};p.commentLines=function(e){for(var i=e.getCursor(!0).line,r=e.getCursor(!1).line,n=Math.min(i,r),o=Math.max(i,r),t=!0,s=n;o>=s;s++){var a=e.getLine(s);if(0==a.length||\"#\"!=a.substring(0,1)){t=!1;break}}for(var s=n;o>=s;s++)t?e.replaceRange(\"\",{line:s,ch:0},{line:s,ch:1}):e.replaceRange(\"#\",{line:s,ch:0})};p.copyLineUp=function(e){var i=e.getCursor(),r=e.lineCount();e.replaceRange(\"\\n\",{line:r-1,ch:e.getLine(r-1).length});for(var n=r;n>i.line;n--){var o=e.getLine(n-1);e.replaceRange(o,{line:n,ch:0},{line:n,ch:e.getLine(n).length})}};p.copyLineDown=function(e){p.copyLineUp(e);var i=e.getCursor();i.line++;e.setCursor(i)};p.doAutoFormat=function(e){if(e.somethingSelected()){var i={line:e.getCursor(!1).line,ch:e.getSelection().length};m(e,e.getCursor(!0),i)}else{var r=e.lineCount(),n=e.getTextArea().value.length;m(e,{line:0,ch:0},{line:r,ch:n})}};var m=function(e,i,r){var n=e.indexFromPos(i),o=e.indexFromPos(r),t=L(e.getValue(),n,o);e.operation(function(){e.replaceRange(t,i,r);for(var o=e.posFromIndex(n).line,s=e.posFromIndex(n+t.length).line,a=o;s>=a;a++)e.indentLine(a,\"smart\")})},L=function(e,i,r){e=e.substring(i,r);var t=[[\"keyword\",\"ws\",\"prefixed\",\"ws\",\"uri\"],[\"keyword\",\"ws\",\"uri\"]],s=[\"{\",\".\",\";\"],a=[\"}\"],p=function(e,i){for(var r=0;r<t.length;r++)if(u.valueOf().toString()==t[r].valueOf().toString())return 1;for(var r=0;r<s.length;r++)if(e==s[r])return 1;for(var r=0;r<a.length;r++)if(\"\"!=n.trim(E)&&e==a[r])return-1;return 0},l=\"\",E=\"\",u=[];o.runMode(e,\"sparql11\",function(e,i){u.push(i);var r=p(e,i);if(0!=r){if(1==r){l+=e+\"\\n\";E=\"\"}else{l+=\"\\n\"+e;E=e}u=[]}else{E+=e;l+=e}1==u.length&&\"sp-ws\"==u[0]&&(u=[])});return n.trim(l.replace(/\\n\\s*\\n/g,\"\\n\"))};e(\"./sparql.js\"),e(\"./defaults.js\");p.version={CodeMirror:o.version,YASQE:e(\"../package.json\").version,jquery:n.fn.jquery,\"yasgui-utils\":s.version}},{\"../lib/deparam.js\":2,\"../lib/flint.js\":3,\"../package.json\":19,\"./addon/edit/closebrackets.js\":20,\"./autocompleters/autocompleterBase.js\":21,\"./autocompleters/classes.js\":22,\"./autocompleters/properties.js\":23,\"./autocompleters/sesame-prefixes.js\":24,\"./autocompleters/standard.js\":25,\"./autocompleters/variables.js\":27,\"./defaults.js\":28,\"./imgs.js\":29,\"./prefixUtils.js\":31,\"./sparql.js\":32,\"./tokenUtils.js\":33,\"./tooltip\":34,\"./utils.js\":35,codemirror:void 0,\"codemirror/addon/display/fullscreen.js\":5,\"codemirror/addon/edit/matchbrackets.js\":6,\"codemirror/addon/fold/brace-fold.js\":7,\"codemirror/addon/fold/foldcode.js\":8,\"codemirror/addon/fold/foldgutter.js\":9,\"codemirror/addon/fold/xml-fold.js\":10,\"codemirror/addon/hint/show-hint.js\":11,\"codemirror/addon/runmode/runmode.js\":12,\"codemirror/addon/search/searchcursor.js\":13,jquery:void 0,\"yasgui-utils\":16}],31:[function(e,i,r){\"use strict\";var n=function(e,i){var r=e.getPrefixesFromQuery();if(\"string\"==typeof i)o(e,i);else for(var n in i)n in r||o(e,n+\": <\"+i[n]+\">\")},o=function(e,i){for(var r=null,n=0,o=e.lineCount(),t=0;o>t;t++){var s=e.getNextNonWsToken(t);if(null!=s&&(\"PREFIX\"==s.string||\"BASE\"==s.string)){r=s;n=t}}if(null==r)e.replaceRange(\"PREFIX \"+i+\"\\n\",{line:0,ch:0});else{var p=a(e,n);e.replaceRange(\"\\n\"+p+\"PREFIX \"+i,{line:n})}},t=function(e,i){var r=function(e){return e.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g,\"\\\\$&\")};for(var n in i)e.setValue(e.getValue().replace(new RegExp(\"PREFIX\\\\s*\"+n+\":\\\\s*\"+r(\"<\"+i[n]+\">\")+\"\\\\s*\",\"ig\"),\"\"))},s=function(e){for(var i={},r=!0,n=function(o,s){if(r){s||(s=1);var a=e.getNextNonWsToken(t,s);if(a){-1==a.state.possibleCurrent.indexOf(\"PREFIX\")&&-1==a.state.possibleNext.indexOf(\"PREFIX\")&&(r=!1);if(\"PREFIX\"==a.string.toUpperCase()){var p=e.getNextNonWsToken(t,a.end+1);if(p){var l=e.getNextNonWsToken(t,p.end+1);if(l){var E=l.string;0==E.indexOf(\"<\")&&(E=E.substring(1));\">\"==E.slice(-1)&&(E=E.substring(0,E.length-1));i[p.string.slice(0,-1)]=E;n(o,l.end+1)}else n(o,p.end+1)}else n(o,a.end+1)}else n(o,a.end+1)}}},o=e.lineCount(),t=0;o>t&&r;t++)n(t);return i},a=function(e,i,r){void 0==r&&(r=1);var n=e.getTokenAt({line:i,ch:r});return null==n||void 0==n||\"ws\"!=n.type?\"\":n.string+a(e,i,n.end+1)};i.exports={addPrefixes:n,getPrefixesFromQuery:s,removePrefixes:t}},{}],32:[function(e,i,r){\"use strict\";function n(e){for(var i=e+\"=\",r=document.cookie.split(\";\"),n=0;n<r.length;n++){for(var o=r[n];\" \"==o.charAt(0);)o=o.substring(1);if(0==o.indexOf(i))return o.substring(i.length,o.length)}return\"\"}var o=function(){try{return e(\"jquery\")}catch(i){return window.jQuery}}(),t=e(\"./main.js\"),s=n(\"com.ontotext.graphdb.auth\");\"\"!=s&&o.ajaxSetup({headers:{\"X-AUTH-TOKEN\":s}});t.executeQuery=function(e,i){var r=\"function\"==typeof i?i:null,n=\"object\"==typeof i?i:{};e.options.sparql&&(n=o.extend({},e.options.sparql,n));n.handlers&&o.extend(!0,n.callbacks,n.handlers);if(n.endpoint&&0!=n.endpoint.length){var s={url:\"function\"==typeof n.endpoint?n.endpoint(e):n.endpoint,type:\"function\"==typeof n.requestMethod?n.requestMethod(e):n.requestMethod,headers:{Accept:a(e,n)}},p=!1;if(n.callbacks)for(var l in n.callbacks)if(n.callbacks[l]){p=!0;s[l]=n.callbacks[l]}n.headers&&!o.isEmptyObject(n.headers)&&o.extend(s.headers,n.headers);s.data=e.getUrlArguments(n);if(\"update\"!=window.editor.getQueryMode()){var E={};o.extend(!0,E,s);if(n.callbacks.countCallback&&\"function\"==typeof n.callbacks.countCallback){E.data.push({name:\"default-graph-uri\",value:\"http://www.ontotext.com/count\"});E.complete=n.callbacks.countCallback}}n.setQueryLimit&&\"function\"==typeof n.setQueryLimit&&s.data.forEach(function(e){\"query\"==e.name&&(e.value=n.setQueryLimit(e.value))});if(p||r){r&&(s.complete=r);t.updateQueryButton(e,\"busy\");var u=function(){t.updateQueryButton(e)};s.complete=s.complete?[u,s.complete]:u;n.callbacks.resetResults&&\"function\"==typeof n.callbacks.resetResults&&n.callbacks.resetResults();e.xhr=o.ajax(s);E&&o.ajax(E)}}};t.getUrlArguments=function(e,i){var r=e.getQueryMode(),n=[{name:e.getQueryMode(),value:e.getValue()}];if(i.namedGraphs&&i.namedGraphs.length>0)for(var t=\"query\"==r?\"named-graph-uri\":\"using-named-graph-uri \",s=0;s<i.namedGraphs.length;s++)n.push({name:t,value:i.namedGraphs[s]});if(i.defaultGraphs&&i.defaultGraphs.length>0)for(var t=\"query\"==r?\"default-graph-uri\":\"using-graph-uri \",s=0;s<i.defaultGraphs.length;s++)n.push({name:t,value:i.defaultGraphs[s]});i.args&&i.args.length>0&&o.merge(n,i.args);return n};var a=function(e,i){var r=null;if(!i.acceptHeader||i.acceptHeaderGraph||i.acceptHeaderSelect||i.acceptHeaderUpdate)if(\"update\"==e.getQueryMode())r=\"function\"==typeof i.acceptHeader?i.acceptHeaderUpdate(e):i.acceptHeaderUpdate;else{var n=e.getQueryType();r=\"DESCRIBE\"==n||\"CONSTRUCT\"==n?\"function\"==typeof i.acceptHeaderGraph?i.acceptHeaderGraph(e):i.acceptHeaderGraph:\"function\"==typeof i.acceptHeaderSelect?i.acceptHeaderSelect(e):i.acceptHeaderSelect}else r=\"function\"==typeof i.acceptHeader?i.acceptHeader(e):i.acceptHeader;return r}},{\"./main.js\":30,jquery:void 0}],33:[function(e,i,r){\"use strict\";var n=function(e,i,r){r||(r=e.getCursor());i||(i=e.getTokenAt(r));var o=e.getTokenAt({line:r.line,ch:i.start});if(null!=o.type&&\"ws\"!=o.type&&null!=i.type&&\"ws\"!=i.type){i.start=o.start;i.string=o.string+i.string;return n(e,i,{line:r.line,ch:o.start})}if(null!=i.type&&\"ws\"==i.type){i.start=i.start+1;i.string=i.string.substring(1);return i}return i},o=function(e,i,r){var n=e.getTokenAt({line:i,ch:r.start});null!=n&&\"ws\"==n.type&&(n=o(e,i,n));return n},t=function(e,i,r){void 0==r&&(r=1);var n=e.getTokenAt({line:i,ch:r});return null==n||void 0==n||n.end<r?null:\"ws\"==n.type?t(e,i,n.end+1):n};i.exports={getPreviousNonWsToken:o,getCompleteToken:n,getNextNonWsToken:t}},{}],34:[function(e,i,r){\"use strict\";{var n=function(){try{return e(\"jquery\")}catch(i){return window.jQuery}}();e(\"./utils.js\")}i.exports=function(e,i,r){var o,i=n(i);i.hover(function(){\"function\"==typeof r&&(r=r());o=n(\"<div>\").addClass(\"yasqe_tooltip\").html(r).appendTo(i);t()},function(){n(\".yasqe_tooltip\").remove()});var t=function(){if(n(e.getWrapperElement()).offset().top>=o.offset().top){o.css(\"bottom\",\"auto\");o.css(\"top\",\"26px\")}}}},{\"./utils.js\":35,jquery:void 0}],35:[function(e,i,r){\"use strict\";var n=function(){try{return e(\"jquery\")}catch(i){return window.jQuery}}(),o=function(e,i){var r=!1;try{void 0!==e[i]&&(r=!0)}catch(n){}return r},t=function(e,i){var r=null;i&&(r=\"string\"==typeof i?i:i(e));return r},s=function(){function e(e){var i,r,o;i=n(e).offset();r=n(e).width();o=n(e).height();return[[i.left,i.left+r],[i.top,i.top+o]]}function i(e,i){var r,n;r=e[0]<i[0]?e:i;n=e[0]<i[0]?i:e;return r[1]>n[0]||r[0]===n[0]}return function(r,n){var o=e(r),t=e(n);return i(o[0],t[0])&&i(o[1],t[1])}}();i.exports={keyExists:o,getPersistencyId:t,elementsOverlap:s}},{jquery:void 0}]},{},[1])(1)});\n//# sourceMappingURL=yasqe.min.js.map","'use strict';\r\n/*\r\n  jQuery deparam is an extraction of the deparam method from Ben Alman's jQuery BBQ\r\n  http://benalman.com/projects/jquery-bbq-plugin/\r\n*/\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\n$.deparam = function (params, coerce) {\r\nvar obj = {},\r\n\tcoerce_types = { 'true': !0, 'false': !1, 'null': null };\r\n  \r\n// Iterate over all name=value pairs.\r\n$.each(params.replace(/\\+/g, ' ').split('&'), function (j,v) {\r\n  var param = v.split('='),\r\n\t  key = decodeURIComponent(param[0]),\r\n\t  val,\r\n\t  cur = obj,\r\n\t  i = 0,\r\n\t\t\r\n\t  // If key is more complex than 'foo', like 'a[]' or 'a[b][c]', split it\r\n\t  // into its component parts.\r\n\t  keys = key.split(']['),\r\n\t  keys_last = keys.length - 1;\r\n\t\r\n  // If the first keys part contains [ and the last ends with ], then []\r\n  // are correctly balanced.\r\n  if (/\\[/.test(keys[0]) && /\\]$/.test(keys[keys_last])) {\r\n\t// Remove the trailing ] from the last keys part.\r\n\tkeys[keys_last] = keys[keys_last].replace(/\\]$/, '');\r\n\t  \r\n\t// Split first keys part into two parts on the [ and add them back onto\r\n\t// the beginning of the keys array.\r\n\tkeys = keys.shift().split('[').concat(keys);\r\n\t  \r\n\tkeys_last = keys.length - 1;\r\n  } else {\r\n\t// Basic 'foo' style key.\r\n\tkeys_last = 0;\r\n  }\r\n\t\r\n  // Are we dealing with a name=value pair, or just a name?\r\n  if (param.length === 2) {\r\n\tval = decodeURIComponent(param[1]);\r\n\t  \r\n\t// Coerce values.\r\n\tif (coerce) {\r\n\t  val = val && !isNaN(val)              ? +val              // number\r\n\t\t  : val === 'undefined'             ? undefined         // undefined\r\n\t\t  : coerce_types[val] !== undefined ? coerce_types[val] // true, false, null\r\n\t\t  : val;                                                // string\r\n\t}\r\n\t  \r\n\tif ( keys_last ) {\r\n\t  // Complex key, build deep object structure based on a few rules:\r\n\t  // * The 'cur' pointer starts at the object top-level.\r\n\t  // * [] = array push (n is set to array length), [n] = array if n is \r\n\t  //   numeric, otherwise object.\r\n\t  // * If at the last keys part, set the value.\r\n\t  // * For each keys part, if the current level is undefined create an\r\n\t  //   object or array based on the type of the next keys part.\r\n\t  // * Move the 'cur' pointer to the next level.\r\n\t  // * Rinse & repeat.\r\n\t  for (; i <= keys_last; i++) {\r\n\t\tkey = keys[i] === '' ? cur.length : keys[i];\r\n\t\tcur = cur[key] = i < keys_last\r\n\t\t  ? cur[key] || (keys[i+1] && isNaN(keys[i+1]) ? {} : [])\r\n\t\t  : val;\r\n\t  }\r\n\t\t\r\n\t} else {\r\n\t  // Simple key, even simpler rules, since only scalars and shallow\r\n\t  // arrays are allowed.\r\n\t\t\r\n\t  if ($.isArray(obj[key])) {\r\n\t\t// val is already an array, so push on the next value.\r\n\t\tobj[key].push( val );\r\n\t\t  \r\n\t  } else if (obj[key] !== undefined) {\r\n\t\t// val isn't an array, but since a second value has been specified,\r\n\t\t// convert val into an array.\r\n\t\tobj[key] = [obj[key], val];\r\n\t\t  \r\n\t  } else {\r\n\t\t// val is a scalar.\r\n\t\tobj[key] = val;\r\n\t  }\r\n\t}\r\n\t  \r\n  } else if (key) {\r\n\t// No value was defined, so set something meaningful.\r\n\tobj[key] = coerce\r\n\t  ? undefined\r\n\t  : '';\r\n  }\r\n});\r\n  \r\nreturn obj;\r\n};\r\n","(function(mod) {\r\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\r\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\r\n  else if (typeof define == \"function\" && define.amd) // AMD\r\n    define([\"codemirror\"], mod);\r\n  else // Plain browser env\r\n    mod(CodeMirror);\r\n})(function(CodeMirror) {\r\n  \"use strict\";\r\n  \r\n\tCodeMirror.defineMode(\"sparql11\", function(config, parserConfig) {\r\n\t\r\n\t\tvar indentUnit = config.indentUnit;\r\n\t\r\n\t\t// ll1_table is auto-generated from grammar\r\n\t\t// - do not edit manually\r\n\t\t// %%%table%%%\r\n\tvar ll1_table=\r\n\t{\r\n\t  \"*[&&,valueLogical]\" : {\r\n\t     \"&&\": [\"[&&,valueLogical]\",\"*[&&,valueLogical]\"], \r\n\t     \"AS\": [], \r\n\t     \")\": [], \r\n\t     \",\": [], \r\n\t     \"||\": [], \r\n\t     \";\": []}, \r\n\t  \"*[,,expression]\" : {\r\n\t     \",\": [\"[,,expression]\",\"*[,,expression]\"], \r\n\t     \")\": []}, \r\n\t  \"*[,,objectPath]\" : {\r\n\t     \",\": [\"[,,objectPath]\",\"*[,,objectPath]\"], \r\n\t     \".\": [], \r\n\t     \";\": [], \r\n\t     \"]\": [], \r\n\t     \"{\": [], \r\n\t     \"OPTIONAL\": [], \r\n\t     \"MINUS\": [], \r\n\t     \"GRAPH\": [], \r\n\t     \"SERVICE\": [], \r\n\t     \"FILTER\": [], \r\n\t     \"BIND\": [], \r\n\t     \"VALUES\": [], \r\n\t     \"}\": []}, \r\n\t  \"*[,,object]\" : {\r\n\t     \",\": [\"[,,object]\",\"*[,,object]\"], \r\n\t     \".\": [], \r\n\t     \";\": [], \r\n\t     \"]\": [], \r\n\t     \"}\": [], \r\n\t     \"GRAPH\": [], \r\n\t     \"{\": [], \r\n\t     \"OPTIONAL\": [], \r\n\t     \"MINUS\": [], \r\n\t     \"SERVICE\": [], \r\n\t     \"FILTER\": [], \r\n\t     \"BIND\": [], \r\n\t     \"VALUES\": []}, \r\n\t  \"*[/,pathEltOrInverse]\" : {\r\n\t     \"/\": [\"[/,pathEltOrInverse]\",\"*[/,pathEltOrInverse]\"], \r\n\t     \"|\": [], \r\n\t     \")\": [], \r\n\t     \"(\": [], \r\n\t     \"[\": [], \r\n\t     \"VAR1\": [], \r\n\t     \"VAR2\": [], \r\n\t     \"NIL\": [], \r\n\t     \"IRI_REF\": [], \r\n\t     \"TRUE\": [], \r\n\t     \"FALSE\": [], \r\n\t     \"BLANK_NODE_LABEL\": [], \r\n\t     \"ANON\": [], \r\n\t     \"PNAME_LN\": [], \r\n\t     \"PNAME_NS\": [], \r\n\t     \"STRING_LITERAL1\": [], \r\n\t     \"STRING_LITERAL2\": [], \r\n\t     \"STRING_LITERAL_LONG1\": [], \r\n\t     \"STRING_LITERAL_LONG2\": [], \r\n\t     \"INTEGER\": [], \r\n\t     \"DECIMAL\": [], \r\n\t     \"DOUBLE\": [], \r\n\t     \"INTEGER_POSITIVE\": [], \r\n\t     \"DECIMAL_POSITIVE\": [], \r\n\t     \"DOUBLE_POSITIVE\": [], \r\n\t     \"INTEGER_NEGATIVE\": [], \r\n\t     \"DECIMAL_NEGATIVE\": [], \r\n\t     \"DOUBLE_NEGATIVE\": []}, \r\n\t  \"*[;,?[or([verbPath,verbSimple]),objectList]]\" : {\r\n\t     \";\": [\"[;,?[or([verbPath,verbSimple]),objectList]]\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \r\n\t     \".\": [], \r\n\t     \"]\": [], \r\n\t     \"{\": [], \r\n\t     \"OPTIONAL\": [], \r\n\t     \"MINUS\": [], \r\n\t     \"GRAPH\": [], \r\n\t     \"SERVICE\": [], \r\n\t     \"FILTER\": [], \r\n\t     \"BIND\": [], \r\n\t     \"VALUES\": [], \r\n\t     \"}\": []}, \r\n\t  \"*[;,?[verb,objectList]]\" : {\r\n\t     \";\": [\"[;,?[verb,objectList]]\",\"*[;,?[verb,objectList]]\"], \r\n\t     \".\": [], \r\n\t     \"]\": [], \r\n\t     \"}\": [], \r\n\t     \"GRAPH\": [], \r\n\t     \"{\": [], \r\n\t     \"OPTIONAL\": [], \r\n\t     \"MINUS\": [], \r\n\t     \"SERVICE\": [], \r\n\t     \"FILTER\": [], \r\n\t     \"BIND\": [], \r\n\t     \"VALUES\": []}, \r\n\t  \"*[UNION,groupGraphPattern]\" : {\r\n\t     \"UNION\": [\"[UNION,groupGraphPattern]\",\"*[UNION,groupGraphPattern]\"], \r\n\t     \"VAR1\": [], \r\n\t     \"VAR2\": [], \r\n\t     \"NIL\": [], \r\n\t     \"(\": [], \r\n\t     \"[\": [], \r\n\t     \"IRI_REF\": [], \r\n\t     \"TRUE\": [], \r\n\t     \"FALSE\": [], \r\n\t     \"BLANK_NODE_LABEL\": [], \r\n\t     \"ANON\": [], \r\n\t     \"PNAME_LN\": [], \r\n\t     \"PNAME_NS\": [], \r\n\t     \"STRING_LITERAL1\": [], \r\n\t     \"STRING_LITERAL2\": [], \r\n\t     \"STRING_LITERAL_LONG1\": [], \r\n\t     \"STRING_LITERAL_LONG2\": [], \r\n\t     \"INTEGER\": [], \r\n\t     \"DECIMAL\": [], \r\n\t     \"DOUBLE\": [], \r\n\t     \"INTEGER_POSITIVE\": [], \r\n\t     \"DECIMAL_POSITIVE\": [], \r\n\t     \"DOUBLE_POSITIVE\": [], \r\n\t     \"INTEGER_NEGATIVE\": [], \r\n\t     \"DECIMAL_NEGATIVE\": [], \r\n\t     \"DOUBLE_NEGATIVE\": [], \r\n\t     \".\": [], \r\n\t     \"{\": [], \r\n\t     \"OPTIONAL\": [], \r\n\t     \"MINUS\": [], \r\n\t     \"GRAPH\": [], \r\n\t     \"SERVICE\": [], \r\n\t     \"FILTER\": [], \r\n\t     \"BIND\": [], \r\n\t     \"VALUES\": [], \r\n\t     \"}\": []}, \r\n\t  \"*[graphPatternNotTriples,?.,?triplesBlock]\" : {\r\n\t     \"{\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"OPTIONAL\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"MINUS\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"GRAPH\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"SERVICE\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"FILTER\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"BIND\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"VALUES\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"}\": []}, \r\n\t  \"*[quadsNotTriples,?.,?triplesTemplate]\" : {\r\n\t     \"GRAPH\": [\"[quadsNotTriples,?.,?triplesTemplate]\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n\t     \"}\": []}, \r\n\t  \"*[|,pathOneInPropertySet]\" : {\r\n\t     \"|\": [\"[|,pathOneInPropertySet]\",\"*[|,pathOneInPropertySet]\"], \r\n\t     \")\": []}, \r\n\t  \"*[|,pathSequence]\" : {\r\n\t     \"|\": [\"[|,pathSequence]\",\"*[|,pathSequence]\"], \r\n\t     \")\": [], \r\n\t     \"(\": [], \r\n\t     \"[\": [], \r\n\t     \"VAR1\": [], \r\n\t     \"VAR2\": [], \r\n\t     \"NIL\": [], \r\n\t     \"IRI_REF\": [], \r\n\t     \"TRUE\": [], \r\n\t     \"FALSE\": [], \r\n\t     \"BLANK_NODE_LABEL\": [], \r\n\t     \"ANON\": [], \r\n\t     \"PNAME_LN\": [], \r\n\t     \"PNAME_NS\": [], \r\n\t     \"STRING_LITERAL1\": [], \r\n\t     \"STRING_LITERAL2\": [], \r\n\t     \"STRING_LITERAL_LONG1\": [], \r\n\t     \"STRING_LITERAL_LONG2\": [], \r\n\t     \"INTEGER\": [], \r\n\t     \"DECIMAL\": [], \r\n\t     \"DOUBLE\": [], \r\n\t     \"INTEGER_POSITIVE\": [], \r\n\t     \"DECIMAL_POSITIVE\": [], \r\n\t     \"DOUBLE_POSITIVE\": [], \r\n\t     \"INTEGER_NEGATIVE\": [], \r\n\t     \"DECIMAL_NEGATIVE\": [], \r\n\t     \"DOUBLE_NEGATIVE\": []}, \r\n\t  \"*[||,conditionalAndExpression]\" : {\r\n\t     \"||\": [\"[||,conditionalAndExpression]\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"AS\": [], \r\n\t     \")\": [], \r\n\t     \",\": [], \r\n\t     \";\": []}, \r\n\t  \"*dataBlockValue\" : {\r\n\t     \"UNDEF\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n\t     \"IRI_REF\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n\t     \"TRUE\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n\t     \"FALSE\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n\t     \"PNAME_LN\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n\t     \"PNAME_NS\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n\t     \"STRING_LITERAL1\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n\t     \"STRING_LITERAL2\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n\t     \"INTEGER\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n\t     \"DECIMAL\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n\t     \"DOUBLE\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n\t     \"INTEGER_POSITIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n\t     \"}\": [], \r\n\t     \")\": []}, \r\n\t  \"*datasetClause\" : {\r\n\t     \"FROM\": [\"datasetClause\",\"*datasetClause\"], \r\n\t     \"WHERE\": [], \r\n\t     \"{\": []}, \r\n\t  \"*describeDatasetClause\" : {\r\n\t     \"FROM\": [\"describeDatasetClause\",\"*describeDatasetClause\"], \r\n\t     \"ORDER\": [], \r\n\t     \"HAVING\": [], \r\n\t     \"GROUP\": [], \r\n\t     \"LIMIT\": [], \r\n\t     \"OFFSET\": [], \r\n\t     \"WHERE\": [], \r\n\t     \"{\": [], \r\n\t     \"VALUES\": [], \r\n\t     \"$\": []}, \r\n\t  \"*graphNode\" : {\r\n\t     \"(\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"[\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"VAR1\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"VAR2\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"NIL\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"IRI_REF\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"TRUE\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"FALSE\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"BLANK_NODE_LABEL\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"ANON\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"PNAME_LN\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"PNAME_NS\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"STRING_LITERAL1\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"STRING_LITERAL2\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"INTEGER\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"DECIMAL\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"DOUBLE\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"INTEGER_POSITIVE\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \r\n\t     \")\": []}, \r\n\t  \"*graphNodePath\" : {\r\n\t     \"(\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"[\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"VAR1\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"VAR2\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"NIL\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"IRI_REF\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"TRUE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"FALSE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"BLANK_NODE_LABEL\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"ANON\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"PNAME_LN\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"PNAME_NS\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"STRING_LITERAL1\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"STRING_LITERAL2\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"INTEGER\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"DECIMAL\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"DOUBLE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"INTEGER_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \")\": []}, \r\n\t  \"*groupCondition\" : {\r\n\t     \"(\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"STR\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"LANG\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"LANGMATCHES\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"DATATYPE\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"BOUND\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"IRI\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"URI\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"BNODE\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"RAND\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"ABS\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"CEIL\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"FLOOR\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"ROUND\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"CONCAT\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"STRLEN\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"UCASE\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"LCASE\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"ENCODE_FOR_URI\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"CONTAINS\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"STRSTARTS\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"STRENDS\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"STRBEFORE\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"STRAFTER\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"YEAR\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"MONTH\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"DAY\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"HOURS\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"MINUTES\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"SECONDS\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"TIMEZONE\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"TZ\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"NOW\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"UUID\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"STRUUID\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"MD5\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"SHA1\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"SHA256\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"SHA384\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"SHA512\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"COALESCE\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"IF\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"STRLANG\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"STRDT\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"SAMETERM\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"ISIRI\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"ISURI\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"ISBLANK\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"ISLITERAL\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"ISNUMERIC\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"VAR1\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"VAR2\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"SUBSTR\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"REPLACE\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"REGEX\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"EXISTS\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"NOT\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"IRI_REF\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"PNAME_LN\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"PNAME_NS\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"VALUES\": [], \r\n\t     \"LIMIT\": [], \r\n\t     \"OFFSET\": [], \r\n\t     \"ORDER\": [], \r\n\t     \"HAVING\": [], \r\n\t     \"$\": [], \r\n\t     \"}\": []}, \r\n\t  \"*havingCondition\" : {\r\n\t     \"(\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"STR\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"LANG\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"LANGMATCHES\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"DATATYPE\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"BOUND\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"IRI\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"URI\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"BNODE\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"RAND\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"ABS\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"CEIL\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"FLOOR\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"ROUND\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"CONCAT\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"STRLEN\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"UCASE\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"LCASE\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"ENCODE_FOR_URI\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"CONTAINS\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"STRSTARTS\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"STRENDS\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"STRBEFORE\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"STRAFTER\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"YEAR\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"MONTH\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"DAY\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"HOURS\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"MINUTES\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"SECONDS\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"TIMEZONE\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"TZ\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"NOW\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"UUID\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"STRUUID\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"MD5\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"SHA1\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"SHA256\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"SHA384\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"SHA512\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"COALESCE\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"IF\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"STRLANG\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"STRDT\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"SAMETERM\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"ISIRI\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"ISURI\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"ISBLANK\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"ISLITERAL\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"ISNUMERIC\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"SUBSTR\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"REPLACE\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"REGEX\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"EXISTS\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"NOT\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"IRI_REF\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"PNAME_LN\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"PNAME_NS\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"VALUES\": [], \r\n\t     \"LIMIT\": [], \r\n\t     \"OFFSET\": [], \r\n\t     \"ORDER\": [], \r\n\t     \"$\": [], \r\n\t     \"}\": []}, \r\n\t  \"*or([[ (,*dataBlockValue,)],NIL])\" : {\r\n\t     \"(\": [\"or([[ (,*dataBlockValue,)],NIL])\",\"*or([[ (,*dataBlockValue,)],NIL])\"], \r\n\t     \"NIL\": [\"or([[ (,*dataBlockValue,)],NIL])\",\"*or([[ (,*dataBlockValue,)],NIL])\"], \r\n\t     \"}\": []}, \r\n\t  \"*or([[*,unaryExpression],[/,unaryExpression]])\" : {\r\n\t     \"*\": [\"or([[*,unaryExpression],[/,unaryExpression]])\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"/\": [\"or([[*,unaryExpression],[/,unaryExpression]])\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"AS\": [], \r\n\t     \")\": [], \r\n\t     \",\": [], \r\n\t     \"||\": [], \r\n\t     \"&&\": [], \r\n\t     \"=\": [], \r\n\t     \"!=\": [], \r\n\t     \"<\": [], \r\n\t     \">\": [], \r\n\t     \"<=\": [], \r\n\t     \">=\": [], \r\n\t     \"IN\": [], \r\n\t     \"NOT\": [], \r\n\t     \"+\": [], \r\n\t     \"-\": [], \r\n\t     \"INTEGER_POSITIVE\": [], \r\n\t     \"DECIMAL_POSITIVE\": [], \r\n\t     \"DOUBLE_POSITIVE\": [], \r\n\t     \"INTEGER_NEGATIVE\": [], \r\n\t     \"DECIMAL_NEGATIVE\": [], \r\n\t     \"DOUBLE_NEGATIVE\": [], \r\n\t     \";\": []}, \r\n\t  \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\" : {\r\n\t     \"+\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"-\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"INTEGER_POSITIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"AS\": [], \r\n\t     \")\": [], \r\n\t     \",\": [], \r\n\t     \"||\": [], \r\n\t     \"&&\": [], \r\n\t     \"=\": [], \r\n\t     \"!=\": [], \r\n\t     \"<\": [], \r\n\t     \">\": [], \r\n\t     \"<=\": [], \r\n\t     \">=\": [], \r\n\t     \"IN\": [], \r\n\t     \"NOT\": [], \r\n\t     \";\": []}, \r\n\t  \"*or([var,[ (,expression,AS,var,)]])\" : {\r\n\t     \"(\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \r\n\t     \"VAR1\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \r\n\t     \"VAR2\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \r\n\t     \"WHERE\": [], \r\n\t     \"{\": [], \r\n\t     \"FROM\": []}, \r\n\t  \"*orderCondition\" : {\r\n\t     \"ASC\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"DESC\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"VAR1\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"VAR2\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"(\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"STR\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"LANG\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"LANGMATCHES\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"DATATYPE\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"BOUND\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"IRI\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"URI\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"BNODE\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"RAND\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"ABS\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"CEIL\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"FLOOR\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"ROUND\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"CONCAT\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"STRLEN\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"UCASE\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"LCASE\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"ENCODE_FOR_URI\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"CONTAINS\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"STRSTARTS\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"STRENDS\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"STRBEFORE\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"STRAFTER\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"YEAR\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"MONTH\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"DAY\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"HOURS\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"MINUTES\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"SECONDS\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"TIMEZONE\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"TZ\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"NOW\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"UUID\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"STRUUID\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"MD5\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"SHA1\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"SHA256\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"SHA384\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"SHA512\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"COALESCE\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"IF\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"STRLANG\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"STRDT\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"SAMETERM\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"ISIRI\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"ISURI\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"ISBLANK\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"ISLITERAL\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"ISNUMERIC\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"SUBSTR\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"REPLACE\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"REGEX\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"EXISTS\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"NOT\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"IRI_REF\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"PNAME_LN\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"PNAME_NS\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"VALUES\": [], \r\n\t     \"LIMIT\": [], \r\n\t     \"OFFSET\": [], \r\n\t     \"$\": [], \r\n\t     \"}\": []}, \r\n\t  \"*prefixDecl\" : {\r\n\t     \"PREFIX\": [\"prefixDecl\",\"*prefixDecl\"], \r\n\t     \"$\": [], \r\n\t     \"CONSTRUCT\": [], \r\n\t     \"DESCRIBE\": [], \r\n\t     \"ASK\": [], \r\n\t     \"INSERT\": [], \r\n\t     \"DELETE\": [], \r\n\t     \"SELECT\": [], \r\n\t     \"LOAD\": [], \r\n\t     \"CLEAR\": [], \r\n\t     \"DROP\": [], \r\n\t     \"ADD\": [], \r\n\t     \"MOVE\": [], \r\n\t     \"COPY\": [], \r\n\t     \"CREATE\": [], \r\n\t     \"WITH\": []}, \r\n\t  \"*usingClause\" : {\r\n\t     \"USING\": [\"usingClause\",\"*usingClause\"], \r\n\t     \"WHERE\": []}, \r\n\t  \"*var\" : {\r\n\t     \"VAR1\": [\"var\",\"*var\"], \r\n\t     \"VAR2\": [\"var\",\"*var\"], \r\n\t     \")\": []}, \r\n\t  \"*varOrIRIref\" : {\r\n\t     \"VAR1\": [\"varOrIRIref\",\"*varOrIRIref\"], \r\n\t     \"VAR2\": [\"varOrIRIref\",\"*varOrIRIref\"], \r\n\t     \"IRI_REF\": [\"varOrIRIref\",\"*varOrIRIref\"], \r\n\t     \"PNAME_LN\": [\"varOrIRIref\",\"*varOrIRIref\"], \r\n\t     \"PNAME_NS\": [\"varOrIRIref\",\"*varOrIRIref\"], \r\n\t     \"ORDER\": [], \r\n\t     \"HAVING\": [], \r\n\t     \"GROUP\": [], \r\n\t     \"LIMIT\": [], \r\n\t     \"OFFSET\": [], \r\n\t     \"WHERE\": [], \r\n\t     \"{\": [], \r\n\t     \"FROM\": [], \r\n\t     \"VALUES\": [], \r\n\t     \"$\": []}, \r\n\t  \"+graphNode\" : {\r\n\t     \"(\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"[\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"VAR1\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"VAR2\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"NIL\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"IRI_REF\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"TRUE\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"FALSE\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"BLANK_NODE_LABEL\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"ANON\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"PNAME_LN\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"PNAME_NS\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"STRING_LITERAL1\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"STRING_LITERAL2\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"INTEGER\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"DECIMAL\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"DOUBLE\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"INTEGER_POSITIVE\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"graphNode\",\"*graphNode\"]}, \r\n\t  \"+graphNodePath\" : {\r\n\t     \"(\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"[\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"VAR1\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"VAR2\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"NIL\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"IRI_REF\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"TRUE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"FALSE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"BLANK_NODE_LABEL\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"ANON\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"PNAME_LN\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"PNAME_NS\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"STRING_LITERAL1\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"STRING_LITERAL2\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"INTEGER\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"DECIMAL\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"DOUBLE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"INTEGER_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"]}, \r\n\t  \"+groupCondition\" : {\r\n\t     \"(\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"STR\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"LANG\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"LANGMATCHES\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"DATATYPE\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"BOUND\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"IRI\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"URI\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"BNODE\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"RAND\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"ABS\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"CEIL\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"FLOOR\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"ROUND\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"CONCAT\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"STRLEN\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"UCASE\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"LCASE\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"ENCODE_FOR_URI\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"CONTAINS\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"STRSTARTS\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"STRENDS\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"STRBEFORE\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"STRAFTER\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"YEAR\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"MONTH\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"DAY\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"HOURS\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"MINUTES\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"SECONDS\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"TIMEZONE\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"TZ\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"NOW\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"UUID\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"STRUUID\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"MD5\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"SHA1\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"SHA256\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"SHA384\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"SHA512\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"COALESCE\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"IF\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"STRLANG\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"STRDT\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"SAMETERM\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"ISIRI\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"ISURI\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"ISBLANK\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"ISLITERAL\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"ISNUMERIC\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"VAR1\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"VAR2\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"SUBSTR\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"REPLACE\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"REGEX\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"EXISTS\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"NOT\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"IRI_REF\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"PNAME_LN\": [\"groupCondition\",\"*groupCondition\"], \r\n\t     \"PNAME_NS\": [\"groupCondition\",\"*groupCondition\"]}, \r\n\t  \"+havingCondition\" : {\r\n\t     \"(\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"STR\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"LANG\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"LANGMATCHES\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"DATATYPE\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"BOUND\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"IRI\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"URI\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"BNODE\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"RAND\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"ABS\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"CEIL\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"FLOOR\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"ROUND\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"CONCAT\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"STRLEN\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"UCASE\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"LCASE\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"ENCODE_FOR_URI\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"CONTAINS\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"STRSTARTS\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"STRENDS\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"STRBEFORE\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"STRAFTER\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"YEAR\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"MONTH\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"DAY\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"HOURS\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"MINUTES\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"SECONDS\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"TIMEZONE\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"TZ\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"NOW\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"UUID\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"STRUUID\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"MD5\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"SHA1\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"SHA256\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"SHA384\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"SHA512\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"COALESCE\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"IF\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"STRLANG\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"STRDT\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"SAMETERM\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"ISIRI\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"ISURI\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"ISBLANK\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"ISLITERAL\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"ISNUMERIC\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"SUBSTR\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"REPLACE\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"REGEX\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"EXISTS\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"NOT\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"IRI_REF\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"PNAME_LN\": [\"havingCondition\",\"*havingCondition\"], \r\n\t     \"PNAME_NS\": [\"havingCondition\",\"*havingCondition\"]}, \r\n\t  \"+or([var,[ (,expression,AS,var,)]])\" : {\r\n\t     \"(\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \r\n\t     \"VAR1\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \r\n\t     \"VAR2\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"]}, \r\n\t  \"+orderCondition\" : {\r\n\t     \"ASC\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"DESC\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"VAR1\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"VAR2\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"(\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"STR\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"LANG\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"LANGMATCHES\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"DATATYPE\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"BOUND\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"IRI\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"URI\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"BNODE\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"RAND\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"ABS\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"CEIL\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"FLOOR\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"ROUND\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"CONCAT\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"STRLEN\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"UCASE\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"LCASE\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"ENCODE_FOR_URI\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"CONTAINS\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"STRSTARTS\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"STRENDS\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"STRBEFORE\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"STRAFTER\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"YEAR\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"MONTH\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"DAY\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"HOURS\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"MINUTES\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"SECONDS\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"TIMEZONE\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"TZ\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"NOW\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"UUID\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"STRUUID\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"MD5\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"SHA1\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"SHA256\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"SHA384\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"SHA512\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"COALESCE\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"IF\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"STRLANG\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"STRDT\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"SAMETERM\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"ISIRI\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"ISURI\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"ISBLANK\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"ISLITERAL\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"ISNUMERIC\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"SUBSTR\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"REPLACE\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"REGEX\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"EXISTS\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"NOT\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"IRI_REF\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"PNAME_LN\": [\"orderCondition\",\"*orderCondition\"], \r\n\t     \"PNAME_NS\": [\"orderCondition\",\"*orderCondition\"]}, \r\n\t  \"+varOrIRIref\" : {\r\n\t     \"VAR1\": [\"varOrIRIref\",\"*varOrIRIref\"], \r\n\t     \"VAR2\": [\"varOrIRIref\",\"*varOrIRIref\"], \r\n\t     \"IRI_REF\": [\"varOrIRIref\",\"*varOrIRIref\"], \r\n\t     \"PNAME_LN\": [\"varOrIRIref\",\"*varOrIRIref\"], \r\n\t     \"PNAME_NS\": [\"varOrIRIref\",\"*varOrIRIref\"]}, \r\n\t  \"?.\" : {\r\n\t     \".\": [\".\"], \r\n\t     \"VAR1\": [], \r\n\t     \"VAR2\": [], \r\n\t     \"NIL\": [], \r\n\t     \"(\": [], \r\n\t     \"[\": [], \r\n\t     \"IRI_REF\": [], \r\n\t     \"TRUE\": [], \r\n\t     \"FALSE\": [], \r\n\t     \"BLANK_NODE_LABEL\": [], \r\n\t     \"ANON\": [], \r\n\t     \"PNAME_LN\": [], \r\n\t     \"PNAME_NS\": [], \r\n\t     \"STRING_LITERAL1\": [], \r\n\t     \"STRING_LITERAL2\": [], \r\n\t     \"STRING_LITERAL_LONG1\": [], \r\n\t     \"STRING_LITERAL_LONG2\": [], \r\n\t     \"INTEGER\": [], \r\n\t     \"DECIMAL\": [], \r\n\t     \"DOUBLE\": [], \r\n\t     \"INTEGER_POSITIVE\": [], \r\n\t     \"DECIMAL_POSITIVE\": [], \r\n\t     \"DOUBLE_POSITIVE\": [], \r\n\t     \"INTEGER_NEGATIVE\": [], \r\n\t     \"DECIMAL_NEGATIVE\": [], \r\n\t     \"DOUBLE_NEGATIVE\": [], \r\n\t     \"GRAPH\": [], \r\n\t     \"{\": [], \r\n\t     \"OPTIONAL\": [], \r\n\t     \"MINUS\": [], \r\n\t     \"SERVICE\": [], \r\n\t     \"FILTER\": [], \r\n\t     \"BIND\": [], \r\n\t     \"VALUES\": [], \r\n\t     \"}\": []}, \r\n\t  \"?DISTINCT\" : {\r\n\t     \"DISTINCT\": [\"DISTINCT\"], \r\n\t     \"!\": [], \r\n\t     \"+\": [], \r\n\t     \"-\": [], \r\n\t     \"VAR1\": [], \r\n\t     \"VAR2\": [], \r\n\t     \"(\": [], \r\n\t     \"STR\": [], \r\n\t     \"LANG\": [], \r\n\t     \"LANGMATCHES\": [], \r\n\t     \"DATATYPE\": [], \r\n\t     \"BOUND\": [], \r\n\t     \"IRI\": [], \r\n\t     \"URI\": [], \r\n\t     \"BNODE\": [], \r\n\t     \"RAND\": [], \r\n\t     \"ABS\": [], \r\n\t     \"CEIL\": [], \r\n\t     \"FLOOR\": [], \r\n\t     \"ROUND\": [], \r\n\t     \"CONCAT\": [], \r\n\t     \"STRLEN\": [], \r\n\t     \"UCASE\": [], \r\n\t     \"LCASE\": [], \r\n\t     \"ENCODE_FOR_URI\": [], \r\n\t     \"CONTAINS\": [], \r\n\t     \"STRSTARTS\": [], \r\n\t     \"STRENDS\": [], \r\n\t     \"STRBEFORE\": [], \r\n\t     \"STRAFTER\": [], \r\n\t     \"YEAR\": [], \r\n\t     \"MONTH\": [], \r\n\t     \"DAY\": [], \r\n\t     \"HOURS\": [], \r\n\t     \"MINUTES\": [], \r\n\t     \"SECONDS\": [], \r\n\t     \"TIMEZONE\": [], \r\n\t     \"TZ\": [], \r\n\t     \"NOW\": [], \r\n\t     \"UUID\": [], \r\n\t     \"STRUUID\": [], \r\n\t     \"MD5\": [], \r\n\t     \"SHA1\": [], \r\n\t     \"SHA256\": [], \r\n\t     \"SHA384\": [], \r\n\t     \"SHA512\": [], \r\n\t     \"COALESCE\": [], \r\n\t     \"IF\": [], \r\n\t     \"STRLANG\": [], \r\n\t     \"STRDT\": [], \r\n\t     \"SAMETERM\": [], \r\n\t     \"ISIRI\": [], \r\n\t     \"ISURI\": [], \r\n\t     \"ISBLANK\": [], \r\n\t     \"ISLITERAL\": [], \r\n\t     \"ISNUMERIC\": [], \r\n\t     \"TRUE\": [], \r\n\t     \"FALSE\": [], \r\n\t     \"COUNT\": [], \r\n\t     \"SUM\": [], \r\n\t     \"MIN\": [], \r\n\t     \"MAX\": [], \r\n\t     \"AVG\": [], \r\n\t     \"SAMPLE\": [], \r\n\t     \"GROUP_CONCAT\": [], \r\n\t     \"SUBSTR\": [], \r\n\t     \"REPLACE\": [], \r\n\t     \"REGEX\": [], \r\n\t     \"EXISTS\": [], \r\n\t     \"NOT\": [], \r\n\t     \"IRI_REF\": [], \r\n\t     \"STRING_LITERAL1\": [], \r\n\t     \"STRING_LITERAL2\": [], \r\n\t     \"STRING_LITERAL_LONG1\": [], \r\n\t     \"STRING_LITERAL_LONG2\": [], \r\n\t     \"INTEGER\": [], \r\n\t     \"DECIMAL\": [], \r\n\t     \"DOUBLE\": [], \r\n\t     \"INTEGER_POSITIVE\": [], \r\n\t     \"DECIMAL_POSITIVE\": [], \r\n\t     \"DOUBLE_POSITIVE\": [], \r\n\t     \"INTEGER_NEGATIVE\": [], \r\n\t     \"DECIMAL_NEGATIVE\": [], \r\n\t     \"DOUBLE_NEGATIVE\": [], \r\n\t     \"PNAME_LN\": [], \r\n\t     \"PNAME_NS\": [], \r\n\t     \"*\": []}, \r\n\t  \"?GRAPH\" : {\r\n\t     \"GRAPH\": [\"GRAPH\"], \r\n\t     \"IRI_REF\": [], \r\n\t     \"PNAME_LN\": [], \r\n\t     \"PNAME_NS\": []}, \r\n\t  \"?SILENT\" : {\r\n\t     \"SILENT\": [\"SILENT\"], \r\n\t     \"VAR1\": [], \r\n\t     \"VAR2\": [], \r\n\t     \"IRI_REF\": [], \r\n\t     \"PNAME_LN\": [], \r\n\t     \"PNAME_NS\": []}, \r\n\t  \"?SILENT_1\" : {\r\n\t     \"SILENT\": [\"SILENT\"], \r\n\t     \"IRI_REF\": [], \r\n\t     \"PNAME_LN\": [], \r\n\t     \"PNAME_NS\": []}, \r\n\t  \"?SILENT_2\" : {\r\n\t     \"SILENT\": [\"SILENT\"], \r\n\t     \"GRAPH\": [], \r\n\t     \"DEFAULT\": [], \r\n\t     \"NAMED\": [], \r\n\t     \"ALL\": []}, \r\n\t  \"?SILENT_3\" : {\r\n\t     \"SILENT\": [\"SILENT\"], \r\n\t     \"GRAPH\": []}, \r\n\t  \"?SILENT_4\" : {\r\n\t     \"SILENT\": [\"SILENT\"], \r\n\t     \"DEFAULT\": [], \r\n\t     \"GRAPH\": [], \r\n\t     \"IRI_REF\": [], \r\n\t     \"PNAME_LN\": [], \r\n\t     \"PNAME_NS\": []}, \r\n\t  \"?WHERE\" : {\r\n\t     \"WHERE\": [\"WHERE\"], \r\n\t     \"{\": []}, \r\n\t  \"?[,,expression]\" : {\r\n\t     \",\": [\"[,,expression]\"], \r\n\t     \")\": []}, \r\n\t  \"?[.,?constructTriples]\" : {\r\n\t     \".\": [\"[.,?constructTriples]\"], \r\n\t     \"}\": []}, \r\n\t  \"?[.,?triplesBlock]\" : {\r\n\t     \".\": [\"[.,?triplesBlock]\"], \r\n\t     \"{\": [], \r\n\t     \"OPTIONAL\": [], \r\n\t     \"MINUS\": [], \r\n\t     \"GRAPH\": [], \r\n\t     \"SERVICE\": [], \r\n\t     \"FILTER\": [], \r\n\t     \"BIND\": [], \r\n\t     \"VALUES\": [], \r\n\t     \"}\": []}, \r\n\t  \"?[.,?triplesTemplate]\" : {\r\n\t     \".\": [\"[.,?triplesTemplate]\"], \r\n\t     \"}\": [], \r\n\t     \"GRAPH\": []}, \r\n\t  \"?[;,SEPARATOR,=,string]\" : {\r\n\t     \";\": [\"[;,SEPARATOR,=,string]\"], \r\n\t     \")\": []}, \r\n\t  \"?[;,update]\" : {\r\n\t     \";\": [\"[;,update]\"], \r\n\t     \"$\": []}, \r\n\t  \"?[AS,var]\" : {\r\n\t     \"AS\": [\"[AS,var]\"], \r\n\t     \")\": []}, \r\n\t  \"?[INTO,graphRef]\" : {\r\n\t     \"INTO\": [\"[INTO,graphRef]\"], \r\n\t     \";\": [], \r\n\t     \"$\": []}, \r\n\t  \"?[or([verbPath,verbSimple]),objectList]\" : {\r\n\t     \"VAR1\": [\"[or([verbPath,verbSimple]),objectList]\"], \r\n\t     \"VAR2\": [\"[or([verbPath,verbSimple]),objectList]\"], \r\n\t     \"^\": [\"[or([verbPath,verbSimple]),objectList]\"], \r\n\t     \"a\": [\"[or([verbPath,verbSimple]),objectList]\"], \r\n\t     \"!\": [\"[or([verbPath,verbSimple]),objectList]\"], \r\n\t     \"(\": [\"[or([verbPath,verbSimple]),objectList]\"], \r\n\t     \"IRI_REF\": [\"[or([verbPath,verbSimple]),objectList]\"], \r\n\t     \"PNAME_LN\": [\"[or([verbPath,verbSimple]),objectList]\"], \r\n\t     \"PNAME_NS\": [\"[or([verbPath,verbSimple]),objectList]\"], \r\n\t     \";\": [], \r\n\t     \".\": [], \r\n\t     \"]\": [], \r\n\t     \"{\": [], \r\n\t     \"OPTIONAL\": [], \r\n\t     \"MINUS\": [], \r\n\t     \"GRAPH\": [], \r\n\t     \"SERVICE\": [], \r\n\t     \"FILTER\": [], \r\n\t     \"BIND\": [], \r\n\t     \"VALUES\": [], \r\n\t     \"}\": []}, \r\n\t  \"?[pathOneInPropertySet,*[|,pathOneInPropertySet]]\" : {\r\n\t     \"a\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \r\n\t     \"^\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \r\n\t     \"IRI_REF\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \r\n\t     \"PNAME_LN\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \r\n\t     \"PNAME_NS\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \r\n\t     \")\": []}, \r\n\t  \"?[update1,?[;,update]]\" : {\r\n\t     \"INSERT\": [\"[update1,?[;,update]]\"], \r\n\t     \"DELETE\": [\"[update1,?[;,update]]\"], \r\n\t     \"LOAD\": [\"[update1,?[;,update]]\"], \r\n\t     \"CLEAR\": [\"[update1,?[;,update]]\"], \r\n\t     \"DROP\": [\"[update1,?[;,update]]\"], \r\n\t     \"ADD\": [\"[update1,?[;,update]]\"], \r\n\t     \"MOVE\": [\"[update1,?[;,update]]\"], \r\n\t     \"COPY\": [\"[update1,?[;,update]]\"], \r\n\t     \"CREATE\": [\"[update1,?[;,update]]\"], \r\n\t     \"WITH\": [\"[update1,?[;,update]]\"], \r\n\t     \"$\": []}, \r\n\t  \"?[verb,objectList]\" : {\r\n\t     \"a\": [\"[verb,objectList]\"], \r\n\t     \"VAR1\": [\"[verb,objectList]\"], \r\n\t     \"VAR2\": [\"[verb,objectList]\"], \r\n\t     \"IRI_REF\": [\"[verb,objectList]\"], \r\n\t     \"PNAME_LN\": [\"[verb,objectList]\"], \r\n\t     \"PNAME_NS\": [\"[verb,objectList]\"], \r\n\t     \";\": [], \r\n\t     \".\": [], \r\n\t     \"]\": [], \r\n\t     \"}\": [], \r\n\t     \"GRAPH\": [], \r\n\t     \"{\": [], \r\n\t     \"OPTIONAL\": [], \r\n\t     \"MINUS\": [], \r\n\t     \"SERVICE\": [], \r\n\t     \"FILTER\": [], \r\n\t     \"BIND\": [], \r\n\t     \"VALUES\": []}, \r\n\t  \"?argList\" : {\r\n\t     \"NIL\": [\"argList\"], \r\n\t     \"(\": [\"argList\"], \r\n\t     \"AS\": [], \r\n\t     \")\": [], \r\n\t     \",\": [], \r\n\t     \"||\": [], \r\n\t     \"&&\": [], \r\n\t     \"=\": [], \r\n\t     \"!=\": [], \r\n\t     \"<\": [], \r\n\t     \">\": [], \r\n\t     \"<=\": [], \r\n\t     \">=\": [], \r\n\t     \"IN\": [], \r\n\t     \"NOT\": [], \r\n\t     \"+\": [], \r\n\t     \"-\": [], \r\n\t     \"INTEGER_POSITIVE\": [], \r\n\t     \"DECIMAL_POSITIVE\": [], \r\n\t     \"DOUBLE_POSITIVE\": [], \r\n\t     \"INTEGER_NEGATIVE\": [], \r\n\t     \"DECIMAL_NEGATIVE\": [], \r\n\t     \"DOUBLE_NEGATIVE\": [], \r\n\t     \"*\": [], \r\n\t     \"/\": [], \r\n\t     \";\": []}, \r\n\t  \"?baseDecl\" : {\r\n\t     \"BASE\": [\"baseDecl\"], \r\n\t     \"$\": [], \r\n\t     \"CONSTRUCT\": [], \r\n\t     \"DESCRIBE\": [], \r\n\t     \"ASK\": [], \r\n\t     \"INSERT\": [], \r\n\t     \"DELETE\": [], \r\n\t     \"SELECT\": [], \r\n\t     \"LOAD\": [], \r\n\t     \"CLEAR\": [], \r\n\t     \"DROP\": [], \r\n\t     \"ADD\": [], \r\n\t     \"MOVE\": [], \r\n\t     \"COPY\": [], \r\n\t     \"CREATE\": [], \r\n\t     \"WITH\": [], \r\n\t     \"PREFIX\": []}, \r\n\t  \"?constructTriples\" : {\r\n\t     \"VAR1\": [\"constructTriples\"], \r\n\t     \"VAR2\": [\"constructTriples\"], \r\n\t     \"NIL\": [\"constructTriples\"], \r\n\t     \"(\": [\"constructTriples\"], \r\n\t     \"[\": [\"constructTriples\"], \r\n\t     \"IRI_REF\": [\"constructTriples\"], \r\n\t     \"TRUE\": [\"constructTriples\"], \r\n\t     \"FALSE\": [\"constructTriples\"], \r\n\t     \"BLANK_NODE_LABEL\": [\"constructTriples\"], \r\n\t     \"ANON\": [\"constructTriples\"], \r\n\t     \"PNAME_LN\": [\"constructTriples\"], \r\n\t     \"PNAME_NS\": [\"constructTriples\"], \r\n\t     \"STRING_LITERAL1\": [\"constructTriples\"], \r\n\t     \"STRING_LITERAL2\": [\"constructTriples\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"constructTriples\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"constructTriples\"], \r\n\t     \"INTEGER\": [\"constructTriples\"], \r\n\t     \"DECIMAL\": [\"constructTriples\"], \r\n\t     \"DOUBLE\": [\"constructTriples\"], \r\n\t     \"INTEGER_POSITIVE\": [\"constructTriples\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"constructTriples\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"constructTriples\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"constructTriples\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"constructTriples\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"constructTriples\"], \r\n\t     \"}\": []}, \r\n\t  \"?groupClause\" : {\r\n\t     \"GROUP\": [\"groupClause\"], \r\n\t     \"VALUES\": [], \r\n\t     \"LIMIT\": [], \r\n\t     \"OFFSET\": [], \r\n\t     \"ORDER\": [], \r\n\t     \"HAVING\": [], \r\n\t     \"$\": [], \r\n\t     \"}\": []}, \r\n\t  \"?havingClause\" : {\r\n\t     \"HAVING\": [\"havingClause\"], \r\n\t     \"VALUES\": [], \r\n\t     \"LIMIT\": [], \r\n\t     \"OFFSET\": [], \r\n\t     \"ORDER\": [], \r\n\t     \"$\": [], \r\n\t     \"}\": []}, \r\n\t  \"?insertClause\" : {\r\n\t     \"INSERT\": [\"insertClause\"], \r\n\t     \"WHERE\": [], \r\n\t     \"USING\": []}, \r\n\t  \"?limitClause\" : {\r\n\t     \"LIMIT\": [\"limitClause\"], \r\n\t     \"VALUES\": [], \r\n\t     \"$\": [], \r\n\t     \"}\": []}, \r\n\t  \"?limitOffsetClauses\" : {\r\n\t     \"LIMIT\": [\"limitOffsetClauses\"], \r\n\t     \"OFFSET\": [\"limitOffsetClauses\"], \r\n\t     \"VALUES\": [], \r\n\t     \"$\": [], \r\n\t     \"}\": []}, \r\n\t  \"?offsetClause\" : {\r\n\t     \"OFFSET\": [\"offsetClause\"], \r\n\t     \"VALUES\": [], \r\n\t     \"$\": [], \r\n\t     \"}\": []}, \r\n\t  \"?or([DISTINCT,REDUCED])\" : {\r\n\t     \"DISTINCT\": [\"or([DISTINCT,REDUCED])\"], \r\n\t     \"REDUCED\": [\"or([DISTINCT,REDUCED])\"], \r\n\t     \"*\": [], \r\n\t     \"(\": [], \r\n\t     \"VAR1\": [], \r\n\t     \"VAR2\": []}, \r\n\t  \"?or([LANGTAG,[^^,iriRef]])\" : {\r\n\t     \"LANGTAG\": [\"or([LANGTAG,[^^,iriRef]])\"], \r\n\t     \"^^\": [\"or([LANGTAG,[^^,iriRef]])\"], \r\n\t     \"UNDEF\": [], \r\n\t     \"IRI_REF\": [], \r\n\t     \"TRUE\": [], \r\n\t     \"FALSE\": [], \r\n\t     \"PNAME_LN\": [], \r\n\t     \"PNAME_NS\": [], \r\n\t     \"STRING_LITERAL1\": [], \r\n\t     \"STRING_LITERAL2\": [], \r\n\t     \"STRING_LITERAL_LONG1\": [], \r\n\t     \"STRING_LITERAL_LONG2\": [], \r\n\t     \"INTEGER\": [], \r\n\t     \"DECIMAL\": [], \r\n\t     \"DOUBLE\": [], \r\n\t     \"INTEGER_POSITIVE\": [], \r\n\t     \"DECIMAL_POSITIVE\": [], \r\n\t     \"DOUBLE_POSITIVE\": [], \r\n\t     \"INTEGER_NEGATIVE\": [], \r\n\t     \"DECIMAL_NEGATIVE\": [], \r\n\t     \"DOUBLE_NEGATIVE\": [], \r\n\t     \"a\": [], \r\n\t     \"VAR1\": [], \r\n\t     \"VAR2\": [], \r\n\t     \"^\": [], \r\n\t     \"!\": [], \r\n\t     \"(\": [], \r\n\t     \".\": [], \r\n\t     \";\": [], \r\n\t     \",\": [], \r\n\t     \"AS\": [], \r\n\t     \")\": [], \r\n\t     \"||\": [], \r\n\t     \"&&\": [], \r\n\t     \"=\": [], \r\n\t     \"!=\": [], \r\n\t     \"<\": [], \r\n\t     \">\": [], \r\n\t     \"<=\": [], \r\n\t     \">=\": [], \r\n\t     \"IN\": [], \r\n\t     \"NOT\": [], \r\n\t     \"+\": [], \r\n\t     \"-\": [], \r\n\t     \"*\": [], \r\n\t     \"/\": [], \r\n\t     \"}\": [], \r\n\t     \"[\": [], \r\n\t     \"NIL\": [], \r\n\t     \"BLANK_NODE_LABEL\": [], \r\n\t     \"ANON\": [], \r\n\t     \"]\": [], \r\n\t     \"GRAPH\": [], \r\n\t     \"{\": [], \r\n\t     \"OPTIONAL\": [], \r\n\t     \"MINUS\": [], \r\n\t     \"SERVICE\": [], \r\n\t     \"FILTER\": [], \r\n\t     \"BIND\": [], \r\n\t     \"VALUES\": []}, \r\n\t  \"?or([[*,unaryExpression],[/,unaryExpression]])\" : {\r\n\t     \"*\": [\"or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"/\": [\"or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"+\": [], \r\n\t     \"-\": [], \r\n\t     \"INTEGER_POSITIVE\": [], \r\n\t     \"DECIMAL_POSITIVE\": [], \r\n\t     \"DOUBLE_POSITIVE\": [], \r\n\t     \"INTEGER_NEGATIVE\": [], \r\n\t     \"DECIMAL_NEGATIVE\": [], \r\n\t     \"DOUBLE_NEGATIVE\": [], \r\n\t     \"AS\": [], \r\n\t     \")\": [], \r\n\t     \",\": [], \r\n\t     \"||\": [], \r\n\t     \"&&\": [], \r\n\t     \"=\": [], \r\n\t     \"!=\": [], \r\n\t     \"<\": [], \r\n\t     \">\": [], \r\n\t     \"<=\": [], \r\n\t     \">=\": [], \r\n\t     \"IN\": [], \r\n\t     \"NOT\": [], \r\n\t     \";\": []}, \r\n\t  \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\" : {\r\n\t     \"=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"!=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"<\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \">\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"<=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \">=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"IN\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"NOT\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"AS\": [], \r\n\t     \")\": [], \r\n\t     \",\": [], \r\n\t     \"||\": [], \r\n\t     \"&&\": [], \r\n\t     \";\": []}, \r\n\t  \"?orderClause\" : {\r\n\t     \"ORDER\": [\"orderClause\"], \r\n\t     \"VALUES\": [], \r\n\t     \"LIMIT\": [], \r\n\t     \"OFFSET\": [], \r\n\t     \"$\": [], \r\n\t     \"}\": []}, \r\n\t  \"?pathMod\" : {\r\n\t     \"*\": [\"pathMod\"], \r\n\t     \"?\": [\"pathMod\"], \r\n\t     \"+\": [\"pathMod\"], \r\n\t     \"{\": [\"pathMod\"], \r\n\t     \"|\": [], \r\n\t     \"/\": [], \r\n\t     \")\": [], \r\n\t     \"(\": [], \r\n\t     \"[\": [], \r\n\t     \"VAR1\": [], \r\n\t     \"VAR2\": [], \r\n\t     \"NIL\": [], \r\n\t     \"IRI_REF\": [], \r\n\t     \"TRUE\": [], \r\n\t     \"FALSE\": [], \r\n\t     \"BLANK_NODE_LABEL\": [], \r\n\t     \"ANON\": [], \r\n\t     \"PNAME_LN\": [], \r\n\t     \"PNAME_NS\": [], \r\n\t     \"STRING_LITERAL1\": [], \r\n\t     \"STRING_LITERAL2\": [], \r\n\t     \"STRING_LITERAL_LONG1\": [], \r\n\t     \"STRING_LITERAL_LONG2\": [], \r\n\t     \"INTEGER\": [], \r\n\t     \"DECIMAL\": [], \r\n\t     \"DOUBLE\": [], \r\n\t     \"INTEGER_POSITIVE\": [], \r\n\t     \"DECIMAL_POSITIVE\": [], \r\n\t     \"DOUBLE_POSITIVE\": [], \r\n\t     \"INTEGER_NEGATIVE\": [], \r\n\t     \"DECIMAL_NEGATIVE\": [], \r\n\t     \"DOUBLE_NEGATIVE\": []}, \r\n\t  \"?triplesBlock\" : {\r\n\t     \"VAR1\": [\"triplesBlock\"], \r\n\t     \"VAR2\": [\"triplesBlock\"], \r\n\t     \"NIL\": [\"triplesBlock\"], \r\n\t     \"(\": [\"triplesBlock\"], \r\n\t     \"[\": [\"triplesBlock\"], \r\n\t     \"IRI_REF\": [\"triplesBlock\"], \r\n\t     \"TRUE\": [\"triplesBlock\"], \r\n\t     \"FALSE\": [\"triplesBlock\"], \r\n\t     \"BLANK_NODE_LABEL\": [\"triplesBlock\"], \r\n\t     \"ANON\": [\"triplesBlock\"], \r\n\t     \"PNAME_LN\": [\"triplesBlock\"], \r\n\t     \"PNAME_NS\": [\"triplesBlock\"], \r\n\t     \"STRING_LITERAL1\": [\"triplesBlock\"], \r\n\t     \"STRING_LITERAL2\": [\"triplesBlock\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"triplesBlock\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"triplesBlock\"], \r\n\t     \"INTEGER\": [\"triplesBlock\"], \r\n\t     \"DECIMAL\": [\"triplesBlock\"], \r\n\t     \"DOUBLE\": [\"triplesBlock\"], \r\n\t     \"INTEGER_POSITIVE\": [\"triplesBlock\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"triplesBlock\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"triplesBlock\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"triplesBlock\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"triplesBlock\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"triplesBlock\"], \r\n\t     \"{\": [], \r\n\t     \"OPTIONAL\": [], \r\n\t     \"MINUS\": [], \r\n\t     \"GRAPH\": [], \r\n\t     \"SERVICE\": [], \r\n\t     \"FILTER\": [], \r\n\t     \"BIND\": [], \r\n\t     \"VALUES\": [], \r\n\t     \"}\": []}, \r\n\t  \"?triplesTemplate\" : {\r\n\t     \"VAR1\": [\"triplesTemplate\"], \r\n\t     \"VAR2\": [\"triplesTemplate\"], \r\n\t     \"NIL\": [\"triplesTemplate\"], \r\n\t     \"(\": [\"triplesTemplate\"], \r\n\t     \"[\": [\"triplesTemplate\"], \r\n\t     \"IRI_REF\": [\"triplesTemplate\"], \r\n\t     \"TRUE\": [\"triplesTemplate\"], \r\n\t     \"FALSE\": [\"triplesTemplate\"], \r\n\t     \"BLANK_NODE_LABEL\": [\"triplesTemplate\"], \r\n\t     \"ANON\": [\"triplesTemplate\"], \r\n\t     \"PNAME_LN\": [\"triplesTemplate\"], \r\n\t     \"PNAME_NS\": [\"triplesTemplate\"], \r\n\t     \"STRING_LITERAL1\": [\"triplesTemplate\"], \r\n\t     \"STRING_LITERAL2\": [\"triplesTemplate\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"triplesTemplate\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"triplesTemplate\"], \r\n\t     \"INTEGER\": [\"triplesTemplate\"], \r\n\t     \"DECIMAL\": [\"triplesTemplate\"], \r\n\t     \"DOUBLE\": [\"triplesTemplate\"], \r\n\t     \"INTEGER_POSITIVE\": [\"triplesTemplate\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"triplesTemplate\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"triplesTemplate\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"triplesTemplate\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"triplesTemplate\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"triplesTemplate\"], \r\n\t     \"}\": [], \r\n\t     \"GRAPH\": []}, \r\n\t  \"?whereClause\" : {\r\n\t     \"WHERE\": [\"whereClause\"], \r\n\t     \"{\": [\"whereClause\"], \r\n\t     \"ORDER\": [], \r\n\t     \"HAVING\": [], \r\n\t     \"GROUP\": [], \r\n\t     \"LIMIT\": [], \r\n\t     \"OFFSET\": [], \r\n\t     \"VALUES\": [], \r\n\t     \"$\": []}, \r\n\t  \"[ (,*dataBlockValue,)]\" : {\r\n\t     \"(\": [\"(\",\"*dataBlockValue\",\")\"]}, \r\n\t  \"[ (,*var,)]\" : {\r\n\t     \"(\": [\"(\",\"*var\",\")\"]}, \r\n\t  \"[ (,expression,)]\" : {\r\n\t     \"(\": [\"(\",\"expression\",\")\"]}, \r\n\t  \"[ (,expression,AS,var,)]\" : {\r\n\t     \"(\": [\"(\",\"expression\",\"AS\",\"var\",\")\"]}, \r\n\t  \"[!=,numericExpression]\" : {\r\n\t     \"!=\": [\"!=\",\"numericExpression\"]}, \r\n\t  \"[&&,valueLogical]\" : {\r\n\t     \"&&\": [\"&&\",\"valueLogical\"]}, \r\n\t  \"[*,unaryExpression]\" : {\r\n\t     \"*\": [\"*\",\"unaryExpression\"]}, \r\n\t  \"[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]\" : {\r\n\t     \"WHERE\": [\"*datasetClause\",\"WHERE\",\"{\",\"?triplesTemplate\",\"}\",\"solutionModifier\"], \r\n\t     \"FROM\": [\"*datasetClause\",\"WHERE\",\"{\",\"?triplesTemplate\",\"}\",\"solutionModifier\"]}, \r\n\t  \"[+,multiplicativeExpression]\" : {\r\n\t     \"+\": [\"+\",\"multiplicativeExpression\"]}, \r\n\t  \"[,,expression]\" : {\r\n\t     \",\": [\",\",\"expression\"]}, \r\n\t  \"[,,integer,}]\" : {\r\n\t     \",\": [\",\",\"integer\",\"}\"]}, \r\n\t  \"[,,objectPath]\" : {\r\n\t     \",\": [\",\",\"objectPath\"]}, \r\n\t  \"[,,object]\" : {\r\n\t     \",\": [\",\",\"object\"]}, \r\n\t  \"[,,or([},[integer,}]])]\" : {\r\n\t     \",\": [\",\",\"or([},[integer,}]])\"]}, \r\n\t  \"[-,multiplicativeExpression]\" : {\r\n\t     \"-\": [\"-\",\"multiplicativeExpression\"]}, \r\n\t  \"[.,?constructTriples]\" : {\r\n\t     \".\": [\".\",\"?constructTriples\"]}, \r\n\t  \"[.,?triplesBlock]\" : {\r\n\t     \".\": [\".\",\"?triplesBlock\"]}, \r\n\t  \"[.,?triplesTemplate]\" : {\r\n\t     \".\": [\".\",\"?triplesTemplate\"]}, \r\n\t  \"[/,pathEltOrInverse]\" : {\r\n\t     \"/\": [\"/\",\"pathEltOrInverse\"]}, \r\n\t  \"[/,unaryExpression]\" : {\r\n\t     \"/\": [\"/\",\"unaryExpression\"]}, \r\n\t  \"[;,?[or([verbPath,verbSimple]),objectList]]\" : {\r\n\t     \";\": [\";\",\"?[or([verbPath,verbSimple]),objectList]\"]}, \r\n\t  \"[;,?[verb,objectList]]\" : {\r\n\t     \";\": [\";\",\"?[verb,objectList]\"]}, \r\n\t  \"[;,SEPARATOR,=,string]\" : {\r\n\t     \";\": [\";\",\"SEPARATOR\",\"=\",\"string\"]}, \r\n\t  \"[;,update]\" : {\r\n\t     \";\": [\";\",\"update\"]}, \r\n\t  \"[<,numericExpression]\" : {\r\n\t     \"<\": [\"<\",\"numericExpression\"]}, \r\n\t  \"[<=,numericExpression]\" : {\r\n\t     \"<=\": [\"<=\",\"numericExpression\"]}, \r\n\t  \"[=,numericExpression]\" : {\r\n\t     \"=\": [\"=\",\"numericExpression\"]}, \r\n\t  \"[>,numericExpression]\" : {\r\n\t     \">\": [\">\",\"numericExpression\"]}, \r\n\t  \"[>=,numericExpression]\" : {\r\n\t     \">=\": [\">=\",\"numericExpression\"]}, \r\n\t  \"[AS,var]\" : {\r\n\t     \"AS\": [\"AS\",\"var\"]}, \r\n\t  \"[IN,expressionList]\" : {\r\n\t     \"IN\": [\"IN\",\"expressionList\"]}, \r\n\t  \"[INTO,graphRef]\" : {\r\n\t     \"INTO\": [\"INTO\",\"graphRef\"]}, \r\n\t  \"[NAMED,iriRef]\" : {\r\n\t     \"NAMED\": [\"NAMED\",\"iriRef\"]}, \r\n\t  \"[NOT,IN,expressionList]\" : {\r\n\t     \"NOT\": [\"NOT\",\"IN\",\"expressionList\"]}, \r\n\t  \"[UNION,groupGraphPattern]\" : {\r\n\t     \"UNION\": [\"UNION\",\"groupGraphPattern\"]}, \r\n\t  \"[^^,iriRef]\" : {\r\n\t     \"^^\": [\"^^\",\"iriRef\"]}, \r\n\t  \"[constructTemplate,*datasetClause,whereClause,solutionModifier]\" : {\r\n\t     \"{\": [\"constructTemplate\",\"*datasetClause\",\"whereClause\",\"solutionModifier\"]}, \r\n\t  \"[deleteClause,?insertClause]\" : {\r\n\t     \"DELETE\": [\"deleteClause\",\"?insertClause\"]}, \r\n\t  \"[graphPatternNotTriples,?.,?triplesBlock]\" : {\r\n\t     \"{\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \r\n\t     \"OPTIONAL\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \r\n\t     \"MINUS\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \r\n\t     \"GRAPH\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \r\n\t     \"SERVICE\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \r\n\t     \"FILTER\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \r\n\t     \"BIND\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \r\n\t     \"VALUES\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"]}, \r\n\t  \"[integer,or([[,,or([},[integer,}]])],}])]\" : {\r\n\t     \"INTEGER\": [\"integer\",\"or([[,,or([},[integer,}]])],}])\"]}, \r\n\t  \"[integer,}]\" : {\r\n\t     \"INTEGER\": [\"integer\",\"}\"]}, \r\n\t  \"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\" : {\r\n\t     \"INTEGER_POSITIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"]}, \r\n\t  \"[or([verbPath,verbSimple]),objectList]\" : {\r\n\t     \"VAR1\": [\"or([verbPath,verbSimple])\",\"objectList\"], \r\n\t     \"VAR2\": [\"or([verbPath,verbSimple])\",\"objectList\"], \r\n\t     \"^\": [\"or([verbPath,verbSimple])\",\"objectList\"], \r\n\t     \"a\": [\"or([verbPath,verbSimple])\",\"objectList\"], \r\n\t     \"!\": [\"or([verbPath,verbSimple])\",\"objectList\"], \r\n\t     \"(\": [\"or([verbPath,verbSimple])\",\"objectList\"], \r\n\t     \"IRI_REF\": [\"or([verbPath,verbSimple])\",\"objectList\"], \r\n\t     \"PNAME_LN\": [\"or([verbPath,verbSimple])\",\"objectList\"], \r\n\t     \"PNAME_NS\": [\"or([verbPath,verbSimple])\",\"objectList\"]}, \r\n\t  \"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\" : {\r\n\t     \"a\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \r\n\t     \"^\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \r\n\t     \"IRI_REF\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \r\n\t     \"PNAME_LN\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \r\n\t     \"PNAME_NS\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"]}, \r\n\t  \"[quadsNotTriples,?.,?triplesTemplate]\" : {\r\n\t     \"GRAPH\": [\"quadsNotTriples\",\"?.\",\"?triplesTemplate\"]}, \r\n\t  \"[update1,?[;,update]]\" : {\r\n\t     \"INSERT\": [\"update1\",\"?[;,update]\"], \r\n\t     \"DELETE\": [\"update1\",\"?[;,update]\"], \r\n\t     \"LOAD\": [\"update1\",\"?[;,update]\"], \r\n\t     \"CLEAR\": [\"update1\",\"?[;,update]\"], \r\n\t     \"DROP\": [\"update1\",\"?[;,update]\"], \r\n\t     \"ADD\": [\"update1\",\"?[;,update]\"], \r\n\t     \"MOVE\": [\"update1\",\"?[;,update]\"], \r\n\t     \"COPY\": [\"update1\",\"?[;,update]\"], \r\n\t     \"CREATE\": [\"update1\",\"?[;,update]\"], \r\n\t     \"WITH\": [\"update1\",\"?[;,update]\"]}, \r\n\t  \"[verb,objectList]\" : {\r\n\t     \"a\": [\"verb\",\"objectList\"], \r\n\t     \"VAR1\": [\"verb\",\"objectList\"], \r\n\t     \"VAR2\": [\"verb\",\"objectList\"], \r\n\t     \"IRI_REF\": [\"verb\",\"objectList\"], \r\n\t     \"PNAME_LN\": [\"verb\",\"objectList\"], \r\n\t     \"PNAME_NS\": [\"verb\",\"objectList\"]}, \r\n\t  \"[|,pathOneInPropertySet]\" : {\r\n\t     \"|\": [\"|\",\"pathOneInPropertySet\"]}, \r\n\t  \"[|,pathSequence]\" : {\r\n\t     \"|\": [\"|\",\"pathSequence\"]}, \r\n\t  \"[||,conditionalAndExpression]\" : {\r\n\t     \"||\": [\"||\",\"conditionalAndExpression\"]}, \r\n\t  \"add\" : {\r\n\t     \"ADD\": [\"ADD\",\"?SILENT_4\",\"graphOrDefault\",\"TO\",\"graphOrDefault\"]}, \r\n\t  \"additiveExpression\" : {\r\n\t     \"!\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"+\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"-\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"VAR1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"VAR2\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"(\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"STR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"LANG\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"LANGMATCHES\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"DATATYPE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"BOUND\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"IRI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"URI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"BNODE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"RAND\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"ABS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"CEIL\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"FLOOR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"ROUND\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"CONCAT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"STRLEN\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"UCASE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"LCASE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"ENCODE_FOR_URI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"CONTAINS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"STRSTARTS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"STRENDS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"STRBEFORE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"STRAFTER\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"YEAR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"MONTH\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"DAY\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"HOURS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"MINUTES\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"SECONDS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"TIMEZONE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"TZ\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"NOW\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"UUID\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"STRUUID\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"MD5\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"SHA1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"SHA256\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"SHA384\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"SHA512\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"COALESCE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"IF\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"STRLANG\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"STRDT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"SAMETERM\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"ISIRI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"ISURI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"ISBLANK\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"ISLITERAL\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"ISNUMERIC\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"TRUE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"FALSE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"COUNT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"SUM\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"MIN\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"MAX\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"AVG\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"SAMPLE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"GROUP_CONCAT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"SUBSTR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"REPLACE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"REGEX\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"EXISTS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"NOT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"IRI_REF\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"STRING_LITERAL1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"STRING_LITERAL2\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"INTEGER\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"DECIMAL\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"DOUBLE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"INTEGER_POSITIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"PNAME_LN\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n\t     \"PNAME_NS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"]}, \r\n\t  \"aggregate\" : {\r\n\t     \"COUNT\": [\"COUNT\",\"(\",\"?DISTINCT\",\"or([*,expression])\",\")\"], \r\n\t     \"SUM\": [\"SUM\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \r\n\t     \"MIN\": [\"MIN\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \r\n\t     \"MAX\": [\"MAX\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \r\n\t     \"AVG\": [\"AVG\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \r\n\t     \"SAMPLE\": [\"SAMPLE\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \r\n\t     \"GROUP_CONCAT\": [\"GROUP_CONCAT\",\"(\",\"?DISTINCT\",\"expression\",\"?[;,SEPARATOR,=,string]\",\")\"]}, \r\n\t  \"allowBnodes\" : {\r\n\t     \"}\": []}, \r\n\t  \"allowVars\" : {\r\n\t     \"}\": []}, \r\n\t  \"argList\" : {\r\n\t     \"NIL\": [\"NIL\"], \r\n\t     \"(\": [\"(\",\"?DISTINCT\",\"expression\",\"*[,,expression]\",\")\"]}, \r\n\t  \"askQuery\" : {\r\n\t     \"ASK\": [\"ASK\",\"*datasetClause\",\"whereClause\",\"solutionModifier\"]}, \r\n\t  \"baseDecl\" : {\r\n\t     \"BASE\": [\"BASE\",\"IRI_REF\"]}, \r\n\t  \"bind\" : {\r\n\t     \"BIND\": [\"BIND\",\"(\",\"expression\",\"AS\",\"var\",\")\"]}, \r\n\t  \"blankNode\" : {\r\n\t     \"BLANK_NODE_LABEL\": [\"BLANK_NODE_LABEL\"], \r\n\t     \"ANON\": [\"ANON\"]}, \r\n\t  \"blankNodePropertyList\" : {\r\n\t     \"[\": [\"[\",\"propertyListNotEmpty\",\"]\"]}, \r\n\t  \"blankNodePropertyListPath\" : {\r\n\t     \"[\": [\"[\",\"propertyListPathNotEmpty\",\"]\"]}, \r\n\t  \"booleanLiteral\" : {\r\n\t     \"TRUE\": [\"TRUE\"], \r\n\t     \"FALSE\": [\"FALSE\"]}, \r\n\t  \"brackettedExpression\" : {\r\n\t     \"(\": [\"(\",\"expression\",\")\"]}, \r\n\t  \"builtInCall\" : {\r\n\t     \"STR\": [\"STR\",\"(\",\"expression\",\")\"], \r\n\t     \"LANG\": [\"LANG\",\"(\",\"expression\",\")\"], \r\n\t     \"LANGMATCHES\": [\"LANGMATCHES\",\"(\",\"expression\",\",\",\"expression\",\")\"], \r\n\t     \"DATATYPE\": [\"DATATYPE\",\"(\",\"expression\",\")\"], \r\n\t     \"BOUND\": [\"BOUND\",\"(\",\"var\",\")\"], \r\n\t     \"IRI\": [\"IRI\",\"(\",\"expression\",\")\"], \r\n\t     \"URI\": [\"URI\",\"(\",\"expression\",\")\"], \r\n\t     \"BNODE\": [\"BNODE\",\"or([[ (,expression,)],NIL])\"], \r\n\t     \"RAND\": [\"RAND\",\"NIL\"], \r\n\t     \"ABS\": [\"ABS\",\"(\",\"expression\",\")\"], \r\n\t     \"CEIL\": [\"CEIL\",\"(\",\"expression\",\")\"], \r\n\t     \"FLOOR\": [\"FLOOR\",\"(\",\"expression\",\")\"], \r\n\t     \"ROUND\": [\"ROUND\",\"(\",\"expression\",\")\"], \r\n\t     \"CONCAT\": [\"CONCAT\",\"expressionList\"], \r\n\t     \"SUBSTR\": [\"substringExpression\"], \r\n\t     \"STRLEN\": [\"STRLEN\",\"(\",\"expression\",\")\"], \r\n\t     \"REPLACE\": [\"strReplaceExpression\"], \r\n\t     \"UCASE\": [\"UCASE\",\"(\",\"expression\",\")\"], \r\n\t     \"LCASE\": [\"LCASE\",\"(\",\"expression\",\")\"], \r\n\t     \"ENCODE_FOR_URI\": [\"ENCODE_FOR_URI\",\"(\",\"expression\",\")\"], \r\n\t     \"CONTAINS\": [\"CONTAINS\",\"(\",\"expression\",\",\",\"expression\",\")\"], \r\n\t     \"STRSTARTS\": [\"STRSTARTS\",\"(\",\"expression\",\",\",\"expression\",\")\"], \r\n\t     \"STRENDS\": [\"STRENDS\",\"(\",\"expression\",\",\",\"expression\",\")\"], \r\n\t     \"STRBEFORE\": [\"STRBEFORE\",\"(\",\"expression\",\",\",\"expression\",\")\"], \r\n\t     \"STRAFTER\": [\"STRAFTER\",\"(\",\"expression\",\",\",\"expression\",\")\"], \r\n\t     \"YEAR\": [\"YEAR\",\"(\",\"expression\",\")\"], \r\n\t     \"MONTH\": [\"MONTH\",\"(\",\"expression\",\")\"], \r\n\t     \"DAY\": [\"DAY\",\"(\",\"expression\",\")\"], \r\n\t     \"HOURS\": [\"HOURS\",\"(\",\"expression\",\")\"], \r\n\t     \"MINUTES\": [\"MINUTES\",\"(\",\"expression\",\")\"], \r\n\t     \"SECONDS\": [\"SECONDS\",\"(\",\"expression\",\")\"], \r\n\t     \"TIMEZONE\": [\"TIMEZONE\",\"(\",\"expression\",\")\"], \r\n\t     \"TZ\": [\"TZ\",\"(\",\"expression\",\")\"], \r\n\t     \"NOW\": [\"NOW\",\"NIL\"], \r\n\t     \"UUID\": [\"UUID\",\"NIL\"], \r\n\t     \"STRUUID\": [\"STRUUID\",\"NIL\"], \r\n\t     \"MD5\": [\"MD5\",\"(\",\"expression\",\")\"], \r\n\t     \"SHA1\": [\"SHA1\",\"(\",\"expression\",\")\"], \r\n\t     \"SHA256\": [\"SHA256\",\"(\",\"expression\",\")\"], \r\n\t     \"SHA384\": [\"SHA384\",\"(\",\"expression\",\")\"], \r\n\t     \"SHA512\": [\"SHA512\",\"(\",\"expression\",\")\"], \r\n\t     \"COALESCE\": [\"COALESCE\",\"expressionList\"], \r\n\t     \"IF\": [\"IF\",\"(\",\"expression\",\",\",\"expression\",\",\",\"expression\",\")\"], \r\n\t     \"STRLANG\": [\"STRLANG\",\"(\",\"expression\",\",\",\"expression\",\")\"], \r\n\t     \"STRDT\": [\"STRDT\",\"(\",\"expression\",\",\",\"expression\",\")\"], \r\n\t     \"SAMETERM\": [\"SAMETERM\",\"(\",\"expression\",\",\",\"expression\",\")\"], \r\n\t     \"ISIRI\": [\"ISIRI\",\"(\",\"expression\",\")\"], \r\n\t     \"ISURI\": [\"ISURI\",\"(\",\"expression\",\")\"], \r\n\t     \"ISBLANK\": [\"ISBLANK\",\"(\",\"expression\",\")\"], \r\n\t     \"ISLITERAL\": [\"ISLITERAL\",\"(\",\"expression\",\")\"], \r\n\t     \"ISNUMERIC\": [\"ISNUMERIC\",\"(\",\"expression\",\")\"], \r\n\t     \"REGEX\": [\"regexExpression\"], \r\n\t     \"EXISTS\": [\"existsFunc\"], \r\n\t     \"NOT\": [\"notExistsFunc\"]}, \r\n\t  \"clear\" : {\r\n\t     \"CLEAR\": [\"CLEAR\",\"?SILENT_2\",\"graphRefAll\"]}, \r\n\t  \"collection\" : {\r\n\t     \"(\": [\"(\",\"+graphNode\",\")\"]}, \r\n\t  \"collectionPath\" : {\r\n\t     \"(\": [\"(\",\"+graphNodePath\",\")\"]}, \r\n\t  \"conditionalAndExpression\" : {\r\n\t     \"!\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"+\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"-\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"VAR1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"VAR2\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"(\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"STR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"LANG\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"LANGMATCHES\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"DATATYPE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"BOUND\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"IRI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"URI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"BNODE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"RAND\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"ABS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"CEIL\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"FLOOR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"ROUND\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"CONCAT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"STRLEN\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"UCASE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"LCASE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"ENCODE_FOR_URI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"CONTAINS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"STRSTARTS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"STRENDS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"STRBEFORE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"STRAFTER\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"YEAR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"MONTH\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"DAY\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"HOURS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"MINUTES\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"SECONDS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"TIMEZONE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"TZ\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"NOW\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"UUID\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"STRUUID\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"MD5\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"SHA1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"SHA256\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"SHA384\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"SHA512\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"COALESCE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"IF\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"STRLANG\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"STRDT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"SAMETERM\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"ISIRI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"ISURI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"ISBLANK\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"ISLITERAL\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"ISNUMERIC\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"TRUE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"FALSE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"COUNT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"SUM\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"MIN\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"MAX\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"AVG\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"SAMPLE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"GROUP_CONCAT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"SUBSTR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"REPLACE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"REGEX\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"EXISTS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"NOT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"IRI_REF\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"STRING_LITERAL1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"STRING_LITERAL2\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"INTEGER\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"DECIMAL\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"DOUBLE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"INTEGER_POSITIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"PNAME_LN\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n\t     \"PNAME_NS\": [\"valueLogical\",\"*[&&,valueLogical]\"]}, \r\n\t  \"conditionalOrExpression\" : {\r\n\t     \"!\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"+\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"-\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"VAR1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"VAR2\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"(\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"STR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"LANG\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"LANGMATCHES\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"DATATYPE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"BOUND\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"IRI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"URI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"BNODE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"RAND\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"ABS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"CEIL\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"FLOOR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"ROUND\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"CONCAT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"STRLEN\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"UCASE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"LCASE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"ENCODE_FOR_URI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"CONTAINS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"STRSTARTS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"STRENDS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"STRBEFORE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"STRAFTER\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"YEAR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"MONTH\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"DAY\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"HOURS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"MINUTES\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"SECONDS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"TIMEZONE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"TZ\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"NOW\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"UUID\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"STRUUID\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"MD5\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"SHA1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"SHA256\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"SHA384\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"SHA512\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"COALESCE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"IF\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"STRLANG\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"STRDT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"SAMETERM\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"ISIRI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"ISURI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"ISBLANK\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"ISLITERAL\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"ISNUMERIC\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"TRUE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"FALSE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"COUNT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"SUM\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"MIN\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"MAX\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"AVG\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"SAMPLE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"GROUP_CONCAT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"SUBSTR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"REPLACE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"REGEX\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"EXISTS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"NOT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"IRI_REF\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"STRING_LITERAL1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"STRING_LITERAL2\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"INTEGER\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"DECIMAL\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"DOUBLE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"INTEGER_POSITIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"PNAME_LN\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n\t     \"PNAME_NS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"]}, \r\n\t  \"constraint\" : {\r\n\t     \"(\": [\"brackettedExpression\"], \r\n\t     \"STR\": [\"builtInCall\"], \r\n\t     \"LANG\": [\"builtInCall\"], \r\n\t     \"LANGMATCHES\": [\"builtInCall\"], \r\n\t     \"DATATYPE\": [\"builtInCall\"], \r\n\t     \"BOUND\": [\"builtInCall\"], \r\n\t     \"IRI\": [\"builtInCall\"], \r\n\t     \"URI\": [\"builtInCall\"], \r\n\t     \"BNODE\": [\"builtInCall\"], \r\n\t     \"RAND\": [\"builtInCall\"], \r\n\t     \"ABS\": [\"builtInCall\"], \r\n\t     \"CEIL\": [\"builtInCall\"], \r\n\t     \"FLOOR\": [\"builtInCall\"], \r\n\t     \"ROUND\": [\"builtInCall\"], \r\n\t     \"CONCAT\": [\"builtInCall\"], \r\n\t     \"STRLEN\": [\"builtInCall\"], \r\n\t     \"UCASE\": [\"builtInCall\"], \r\n\t     \"LCASE\": [\"builtInCall\"], \r\n\t     \"ENCODE_FOR_URI\": [\"builtInCall\"], \r\n\t     \"CONTAINS\": [\"builtInCall\"], \r\n\t     \"STRSTARTS\": [\"builtInCall\"], \r\n\t     \"STRENDS\": [\"builtInCall\"], \r\n\t     \"STRBEFORE\": [\"builtInCall\"], \r\n\t     \"STRAFTER\": [\"builtInCall\"], \r\n\t     \"YEAR\": [\"builtInCall\"], \r\n\t     \"MONTH\": [\"builtInCall\"], \r\n\t     \"DAY\": [\"builtInCall\"], \r\n\t     \"HOURS\": [\"builtInCall\"], \r\n\t     \"MINUTES\": [\"builtInCall\"], \r\n\t     \"SECONDS\": [\"builtInCall\"], \r\n\t     \"TIMEZONE\": [\"builtInCall\"], \r\n\t     \"TZ\": [\"builtInCall\"], \r\n\t     \"NOW\": [\"builtInCall\"], \r\n\t     \"UUID\": [\"builtInCall\"], \r\n\t     \"STRUUID\": [\"builtInCall\"], \r\n\t     \"MD5\": [\"builtInCall\"], \r\n\t     \"SHA1\": [\"builtInCall\"], \r\n\t     \"SHA256\": [\"builtInCall\"], \r\n\t     \"SHA384\": [\"builtInCall\"], \r\n\t     \"SHA512\": [\"builtInCall\"], \r\n\t     \"COALESCE\": [\"builtInCall\"], \r\n\t     \"IF\": [\"builtInCall\"], \r\n\t     \"STRLANG\": [\"builtInCall\"], \r\n\t     \"STRDT\": [\"builtInCall\"], \r\n\t     \"SAMETERM\": [\"builtInCall\"], \r\n\t     \"ISIRI\": [\"builtInCall\"], \r\n\t     \"ISURI\": [\"builtInCall\"], \r\n\t     \"ISBLANK\": [\"builtInCall\"], \r\n\t     \"ISLITERAL\": [\"builtInCall\"], \r\n\t     \"ISNUMERIC\": [\"builtInCall\"], \r\n\t     \"SUBSTR\": [\"builtInCall\"], \r\n\t     \"REPLACE\": [\"builtInCall\"], \r\n\t     \"REGEX\": [\"builtInCall\"], \r\n\t     \"EXISTS\": [\"builtInCall\"], \r\n\t     \"NOT\": [\"builtInCall\"], \r\n\t     \"IRI_REF\": [\"functionCall\"], \r\n\t     \"PNAME_LN\": [\"functionCall\"], \r\n\t     \"PNAME_NS\": [\"functionCall\"]}, \r\n\t  \"constructQuery\" : {\r\n\t     \"CONSTRUCT\": [\"CONSTRUCT\",\"or([[constructTemplate,*datasetClause,whereClause,solutionModifier],[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]])\"]}, \r\n\t  \"constructTemplate\" : {\r\n\t     \"{\": [\"{\",\"?constructTriples\",\"}\"]}, \r\n\t  \"constructTriples\" : {\r\n\t     \"VAR1\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n\t     \"VAR2\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n\t     \"NIL\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n\t     \"(\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n\t     \"[\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n\t     \"IRI_REF\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n\t     \"TRUE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n\t     \"FALSE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n\t     \"BLANK_NODE_LABEL\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n\t     \"ANON\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n\t     \"PNAME_LN\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n\t     \"PNAME_NS\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n\t     \"STRING_LITERAL1\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n\t     \"STRING_LITERAL2\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n\t     \"INTEGER\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n\t     \"DECIMAL\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n\t     \"DOUBLE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n\t     \"INTEGER_POSITIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"]}, \r\n\t  \"copy\" : {\r\n\t     \"COPY\": [\"COPY\",\"?SILENT_4\",\"graphOrDefault\",\"TO\",\"graphOrDefault\"]}, \r\n\t  \"create\" : {\r\n\t     \"CREATE\": [\"CREATE\",\"?SILENT_3\",\"graphRef\"]}, \r\n\t  \"dataBlock\" : {\r\n\t     \"NIL\": [\"or([inlineDataOneVar,inlineDataFull])\"], \r\n\t     \"(\": [\"or([inlineDataOneVar,inlineDataFull])\"], \r\n\t     \"VAR1\": [\"or([inlineDataOneVar,inlineDataFull])\"], \r\n\t     \"VAR2\": [\"or([inlineDataOneVar,inlineDataFull])\"]}, \r\n\t  \"dataBlockValue\" : {\r\n\t     \"IRI_REF\": [\"iriRef\"], \r\n\t     \"PNAME_LN\": [\"iriRef\"], \r\n\t     \"PNAME_NS\": [\"iriRef\"], \r\n\t     \"STRING_LITERAL1\": [\"rdfLiteral\"], \r\n\t     \"STRING_LITERAL2\": [\"rdfLiteral\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"rdfLiteral\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"rdfLiteral\"], \r\n\t     \"INTEGER\": [\"numericLiteral\"], \r\n\t     \"DECIMAL\": [\"numericLiteral\"], \r\n\t     \"DOUBLE\": [\"numericLiteral\"], \r\n\t     \"INTEGER_POSITIVE\": [\"numericLiteral\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"numericLiteral\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"numericLiteral\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"numericLiteral\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"numericLiteral\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"numericLiteral\"], \r\n\t     \"TRUE\": [\"booleanLiteral\"], \r\n\t     \"FALSE\": [\"booleanLiteral\"], \r\n\t     \"UNDEF\": [\"UNDEF\"]}, \r\n\t  \"datasetClause\" : {\r\n\t     \"FROM\": [\"FROM\",\"or([defaultGraphClause,namedGraphClause])\"]}, \r\n\t  \"defaultGraphClause\" : {\r\n\t     \"IRI_REF\": [\"sourceSelector\"], \r\n\t     \"PNAME_LN\": [\"sourceSelector\"], \r\n\t     \"PNAME_NS\": [\"sourceSelector\"]}, \r\n\t  \"delete1\" : {\r\n\t     \"DATA\": [\"DATA\",\"quadDataNoBnodes\"], \r\n\t     \"WHERE\": [\"WHERE\",\"quadPatternNoBnodes\"], \r\n\t     \"{\": [\"quadPatternNoBnodes\",\"?insertClause\",\"*usingClause\",\"WHERE\",\"groupGraphPattern\"]}, \r\n\t  \"deleteClause\" : {\r\n\t     \"DELETE\": [\"DELETE\",\"quadPattern\"]}, \r\n\t  \"describeDatasetClause\" : {\r\n\t     \"FROM\": [\"FROM\",\"or([defaultGraphClause,namedGraphClause])\"]}, \r\n\t  \"describeQuery\" : {\r\n\t     \"DESCRIBE\": [\"DESCRIBE\",\"or([+varOrIRIref,*])\",\"*describeDatasetClause\",\"?whereClause\",\"solutionModifier\"]}, \r\n\t  \"disallowBnodes\" : {\r\n\t     \"}\": [], \r\n\t     \"GRAPH\": [], \r\n\t     \"VAR1\": [], \r\n\t     \"VAR2\": [], \r\n\t     \"NIL\": [], \r\n\t     \"(\": [], \r\n\t     \"[\": [], \r\n\t     \"IRI_REF\": [], \r\n\t     \"TRUE\": [], \r\n\t     \"FALSE\": [], \r\n\t     \"BLANK_NODE_LABEL\": [], \r\n\t     \"ANON\": [], \r\n\t     \"PNAME_LN\": [], \r\n\t     \"PNAME_NS\": [], \r\n\t     \"STRING_LITERAL1\": [], \r\n\t     \"STRING_LITERAL2\": [], \r\n\t     \"STRING_LITERAL_LONG1\": [], \r\n\t     \"STRING_LITERAL_LONG2\": [], \r\n\t     \"INTEGER\": [], \r\n\t     \"DECIMAL\": [], \r\n\t     \"DOUBLE\": [], \r\n\t     \"INTEGER_POSITIVE\": [], \r\n\t     \"DECIMAL_POSITIVE\": [], \r\n\t     \"DOUBLE_POSITIVE\": [], \r\n\t     \"INTEGER_NEGATIVE\": [], \r\n\t     \"DECIMAL_NEGATIVE\": [], \r\n\t     \"DOUBLE_NEGATIVE\": []}, \r\n\t  \"disallowVars\" : {\r\n\t     \"}\": [], \r\n\t     \"GRAPH\": [], \r\n\t     \"VAR1\": [], \r\n\t     \"VAR2\": [], \r\n\t     \"NIL\": [], \r\n\t     \"(\": [], \r\n\t     \"[\": [], \r\n\t     \"IRI_REF\": [], \r\n\t     \"TRUE\": [], \r\n\t     \"FALSE\": [], \r\n\t     \"BLANK_NODE_LABEL\": [], \r\n\t     \"ANON\": [], \r\n\t     \"PNAME_LN\": [], \r\n\t     \"PNAME_NS\": [], \r\n\t     \"STRING_LITERAL1\": [], \r\n\t     \"STRING_LITERAL2\": [], \r\n\t     \"STRING_LITERAL_LONG1\": [], \r\n\t     \"STRING_LITERAL_LONG2\": [], \r\n\t     \"INTEGER\": [], \r\n\t     \"DECIMAL\": [], \r\n\t     \"DOUBLE\": [], \r\n\t     \"INTEGER_POSITIVE\": [], \r\n\t     \"DECIMAL_POSITIVE\": [], \r\n\t     \"DOUBLE_POSITIVE\": [], \r\n\t     \"INTEGER_NEGATIVE\": [], \r\n\t     \"DECIMAL_NEGATIVE\": [], \r\n\t     \"DOUBLE_NEGATIVE\": []}, \r\n\t  \"drop\" : {\r\n\t     \"DROP\": [\"DROP\",\"?SILENT_2\",\"graphRefAll\"]}, \r\n\t  \"existsFunc\" : {\r\n\t     \"EXISTS\": [\"EXISTS\",\"groupGraphPattern\"]}, \r\n\t  \"expression\" : {\r\n\t     \"!\": [\"conditionalOrExpression\"], \r\n\t     \"+\": [\"conditionalOrExpression\"], \r\n\t     \"-\": [\"conditionalOrExpression\"], \r\n\t     \"VAR1\": [\"conditionalOrExpression\"], \r\n\t     \"VAR2\": [\"conditionalOrExpression\"], \r\n\t     \"(\": [\"conditionalOrExpression\"], \r\n\t     \"STR\": [\"conditionalOrExpression\"], \r\n\t     \"LANG\": [\"conditionalOrExpression\"], \r\n\t     \"LANGMATCHES\": [\"conditionalOrExpression\"], \r\n\t     \"DATATYPE\": [\"conditionalOrExpression\"], \r\n\t     \"BOUND\": [\"conditionalOrExpression\"], \r\n\t     \"IRI\": [\"conditionalOrExpression\"], \r\n\t     \"URI\": [\"conditionalOrExpression\"], \r\n\t     \"BNODE\": [\"conditionalOrExpression\"], \r\n\t     \"RAND\": [\"conditionalOrExpression\"], \r\n\t     \"ABS\": [\"conditionalOrExpression\"], \r\n\t     \"CEIL\": [\"conditionalOrExpression\"], \r\n\t     \"FLOOR\": [\"conditionalOrExpression\"], \r\n\t     \"ROUND\": [\"conditionalOrExpression\"], \r\n\t     \"CONCAT\": [\"conditionalOrExpression\"], \r\n\t     \"STRLEN\": [\"conditionalOrExpression\"], \r\n\t     \"UCASE\": [\"conditionalOrExpression\"], \r\n\t     \"LCASE\": [\"conditionalOrExpression\"], \r\n\t     \"ENCODE_FOR_URI\": [\"conditionalOrExpression\"], \r\n\t     \"CONTAINS\": [\"conditionalOrExpression\"], \r\n\t     \"STRSTARTS\": [\"conditionalOrExpression\"], \r\n\t     \"STRENDS\": [\"conditionalOrExpression\"], \r\n\t     \"STRBEFORE\": [\"conditionalOrExpression\"], \r\n\t     \"STRAFTER\": [\"conditionalOrExpression\"], \r\n\t     \"YEAR\": [\"conditionalOrExpression\"], \r\n\t     \"MONTH\": [\"conditionalOrExpression\"], \r\n\t     \"DAY\": [\"conditionalOrExpression\"], \r\n\t     \"HOURS\": [\"conditionalOrExpression\"], \r\n\t     \"MINUTES\": [\"conditionalOrExpression\"], \r\n\t     \"SECONDS\": [\"conditionalOrExpression\"], \r\n\t     \"TIMEZONE\": [\"conditionalOrExpression\"], \r\n\t     \"TZ\": [\"conditionalOrExpression\"], \r\n\t     \"NOW\": [\"conditionalOrExpression\"], \r\n\t     \"UUID\": [\"conditionalOrExpression\"], \r\n\t     \"STRUUID\": [\"conditionalOrExpression\"], \r\n\t     \"MD5\": [\"conditionalOrExpression\"], \r\n\t     \"SHA1\": [\"conditionalOrExpression\"], \r\n\t     \"SHA256\": [\"conditionalOrExpression\"], \r\n\t     \"SHA384\": [\"conditionalOrExpression\"], \r\n\t     \"SHA512\": [\"conditionalOrExpression\"], \r\n\t     \"COALESCE\": [\"conditionalOrExpression\"], \r\n\t     \"IF\": [\"conditionalOrExpression\"], \r\n\t     \"STRLANG\": [\"conditionalOrExpression\"], \r\n\t     \"STRDT\": [\"conditionalOrExpression\"], \r\n\t     \"SAMETERM\": [\"conditionalOrExpression\"], \r\n\t     \"ISIRI\": [\"conditionalOrExpression\"], \r\n\t     \"ISURI\": [\"conditionalOrExpression\"], \r\n\t     \"ISBLANK\": [\"conditionalOrExpression\"], \r\n\t     \"ISLITERAL\": [\"conditionalOrExpression\"], \r\n\t     \"ISNUMERIC\": [\"conditionalOrExpression\"], \r\n\t     \"TRUE\": [\"conditionalOrExpression\"], \r\n\t     \"FALSE\": [\"conditionalOrExpression\"], \r\n\t     \"COUNT\": [\"conditionalOrExpression\"], \r\n\t     \"SUM\": [\"conditionalOrExpression\"], \r\n\t     \"MIN\": [\"conditionalOrExpression\"], \r\n\t     \"MAX\": [\"conditionalOrExpression\"], \r\n\t     \"AVG\": [\"conditionalOrExpression\"], \r\n\t     \"SAMPLE\": [\"conditionalOrExpression\"], \r\n\t     \"GROUP_CONCAT\": [\"conditionalOrExpression\"], \r\n\t     \"SUBSTR\": [\"conditionalOrExpression\"], \r\n\t     \"REPLACE\": [\"conditionalOrExpression\"], \r\n\t     \"REGEX\": [\"conditionalOrExpression\"], \r\n\t     \"EXISTS\": [\"conditionalOrExpression\"], \r\n\t     \"NOT\": [\"conditionalOrExpression\"], \r\n\t     \"IRI_REF\": [\"conditionalOrExpression\"], \r\n\t     \"STRING_LITERAL1\": [\"conditionalOrExpression\"], \r\n\t     \"STRING_LITERAL2\": [\"conditionalOrExpression\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"conditionalOrExpression\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"conditionalOrExpression\"], \r\n\t     \"INTEGER\": [\"conditionalOrExpression\"], \r\n\t     \"DECIMAL\": [\"conditionalOrExpression\"], \r\n\t     \"DOUBLE\": [\"conditionalOrExpression\"], \r\n\t     \"INTEGER_POSITIVE\": [\"conditionalOrExpression\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"conditionalOrExpression\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"conditionalOrExpression\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"conditionalOrExpression\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"conditionalOrExpression\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"conditionalOrExpression\"], \r\n\t     \"PNAME_LN\": [\"conditionalOrExpression\"], \r\n\t     \"PNAME_NS\": [\"conditionalOrExpression\"]}, \r\n\t  \"expressionList\" : {\r\n\t     \"NIL\": [\"NIL\"], \r\n\t     \"(\": [\"(\",\"expression\",\"*[,,expression]\",\")\"]}, \r\n\t  \"filter\" : {\r\n\t     \"FILTER\": [\"FILTER\",\"constraint\"]}, \r\n\t  \"functionCall\" : {\r\n\t     \"IRI_REF\": [\"iriRef\",\"argList\"], \r\n\t     \"PNAME_LN\": [\"iriRef\",\"argList\"], \r\n\t     \"PNAME_NS\": [\"iriRef\",\"argList\"]}, \r\n\t  \"graphGraphPattern\" : {\r\n\t     \"GRAPH\": [\"GRAPH\",\"varOrIRIref\",\"groupGraphPattern\"]}, \r\n\t  \"graphNode\" : {\r\n\t     \"VAR1\": [\"varOrTerm\"], \r\n\t     \"VAR2\": [\"varOrTerm\"], \r\n\t     \"NIL\": [\"varOrTerm\"], \r\n\t     \"IRI_REF\": [\"varOrTerm\"], \r\n\t     \"TRUE\": [\"varOrTerm\"], \r\n\t     \"FALSE\": [\"varOrTerm\"], \r\n\t     \"BLANK_NODE_LABEL\": [\"varOrTerm\"], \r\n\t     \"ANON\": [\"varOrTerm\"], \r\n\t     \"PNAME_LN\": [\"varOrTerm\"], \r\n\t     \"PNAME_NS\": [\"varOrTerm\"], \r\n\t     \"STRING_LITERAL1\": [\"varOrTerm\"], \r\n\t     \"STRING_LITERAL2\": [\"varOrTerm\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"varOrTerm\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"varOrTerm\"], \r\n\t     \"INTEGER\": [\"varOrTerm\"], \r\n\t     \"DECIMAL\": [\"varOrTerm\"], \r\n\t     \"DOUBLE\": [\"varOrTerm\"], \r\n\t     \"INTEGER_POSITIVE\": [\"varOrTerm\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"varOrTerm\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"varOrTerm\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"varOrTerm\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"varOrTerm\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"varOrTerm\"], \r\n\t     \"(\": [\"triplesNode\"], \r\n\t     \"[\": [\"triplesNode\"]}, \r\n\t  \"graphNodePath\" : {\r\n\t     \"VAR1\": [\"varOrTerm\"], \r\n\t     \"VAR2\": [\"varOrTerm\"], \r\n\t     \"NIL\": [\"varOrTerm\"], \r\n\t     \"IRI_REF\": [\"varOrTerm\"], \r\n\t     \"TRUE\": [\"varOrTerm\"], \r\n\t     \"FALSE\": [\"varOrTerm\"], \r\n\t     \"BLANK_NODE_LABEL\": [\"varOrTerm\"], \r\n\t     \"ANON\": [\"varOrTerm\"], \r\n\t     \"PNAME_LN\": [\"varOrTerm\"], \r\n\t     \"PNAME_NS\": [\"varOrTerm\"], \r\n\t     \"STRING_LITERAL1\": [\"varOrTerm\"], \r\n\t     \"STRING_LITERAL2\": [\"varOrTerm\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"varOrTerm\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"varOrTerm\"], \r\n\t     \"INTEGER\": [\"varOrTerm\"], \r\n\t     \"DECIMAL\": [\"varOrTerm\"], \r\n\t     \"DOUBLE\": [\"varOrTerm\"], \r\n\t     \"INTEGER_POSITIVE\": [\"varOrTerm\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"varOrTerm\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"varOrTerm\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"varOrTerm\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"varOrTerm\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"varOrTerm\"], \r\n\t     \"(\": [\"triplesNodePath\"], \r\n\t     \"[\": [\"triplesNodePath\"]}, \r\n\t  \"graphOrDefault\" : {\r\n\t     \"DEFAULT\": [\"DEFAULT\"], \r\n\t     \"IRI_REF\": [\"?GRAPH\",\"iriRef\"], \r\n\t     \"PNAME_LN\": [\"?GRAPH\",\"iriRef\"], \r\n\t     \"PNAME_NS\": [\"?GRAPH\",\"iriRef\"], \r\n\t     \"GRAPH\": [\"?GRAPH\",\"iriRef\"]}, \r\n\t  \"graphPatternNotTriples\" : {\r\n\t     \"{\": [\"groupOrUnionGraphPattern\"], \r\n\t     \"OPTIONAL\": [\"optionalGraphPattern\"], \r\n\t     \"MINUS\": [\"minusGraphPattern\"], \r\n\t     \"GRAPH\": [\"graphGraphPattern\"], \r\n\t     \"SERVICE\": [\"serviceGraphPattern\"], \r\n\t     \"FILTER\": [\"filter\"], \r\n\t     \"BIND\": [\"bind\"], \r\n\t     \"VALUES\": [\"inlineData\"]}, \r\n\t  \"graphRef\" : {\r\n\t     \"GRAPH\": [\"GRAPH\",\"iriRef\"]}, \r\n\t  \"graphRefAll\" : {\r\n\t     \"GRAPH\": [\"graphRef\"], \r\n\t     \"DEFAULT\": [\"DEFAULT\"], \r\n\t     \"NAMED\": [\"NAMED\"], \r\n\t     \"ALL\": [\"ALL\"]}, \r\n\t  \"graphTerm\" : {\r\n\t     \"IRI_REF\": [\"iriRef\"], \r\n\t     \"PNAME_LN\": [\"iriRef\"], \r\n\t     \"PNAME_NS\": [\"iriRef\"], \r\n\t     \"STRING_LITERAL1\": [\"rdfLiteral\"], \r\n\t     \"STRING_LITERAL2\": [\"rdfLiteral\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"rdfLiteral\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"rdfLiteral\"], \r\n\t     \"INTEGER\": [\"numericLiteral\"], \r\n\t     \"DECIMAL\": [\"numericLiteral\"], \r\n\t     \"DOUBLE\": [\"numericLiteral\"], \r\n\t     \"INTEGER_POSITIVE\": [\"numericLiteral\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"numericLiteral\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"numericLiteral\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"numericLiteral\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"numericLiteral\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"numericLiteral\"], \r\n\t     \"TRUE\": [\"booleanLiteral\"], \r\n\t     \"FALSE\": [\"booleanLiteral\"], \r\n\t     \"BLANK_NODE_LABEL\": [\"blankNode\"], \r\n\t     \"ANON\": [\"blankNode\"], \r\n\t     \"NIL\": [\"NIL\"]}, \r\n\t  \"groupClause\" : {\r\n\t     \"GROUP\": [\"GROUP\",\"BY\",\"+groupCondition\"]}, \r\n\t  \"groupCondition\" : {\r\n\t     \"STR\": [\"builtInCall\"], \r\n\t     \"LANG\": [\"builtInCall\"], \r\n\t     \"LANGMATCHES\": [\"builtInCall\"], \r\n\t     \"DATATYPE\": [\"builtInCall\"], \r\n\t     \"BOUND\": [\"builtInCall\"], \r\n\t     \"IRI\": [\"builtInCall\"], \r\n\t     \"URI\": [\"builtInCall\"], \r\n\t     \"BNODE\": [\"builtInCall\"], \r\n\t     \"RAND\": [\"builtInCall\"], \r\n\t     \"ABS\": [\"builtInCall\"], \r\n\t     \"CEIL\": [\"builtInCall\"], \r\n\t     \"FLOOR\": [\"builtInCall\"], \r\n\t     \"ROUND\": [\"builtInCall\"], \r\n\t     \"CONCAT\": [\"builtInCall\"], \r\n\t     \"STRLEN\": [\"builtInCall\"], \r\n\t     \"UCASE\": [\"builtInCall\"], \r\n\t     \"LCASE\": [\"builtInCall\"], \r\n\t     \"ENCODE_FOR_URI\": [\"builtInCall\"], \r\n\t     \"CONTAINS\": [\"builtInCall\"], \r\n\t     \"STRSTARTS\": [\"builtInCall\"], \r\n\t     \"STRENDS\": [\"builtInCall\"], \r\n\t     \"STRBEFORE\": [\"builtInCall\"], \r\n\t     \"STRAFTER\": [\"builtInCall\"], \r\n\t     \"YEAR\": [\"builtInCall\"], \r\n\t     \"MONTH\": [\"builtInCall\"], \r\n\t     \"DAY\": [\"builtInCall\"], \r\n\t     \"HOURS\": [\"builtInCall\"], \r\n\t     \"MINUTES\": [\"builtInCall\"], \r\n\t     \"SECONDS\": [\"builtInCall\"], \r\n\t     \"TIMEZONE\": [\"builtInCall\"], \r\n\t     \"TZ\": [\"builtInCall\"], \r\n\t     \"NOW\": [\"builtInCall\"], \r\n\t     \"UUID\": [\"builtInCall\"], \r\n\t     \"STRUUID\": [\"builtInCall\"], \r\n\t     \"MD5\": [\"builtInCall\"], \r\n\t     \"SHA1\": [\"builtInCall\"], \r\n\t     \"SHA256\": [\"builtInCall\"], \r\n\t     \"SHA384\": [\"builtInCall\"], \r\n\t     \"SHA512\": [\"builtInCall\"], \r\n\t     \"COALESCE\": [\"builtInCall\"], \r\n\t     \"IF\": [\"builtInCall\"], \r\n\t     \"STRLANG\": [\"builtInCall\"], \r\n\t     \"STRDT\": [\"builtInCall\"], \r\n\t     \"SAMETERM\": [\"builtInCall\"], \r\n\t     \"ISIRI\": [\"builtInCall\"], \r\n\t     \"ISURI\": [\"builtInCall\"], \r\n\t     \"ISBLANK\": [\"builtInCall\"], \r\n\t     \"ISLITERAL\": [\"builtInCall\"], \r\n\t     \"ISNUMERIC\": [\"builtInCall\"], \r\n\t     \"SUBSTR\": [\"builtInCall\"], \r\n\t     \"REPLACE\": [\"builtInCall\"], \r\n\t     \"REGEX\": [\"builtInCall\"], \r\n\t     \"EXISTS\": [\"builtInCall\"], \r\n\t     \"NOT\": [\"builtInCall\"], \r\n\t     \"IRI_REF\": [\"functionCall\"], \r\n\t     \"PNAME_LN\": [\"functionCall\"], \r\n\t     \"PNAME_NS\": [\"functionCall\"], \r\n\t     \"(\": [\"(\",\"expression\",\"?[AS,var]\",\")\"], \r\n\t     \"VAR1\": [\"var\"], \r\n\t     \"VAR2\": [\"var\"]}, \r\n\t  \"groupGraphPattern\" : {\r\n\t     \"{\": [\"{\",\"or([subSelect,groupGraphPatternSub])\",\"}\"]}, \r\n\t  \"groupGraphPatternSub\" : {\r\n\t     \"{\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"OPTIONAL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"MINUS\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"GRAPH\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"SERVICE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"FILTER\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"BIND\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"VALUES\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"VAR1\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"VAR2\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"NIL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"(\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"[\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"IRI_REF\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"TRUE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"FALSE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"BLANK_NODE_LABEL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"ANON\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"PNAME_LN\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"PNAME_NS\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"STRING_LITERAL1\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"STRING_LITERAL2\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"INTEGER\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"DECIMAL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"DOUBLE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"INTEGER_POSITIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n\t     \"}\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"]}, \r\n\t  \"groupOrUnionGraphPattern\" : {\r\n\t     \"{\": [\"groupGraphPattern\",\"*[UNION,groupGraphPattern]\"]}, \r\n\t  \"havingClause\" : {\r\n\t     \"HAVING\": [\"HAVING\",\"+havingCondition\"]}, \r\n\t  \"havingCondition\" : {\r\n\t     \"(\": [\"constraint\"], \r\n\t     \"STR\": [\"constraint\"], \r\n\t     \"LANG\": [\"constraint\"], \r\n\t     \"LANGMATCHES\": [\"constraint\"], \r\n\t     \"DATATYPE\": [\"constraint\"], \r\n\t     \"BOUND\": [\"constraint\"], \r\n\t     \"IRI\": [\"constraint\"], \r\n\t     \"URI\": [\"constraint\"], \r\n\t     \"BNODE\": [\"constraint\"], \r\n\t     \"RAND\": [\"constraint\"], \r\n\t     \"ABS\": [\"constraint\"], \r\n\t     \"CEIL\": [\"constraint\"], \r\n\t     \"FLOOR\": [\"constraint\"], \r\n\t     \"ROUND\": [\"constraint\"], \r\n\t     \"CONCAT\": [\"constraint\"], \r\n\t     \"STRLEN\": [\"constraint\"], \r\n\t     \"UCASE\": [\"constraint\"], \r\n\t     \"LCASE\": [\"constraint\"], \r\n\t     \"ENCODE_FOR_URI\": [\"constraint\"], \r\n\t     \"CONTAINS\": [\"constraint\"], \r\n\t     \"STRSTARTS\": [\"constraint\"], \r\n\t     \"STRENDS\": [\"constraint\"], \r\n\t     \"STRBEFORE\": [\"constraint\"], \r\n\t     \"STRAFTER\": [\"constraint\"], \r\n\t     \"YEAR\": [\"constraint\"], \r\n\t     \"MONTH\": [\"constraint\"], \r\n\t     \"DAY\": [\"constraint\"], \r\n\t     \"HOURS\": [\"constraint\"], \r\n\t     \"MINUTES\": [\"constraint\"], \r\n\t     \"SECONDS\": [\"constraint\"], \r\n\t     \"TIMEZONE\": [\"constraint\"], \r\n\t     \"TZ\": [\"constraint\"], \r\n\t     \"NOW\": [\"constraint\"], \r\n\t     \"UUID\": [\"constraint\"], \r\n\t     \"STRUUID\": [\"constraint\"], \r\n\t     \"MD5\": [\"constraint\"], \r\n\t     \"SHA1\": [\"constraint\"], \r\n\t     \"SHA256\": [\"constraint\"], \r\n\t     \"SHA384\": [\"constraint\"], \r\n\t     \"SHA512\": [\"constraint\"], \r\n\t     \"COALESCE\": [\"constraint\"], \r\n\t     \"IF\": [\"constraint\"], \r\n\t     \"STRLANG\": [\"constraint\"], \r\n\t     \"STRDT\": [\"constraint\"], \r\n\t     \"SAMETERM\": [\"constraint\"], \r\n\t     \"ISIRI\": [\"constraint\"], \r\n\t     \"ISURI\": [\"constraint\"], \r\n\t     \"ISBLANK\": [\"constraint\"], \r\n\t     \"ISLITERAL\": [\"constraint\"], \r\n\t     \"ISNUMERIC\": [\"constraint\"], \r\n\t     \"SUBSTR\": [\"constraint\"], \r\n\t     \"REPLACE\": [\"constraint\"], \r\n\t     \"REGEX\": [\"constraint\"], \r\n\t     \"EXISTS\": [\"constraint\"], \r\n\t     \"NOT\": [\"constraint\"], \r\n\t     \"IRI_REF\": [\"constraint\"], \r\n\t     \"PNAME_LN\": [\"constraint\"], \r\n\t     \"PNAME_NS\": [\"constraint\"]}, \r\n\t  \"inlineData\" : {\r\n\t     \"VALUES\": [\"VALUES\",\"dataBlock\"]}, \r\n\t  \"inlineDataFull\" : {\r\n\t     \"NIL\": [\"or([NIL,[ (,*var,)]])\",\"{\",\"*or([[ (,*dataBlockValue,)],NIL])\",\"}\"], \r\n\t     \"(\": [\"or([NIL,[ (,*var,)]])\",\"{\",\"*or([[ (,*dataBlockValue,)],NIL])\",\"}\"]}, \r\n\t  \"inlineDataOneVar\" : {\r\n\t     \"VAR1\": [\"var\",\"{\",\"*dataBlockValue\",\"}\"], \r\n\t     \"VAR2\": [\"var\",\"{\",\"*dataBlockValue\",\"}\"]}, \r\n\t  \"insert1\" : {\r\n\t     \"DATA\": [\"DATA\",\"quadData\"], \r\n\t     \"{\": [\"quadPattern\",\"*usingClause\",\"WHERE\",\"groupGraphPattern\"]}, \r\n\t  \"insertClause\" : {\r\n\t     \"INSERT\": [\"INSERT\",\"quadPattern\"]}, \r\n\t  \"integer\" : {\r\n\t     \"INTEGER\": [\"INTEGER\"]}, \r\n\t  \"iriRef\" : {\r\n\t     \"IRI_REF\": [\"IRI_REF\"], \r\n\t     \"PNAME_LN\": [\"prefixedName\"], \r\n\t     \"PNAME_NS\": [\"prefixedName\"]}, \r\n\t  \"iriRefOrFunction\" : {\r\n\t     \"IRI_REF\": [\"iriRef\",\"?argList\"], \r\n\t     \"PNAME_LN\": [\"iriRef\",\"?argList\"], \r\n\t     \"PNAME_NS\": [\"iriRef\",\"?argList\"]}, \r\n\t  \"limitClause\" : {\r\n\t     \"LIMIT\": [\"LIMIT\",\"INTEGER\"]}, \r\n\t  \"limitOffsetClauses\" : {\r\n\t     \"LIMIT\": [\"limitClause\",\"?offsetClause\"], \r\n\t     \"OFFSET\": [\"offsetClause\",\"?limitClause\"]}, \r\n\t  \"load\" : {\r\n\t     \"LOAD\": [\"LOAD\",\"?SILENT_1\",\"iriRef\",\"?[INTO,graphRef]\"]}, \r\n\t  \"minusGraphPattern\" : {\r\n\t     \"MINUS\": [\"MINUS\",\"groupGraphPattern\"]}, \r\n\t  \"modify\" : {\r\n\t     \"WITH\": [\"WITH\",\"iriRef\",\"or([[deleteClause,?insertClause],insertClause])\",\"*usingClause\",\"WHERE\",\"groupGraphPattern\"]}, \r\n\t  \"move\" : {\r\n\t     \"MOVE\": [\"MOVE\",\"?SILENT_4\",\"graphOrDefault\",\"TO\",\"graphOrDefault\"]}, \r\n\t  \"multiplicativeExpression\" : {\r\n\t     \"!\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"+\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"-\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"VAR1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"VAR2\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"(\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"STR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"LANG\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"LANGMATCHES\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"DATATYPE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"BOUND\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"IRI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"URI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"BNODE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"RAND\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"ABS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"CEIL\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"FLOOR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"ROUND\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"CONCAT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"STRLEN\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"UCASE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"LCASE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"ENCODE_FOR_URI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"CONTAINS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"STRSTARTS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"STRENDS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"STRBEFORE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"STRAFTER\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"YEAR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"MONTH\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"DAY\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"HOURS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"MINUTES\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"SECONDS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"TIMEZONE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"TZ\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"NOW\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"UUID\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"STRUUID\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"MD5\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"SHA1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"SHA256\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"SHA384\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"SHA512\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"COALESCE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"IF\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"STRLANG\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"STRDT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"SAMETERM\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"ISIRI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"ISURI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"ISBLANK\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"ISLITERAL\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"ISNUMERIC\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"TRUE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"FALSE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"COUNT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"SUM\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"MIN\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"MAX\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"AVG\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"SAMPLE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"GROUP_CONCAT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"SUBSTR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"REPLACE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"REGEX\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"EXISTS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"NOT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"IRI_REF\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"STRING_LITERAL1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"STRING_LITERAL2\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"INTEGER\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"DECIMAL\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"DOUBLE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"INTEGER_POSITIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"PNAME_LN\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n\t     \"PNAME_NS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"]}, \r\n\t  \"namedGraphClause\" : {\r\n\t     \"NAMED\": [\"NAMED\",\"sourceSelector\"]}, \r\n\t  \"notExistsFunc\" : {\r\n\t     \"NOT\": [\"NOT\",\"EXISTS\",\"groupGraphPattern\"]}, \r\n\t  \"numericExpression\" : {\r\n\t     \"!\": [\"additiveExpression\"], \r\n\t     \"+\": [\"additiveExpression\"], \r\n\t     \"-\": [\"additiveExpression\"], \r\n\t     \"VAR1\": [\"additiveExpression\"], \r\n\t     \"VAR2\": [\"additiveExpression\"], \r\n\t     \"(\": [\"additiveExpression\"], \r\n\t     \"STR\": [\"additiveExpression\"], \r\n\t     \"LANG\": [\"additiveExpression\"], \r\n\t     \"LANGMATCHES\": [\"additiveExpression\"], \r\n\t     \"DATATYPE\": [\"additiveExpression\"], \r\n\t     \"BOUND\": [\"additiveExpression\"], \r\n\t     \"IRI\": [\"additiveExpression\"], \r\n\t     \"URI\": [\"additiveExpression\"], \r\n\t     \"BNODE\": [\"additiveExpression\"], \r\n\t     \"RAND\": [\"additiveExpression\"], \r\n\t     \"ABS\": [\"additiveExpression\"], \r\n\t     \"CEIL\": [\"additiveExpression\"], \r\n\t     \"FLOOR\": [\"additiveExpression\"], \r\n\t     \"ROUND\": [\"additiveExpression\"], \r\n\t     \"CONCAT\": [\"additiveExpression\"], \r\n\t     \"STRLEN\": [\"additiveExpression\"], \r\n\t     \"UCASE\": [\"additiveExpression\"], \r\n\t     \"LCASE\": [\"additiveExpression\"], \r\n\t     \"ENCODE_FOR_URI\": [\"additiveExpression\"], \r\n\t     \"CONTAINS\": [\"additiveExpression\"], \r\n\t     \"STRSTARTS\": [\"additiveExpression\"], \r\n\t     \"STRENDS\": [\"additiveExpression\"], \r\n\t     \"STRBEFORE\": [\"additiveExpression\"], \r\n\t     \"STRAFTER\": [\"additiveExpression\"], \r\n\t     \"YEAR\": [\"additiveExpression\"], \r\n\t     \"MONTH\": [\"additiveExpression\"], \r\n\t     \"DAY\": [\"additiveExpression\"], \r\n\t     \"HOURS\": [\"additiveExpression\"], \r\n\t     \"MINUTES\": [\"additiveExpression\"], \r\n\t     \"SECONDS\": [\"additiveExpression\"], \r\n\t     \"TIMEZONE\": [\"additiveExpression\"], \r\n\t     \"TZ\": [\"additiveExpression\"], \r\n\t     \"NOW\": [\"additiveExpression\"], \r\n\t     \"UUID\": [\"additiveExpression\"], \r\n\t     \"STRUUID\": [\"additiveExpression\"], \r\n\t     \"MD5\": [\"additiveExpression\"], \r\n\t     \"SHA1\": [\"additiveExpression\"], \r\n\t     \"SHA256\": [\"additiveExpression\"], \r\n\t     \"SHA384\": [\"additiveExpression\"], \r\n\t     \"SHA512\": [\"additiveExpression\"], \r\n\t     \"COALESCE\": [\"additiveExpression\"], \r\n\t     \"IF\": [\"additiveExpression\"], \r\n\t     \"STRLANG\": [\"additiveExpression\"], \r\n\t     \"STRDT\": [\"additiveExpression\"], \r\n\t     \"SAMETERM\": [\"additiveExpression\"], \r\n\t     \"ISIRI\": [\"additiveExpression\"], \r\n\t     \"ISURI\": [\"additiveExpression\"], \r\n\t     \"ISBLANK\": [\"additiveExpression\"], \r\n\t     \"ISLITERAL\": [\"additiveExpression\"], \r\n\t     \"ISNUMERIC\": [\"additiveExpression\"], \r\n\t     \"TRUE\": [\"additiveExpression\"], \r\n\t     \"FALSE\": [\"additiveExpression\"], \r\n\t     \"COUNT\": [\"additiveExpression\"], \r\n\t     \"SUM\": [\"additiveExpression\"], \r\n\t     \"MIN\": [\"additiveExpression\"], \r\n\t     \"MAX\": [\"additiveExpression\"], \r\n\t     \"AVG\": [\"additiveExpression\"], \r\n\t     \"SAMPLE\": [\"additiveExpression\"], \r\n\t     \"GROUP_CONCAT\": [\"additiveExpression\"], \r\n\t     \"SUBSTR\": [\"additiveExpression\"], \r\n\t     \"REPLACE\": [\"additiveExpression\"], \r\n\t     \"REGEX\": [\"additiveExpression\"], \r\n\t     \"EXISTS\": [\"additiveExpression\"], \r\n\t     \"NOT\": [\"additiveExpression\"], \r\n\t     \"IRI_REF\": [\"additiveExpression\"], \r\n\t     \"STRING_LITERAL1\": [\"additiveExpression\"], \r\n\t     \"STRING_LITERAL2\": [\"additiveExpression\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"additiveExpression\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"additiveExpression\"], \r\n\t     \"INTEGER\": [\"additiveExpression\"], \r\n\t     \"DECIMAL\": [\"additiveExpression\"], \r\n\t     \"DOUBLE\": [\"additiveExpression\"], \r\n\t     \"INTEGER_POSITIVE\": [\"additiveExpression\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"additiveExpression\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"additiveExpression\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"additiveExpression\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"additiveExpression\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"additiveExpression\"], \r\n\t     \"PNAME_LN\": [\"additiveExpression\"], \r\n\t     \"PNAME_NS\": [\"additiveExpression\"]}, \r\n\t  \"numericLiteral\" : {\r\n\t     \"INTEGER\": [\"numericLiteralUnsigned\"], \r\n\t     \"DECIMAL\": [\"numericLiteralUnsigned\"], \r\n\t     \"DOUBLE\": [\"numericLiteralUnsigned\"], \r\n\t     \"INTEGER_POSITIVE\": [\"numericLiteralPositive\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"numericLiteralPositive\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"numericLiteralPositive\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"numericLiteralNegative\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"numericLiteralNegative\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"numericLiteralNegative\"]}, \r\n\t  \"numericLiteralNegative\" : {\r\n\t     \"INTEGER_NEGATIVE\": [\"INTEGER_NEGATIVE\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"DECIMAL_NEGATIVE\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"DOUBLE_NEGATIVE\"]}, \r\n\t  \"numericLiteralPositive\" : {\r\n\t     \"INTEGER_POSITIVE\": [\"INTEGER_POSITIVE\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"DECIMAL_POSITIVE\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"DOUBLE_POSITIVE\"]}, \r\n\t  \"numericLiteralUnsigned\" : {\r\n\t     \"INTEGER\": [\"INTEGER\"], \r\n\t     \"DECIMAL\": [\"DECIMAL\"], \r\n\t     \"DOUBLE\": [\"DOUBLE\"]}, \r\n\t  \"object\" : {\r\n\t     \"(\": [\"graphNode\"], \r\n\t     \"[\": [\"graphNode\"], \r\n\t     \"VAR1\": [\"graphNode\"], \r\n\t     \"VAR2\": [\"graphNode\"], \r\n\t     \"NIL\": [\"graphNode\"], \r\n\t     \"IRI_REF\": [\"graphNode\"], \r\n\t     \"TRUE\": [\"graphNode\"], \r\n\t     \"FALSE\": [\"graphNode\"], \r\n\t     \"BLANK_NODE_LABEL\": [\"graphNode\"], \r\n\t     \"ANON\": [\"graphNode\"], \r\n\t     \"PNAME_LN\": [\"graphNode\"], \r\n\t     \"PNAME_NS\": [\"graphNode\"], \r\n\t     \"STRING_LITERAL1\": [\"graphNode\"], \r\n\t     \"STRING_LITERAL2\": [\"graphNode\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"graphNode\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"graphNode\"], \r\n\t     \"INTEGER\": [\"graphNode\"], \r\n\t     \"DECIMAL\": [\"graphNode\"], \r\n\t     \"DOUBLE\": [\"graphNode\"], \r\n\t     \"INTEGER_POSITIVE\": [\"graphNode\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"graphNode\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"graphNode\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"graphNode\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"graphNode\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"graphNode\"]}, \r\n\t  \"objectList\" : {\r\n\t     \"(\": [\"object\",\"*[,,object]\"], \r\n\t     \"[\": [\"object\",\"*[,,object]\"], \r\n\t     \"VAR1\": [\"object\",\"*[,,object]\"], \r\n\t     \"VAR2\": [\"object\",\"*[,,object]\"], \r\n\t     \"NIL\": [\"object\",\"*[,,object]\"], \r\n\t     \"IRI_REF\": [\"object\",\"*[,,object]\"], \r\n\t     \"TRUE\": [\"object\",\"*[,,object]\"], \r\n\t     \"FALSE\": [\"object\",\"*[,,object]\"], \r\n\t     \"BLANK_NODE_LABEL\": [\"object\",\"*[,,object]\"], \r\n\t     \"ANON\": [\"object\",\"*[,,object]\"], \r\n\t     \"PNAME_LN\": [\"object\",\"*[,,object]\"], \r\n\t     \"PNAME_NS\": [\"object\",\"*[,,object]\"], \r\n\t     \"STRING_LITERAL1\": [\"object\",\"*[,,object]\"], \r\n\t     \"STRING_LITERAL2\": [\"object\",\"*[,,object]\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"object\",\"*[,,object]\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"object\",\"*[,,object]\"], \r\n\t     \"INTEGER\": [\"object\",\"*[,,object]\"], \r\n\t     \"DECIMAL\": [\"object\",\"*[,,object]\"], \r\n\t     \"DOUBLE\": [\"object\",\"*[,,object]\"], \r\n\t     \"INTEGER_POSITIVE\": [\"object\",\"*[,,object]\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"object\",\"*[,,object]\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"object\",\"*[,,object]\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"object\",\"*[,,object]\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"object\",\"*[,,object]\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"object\",\"*[,,object]\"]}, \r\n\t  \"objectListPath\" : {\r\n\t     \"(\": [\"objectPath\",\"*[,,objectPath]\"], \r\n\t     \"[\": [\"objectPath\",\"*[,,objectPath]\"], \r\n\t     \"VAR1\": [\"objectPath\",\"*[,,objectPath]\"], \r\n\t     \"VAR2\": [\"objectPath\",\"*[,,objectPath]\"], \r\n\t     \"NIL\": [\"objectPath\",\"*[,,objectPath]\"], \r\n\t     \"IRI_REF\": [\"objectPath\",\"*[,,objectPath]\"], \r\n\t     \"TRUE\": [\"objectPath\",\"*[,,objectPath]\"], \r\n\t     \"FALSE\": [\"objectPath\",\"*[,,objectPath]\"], \r\n\t     \"BLANK_NODE_LABEL\": [\"objectPath\",\"*[,,objectPath]\"], \r\n\t     \"ANON\": [\"objectPath\",\"*[,,objectPath]\"], \r\n\t     \"PNAME_LN\": [\"objectPath\",\"*[,,objectPath]\"], \r\n\t     \"PNAME_NS\": [\"objectPath\",\"*[,,objectPath]\"], \r\n\t     \"STRING_LITERAL1\": [\"objectPath\",\"*[,,objectPath]\"], \r\n\t     \"STRING_LITERAL2\": [\"objectPath\",\"*[,,objectPath]\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"objectPath\",\"*[,,objectPath]\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"objectPath\",\"*[,,objectPath]\"], \r\n\t     \"INTEGER\": [\"objectPath\",\"*[,,objectPath]\"], \r\n\t     \"DECIMAL\": [\"objectPath\",\"*[,,objectPath]\"], \r\n\t     \"DOUBLE\": [\"objectPath\",\"*[,,objectPath]\"], \r\n\t     \"INTEGER_POSITIVE\": [\"objectPath\",\"*[,,objectPath]\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"objectPath\",\"*[,,objectPath]\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"objectPath\",\"*[,,objectPath]\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"objectPath\",\"*[,,objectPath]\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"objectPath\",\"*[,,objectPath]\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"objectPath\",\"*[,,objectPath]\"]}, \r\n\t  \"objectPath\" : {\r\n\t     \"(\": [\"graphNodePath\"], \r\n\t     \"[\": [\"graphNodePath\"], \r\n\t     \"VAR1\": [\"graphNodePath\"], \r\n\t     \"VAR2\": [\"graphNodePath\"], \r\n\t     \"NIL\": [\"graphNodePath\"], \r\n\t     \"IRI_REF\": [\"graphNodePath\"], \r\n\t     \"TRUE\": [\"graphNodePath\"], \r\n\t     \"FALSE\": [\"graphNodePath\"], \r\n\t     \"BLANK_NODE_LABEL\": [\"graphNodePath\"], \r\n\t     \"ANON\": [\"graphNodePath\"], \r\n\t     \"PNAME_LN\": [\"graphNodePath\"], \r\n\t     \"PNAME_NS\": [\"graphNodePath\"], \r\n\t     \"STRING_LITERAL1\": [\"graphNodePath\"], \r\n\t     \"STRING_LITERAL2\": [\"graphNodePath\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"graphNodePath\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"graphNodePath\"], \r\n\t     \"INTEGER\": [\"graphNodePath\"], \r\n\t     \"DECIMAL\": [\"graphNodePath\"], \r\n\t     \"DOUBLE\": [\"graphNodePath\"], \r\n\t     \"INTEGER_POSITIVE\": [\"graphNodePath\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"graphNodePath\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"graphNodePath\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"graphNodePath\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"graphNodePath\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"graphNodePath\"]}, \r\n\t  \"offsetClause\" : {\r\n\t     \"OFFSET\": [\"OFFSET\",\"INTEGER\"]}, \r\n\t  \"optionalGraphPattern\" : {\r\n\t     \"OPTIONAL\": [\"OPTIONAL\",\"groupGraphPattern\"]}, \r\n\t  \"or([*,expression])\" : {\r\n\t     \"*\": [\"*\"], \r\n\t     \"!\": [\"expression\"], \r\n\t     \"+\": [\"expression\"], \r\n\t     \"-\": [\"expression\"], \r\n\t     \"VAR1\": [\"expression\"], \r\n\t     \"VAR2\": [\"expression\"], \r\n\t     \"(\": [\"expression\"], \r\n\t     \"STR\": [\"expression\"], \r\n\t     \"LANG\": [\"expression\"], \r\n\t     \"LANGMATCHES\": [\"expression\"], \r\n\t     \"DATATYPE\": [\"expression\"], \r\n\t     \"BOUND\": [\"expression\"], \r\n\t     \"IRI\": [\"expression\"], \r\n\t     \"URI\": [\"expression\"], \r\n\t     \"BNODE\": [\"expression\"], \r\n\t     \"RAND\": [\"expression\"], \r\n\t     \"ABS\": [\"expression\"], \r\n\t     \"CEIL\": [\"expression\"], \r\n\t     \"FLOOR\": [\"expression\"], \r\n\t     \"ROUND\": [\"expression\"], \r\n\t     \"CONCAT\": [\"expression\"], \r\n\t     \"STRLEN\": [\"expression\"], \r\n\t     \"UCASE\": [\"expression\"], \r\n\t     \"LCASE\": [\"expression\"], \r\n\t     \"ENCODE_FOR_URI\": [\"expression\"], \r\n\t     \"CONTAINS\": [\"expression\"], \r\n\t     \"STRSTARTS\": [\"expression\"], \r\n\t     \"STRENDS\": [\"expression\"], \r\n\t     \"STRBEFORE\": [\"expression\"], \r\n\t     \"STRAFTER\": [\"expression\"], \r\n\t     \"YEAR\": [\"expression\"], \r\n\t     \"MONTH\": [\"expression\"], \r\n\t     \"DAY\": [\"expression\"], \r\n\t     \"HOURS\": [\"expression\"], \r\n\t     \"MINUTES\": [\"expression\"], \r\n\t     \"SECONDS\": [\"expression\"], \r\n\t     \"TIMEZONE\": [\"expression\"], \r\n\t     \"TZ\": [\"expression\"], \r\n\t     \"NOW\": [\"expression\"], \r\n\t     \"UUID\": [\"expression\"], \r\n\t     \"STRUUID\": [\"expression\"], \r\n\t     \"MD5\": [\"expression\"], \r\n\t     \"SHA1\": [\"expression\"], \r\n\t     \"SHA256\": [\"expression\"], \r\n\t     \"SHA384\": [\"expression\"], \r\n\t     \"SHA512\": [\"expression\"], \r\n\t     \"COALESCE\": [\"expression\"], \r\n\t     \"IF\": [\"expression\"], \r\n\t     \"STRLANG\": [\"expression\"], \r\n\t     \"STRDT\": [\"expression\"], \r\n\t     \"SAMETERM\": [\"expression\"], \r\n\t     \"ISIRI\": [\"expression\"], \r\n\t     \"ISURI\": [\"expression\"], \r\n\t     \"ISBLANK\": [\"expression\"], \r\n\t     \"ISLITERAL\": [\"expression\"], \r\n\t     \"ISNUMERIC\": [\"expression\"], \r\n\t     \"TRUE\": [\"expression\"], \r\n\t     \"FALSE\": [\"expression\"], \r\n\t     \"COUNT\": [\"expression\"], \r\n\t     \"SUM\": [\"expression\"], \r\n\t     \"MIN\": [\"expression\"], \r\n\t     \"MAX\": [\"expression\"], \r\n\t     \"AVG\": [\"expression\"], \r\n\t     \"SAMPLE\": [\"expression\"], \r\n\t     \"GROUP_CONCAT\": [\"expression\"], \r\n\t     \"SUBSTR\": [\"expression\"], \r\n\t     \"REPLACE\": [\"expression\"], \r\n\t     \"REGEX\": [\"expression\"], \r\n\t     \"EXISTS\": [\"expression\"], \r\n\t     \"NOT\": [\"expression\"], \r\n\t     \"IRI_REF\": [\"expression\"], \r\n\t     \"STRING_LITERAL1\": [\"expression\"], \r\n\t     \"STRING_LITERAL2\": [\"expression\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"expression\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"expression\"], \r\n\t     \"INTEGER\": [\"expression\"], \r\n\t     \"DECIMAL\": [\"expression\"], \r\n\t     \"DOUBLE\": [\"expression\"], \r\n\t     \"INTEGER_POSITIVE\": [\"expression\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"expression\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"expression\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"expression\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"expression\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"expression\"], \r\n\t     \"PNAME_LN\": [\"expression\"], \r\n\t     \"PNAME_NS\": [\"expression\"]}, \r\n\t  \"or([+or([var,[ (,expression,AS,var,)]]),*])\" : {\r\n\t     \"(\": [\"+or([var,[ (,expression,AS,var,)]])\"], \r\n\t     \"VAR1\": [\"+or([var,[ (,expression,AS,var,)]])\"], \r\n\t     \"VAR2\": [\"+or([var,[ (,expression,AS,var,)]])\"], \r\n\t     \"*\": [\"*\"]}, \r\n\t  \"or([+varOrIRIref,*])\" : {\r\n\t     \"VAR1\": [\"+varOrIRIref\"], \r\n\t     \"VAR2\": [\"+varOrIRIref\"], \r\n\t     \"IRI_REF\": [\"+varOrIRIref\"], \r\n\t     \"PNAME_LN\": [\"+varOrIRIref\"], \r\n\t     \"PNAME_NS\": [\"+varOrIRIref\"], \r\n\t     \"*\": [\"*\"]}, \r\n\t  \"or([ASC,DESC])\" : {\r\n\t     \"ASC\": [\"ASC\"], \r\n\t     \"DESC\": [\"DESC\"]}, \r\n\t  \"or([DISTINCT,REDUCED])\" : {\r\n\t     \"DISTINCT\": [\"DISTINCT\"], \r\n\t     \"REDUCED\": [\"REDUCED\"]}, \r\n\t  \"or([LANGTAG,[^^,iriRef]])\" : {\r\n\t     \"LANGTAG\": [\"LANGTAG\"], \r\n\t     \"^^\": [\"[^^,iriRef]\"]}, \r\n\t  \"or([NIL,[ (,*var,)]])\" : {\r\n\t     \"NIL\": [\"NIL\"], \r\n\t     \"(\": [\"[ (,*var,)]\"]}, \r\n\t  \"or([[ (,*dataBlockValue,)],NIL])\" : {\r\n\t     \"(\": [\"[ (,*dataBlockValue,)]\"], \r\n\t     \"NIL\": [\"NIL\"]}, \r\n\t  \"or([[ (,expression,)],NIL])\" : {\r\n\t     \"(\": [\"[ (,expression,)]\"], \r\n\t     \"NIL\": [\"NIL\"]}, \r\n\t  \"or([[*,unaryExpression],[/,unaryExpression]])\" : {\r\n\t     \"*\": [\"[*,unaryExpression]\"], \r\n\t     \"/\": [\"[/,unaryExpression]\"]}, \r\n\t  \"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\" : {\r\n\t     \"+\": [\"[+,multiplicativeExpression]\"], \r\n\t     \"-\": [\"[-,multiplicativeExpression]\"], \r\n\t     \"INTEGER_POSITIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"]}, \r\n\t  \"or([[,,or([},[integer,}]])],}])\" : {\r\n\t     \",\": [\"[,,or([},[integer,}]])]\"], \r\n\t     \"}\": [\"}\"]}, \r\n\t  \"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\" : {\r\n\t     \"=\": [\"[=,numericExpression]\"], \r\n\t     \"!=\": [\"[!=,numericExpression]\"], \r\n\t     \"<\": [\"[<,numericExpression]\"], \r\n\t     \">\": [\"[>,numericExpression]\"], \r\n\t     \"<=\": [\"[<=,numericExpression]\"], \r\n\t     \">=\": [\"[>=,numericExpression]\"], \r\n\t     \"IN\": [\"[IN,expressionList]\"], \r\n\t     \"NOT\": [\"[NOT,IN,expressionList]\"]}, \r\n\t  \"or([[constructTemplate,*datasetClause,whereClause,solutionModifier],[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]])\" : {\r\n\t     \"{\": [\"[constructTemplate,*datasetClause,whereClause,solutionModifier]\"], \r\n\t     \"WHERE\": [\"[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]\"], \r\n\t     \"FROM\": [\"[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]\"]}, \r\n\t  \"or([[deleteClause,?insertClause],insertClause])\" : {\r\n\t     \"DELETE\": [\"[deleteClause,?insertClause]\"], \r\n\t     \"INSERT\": [\"insertClause\"]}, \r\n\t  \"or([[integer,or([[,,or([},[integer,}]])],}])],[,,integer,}]])\" : {\r\n\t     \"INTEGER\": [\"[integer,or([[,,or([},[integer,}]])],}])]\"], \r\n\t     \",\": [\"[,,integer,}]\"]}, \r\n\t  \"or([defaultGraphClause,namedGraphClause])\" : {\r\n\t     \"IRI_REF\": [\"defaultGraphClause\"], \r\n\t     \"PNAME_LN\": [\"defaultGraphClause\"], \r\n\t     \"PNAME_NS\": [\"defaultGraphClause\"], \r\n\t     \"NAMED\": [\"namedGraphClause\"]}, \r\n\t  \"or([inlineDataOneVar,inlineDataFull])\" : {\r\n\t     \"VAR1\": [\"inlineDataOneVar\"], \r\n\t     \"VAR2\": [\"inlineDataOneVar\"], \r\n\t     \"NIL\": [\"inlineDataFull\"], \r\n\t     \"(\": [\"inlineDataFull\"]}, \r\n\t  \"or([iriRef,[NAMED,iriRef]])\" : {\r\n\t     \"IRI_REF\": [\"iriRef\"], \r\n\t     \"PNAME_LN\": [\"iriRef\"], \r\n\t     \"PNAME_NS\": [\"iriRef\"], \r\n\t     \"NAMED\": [\"[NAMED,iriRef]\"]}, \r\n\t  \"or([iriRef,a])\" : {\r\n\t     \"IRI_REF\": [\"iriRef\"], \r\n\t     \"PNAME_LN\": [\"iriRef\"], \r\n\t     \"PNAME_NS\": [\"iriRef\"], \r\n\t     \"a\": [\"a\"]}, \r\n\t  \"or([numericLiteralPositive,numericLiteralNegative])\" : {\r\n\t     \"INTEGER_POSITIVE\": [\"numericLiteralPositive\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"numericLiteralPositive\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"numericLiteralPositive\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"numericLiteralNegative\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"numericLiteralNegative\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"numericLiteralNegative\"]}, \r\n\t  \"or([queryAll,updateAll])\" : {\r\n\t     \"CONSTRUCT\": [\"queryAll\"], \r\n\t     \"DESCRIBE\": [\"queryAll\"], \r\n\t     \"ASK\": [\"queryAll\"], \r\n\t     \"SELECT\": [\"queryAll\"], \r\n\t     \"INSERT\": [\"updateAll\"], \r\n\t     \"DELETE\": [\"updateAll\"], \r\n\t     \"LOAD\": [\"updateAll\"], \r\n\t     \"CLEAR\": [\"updateAll\"], \r\n\t     \"DROP\": [\"updateAll\"], \r\n\t     \"ADD\": [\"updateAll\"], \r\n\t     \"MOVE\": [\"updateAll\"], \r\n\t     \"COPY\": [\"updateAll\"], \r\n\t     \"CREATE\": [\"updateAll\"], \r\n\t     \"WITH\": [\"updateAll\"], \r\n\t     \"$\": [\"updateAll\"]}, \r\n\t  \"or([selectQuery,constructQuery,describeQuery,askQuery])\" : {\r\n\t     \"SELECT\": [\"selectQuery\"], \r\n\t     \"CONSTRUCT\": [\"constructQuery\"], \r\n\t     \"DESCRIBE\": [\"describeQuery\"], \r\n\t     \"ASK\": [\"askQuery\"]}, \r\n\t  \"or([subSelect,groupGraphPatternSub])\" : {\r\n\t     \"SELECT\": [\"subSelect\"], \r\n\t     \"{\": [\"groupGraphPatternSub\"], \r\n\t     \"OPTIONAL\": [\"groupGraphPatternSub\"], \r\n\t     \"MINUS\": [\"groupGraphPatternSub\"], \r\n\t     \"GRAPH\": [\"groupGraphPatternSub\"], \r\n\t     \"SERVICE\": [\"groupGraphPatternSub\"], \r\n\t     \"FILTER\": [\"groupGraphPatternSub\"], \r\n\t     \"BIND\": [\"groupGraphPatternSub\"], \r\n\t     \"VALUES\": [\"groupGraphPatternSub\"], \r\n\t     \"VAR1\": [\"groupGraphPatternSub\"], \r\n\t     \"VAR2\": [\"groupGraphPatternSub\"], \r\n\t     \"NIL\": [\"groupGraphPatternSub\"], \r\n\t     \"(\": [\"groupGraphPatternSub\"], \r\n\t     \"[\": [\"groupGraphPatternSub\"], \r\n\t     \"IRI_REF\": [\"groupGraphPatternSub\"], \r\n\t     \"TRUE\": [\"groupGraphPatternSub\"], \r\n\t     \"FALSE\": [\"groupGraphPatternSub\"], \r\n\t     \"BLANK_NODE_LABEL\": [\"groupGraphPatternSub\"], \r\n\t     \"ANON\": [\"groupGraphPatternSub\"], \r\n\t     \"PNAME_LN\": [\"groupGraphPatternSub\"], \r\n\t     \"PNAME_NS\": [\"groupGraphPatternSub\"], \r\n\t     \"STRING_LITERAL1\": [\"groupGraphPatternSub\"], \r\n\t     \"STRING_LITERAL2\": [\"groupGraphPatternSub\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"groupGraphPatternSub\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"groupGraphPatternSub\"], \r\n\t     \"INTEGER\": [\"groupGraphPatternSub\"], \r\n\t     \"DECIMAL\": [\"groupGraphPatternSub\"], \r\n\t     \"DOUBLE\": [\"groupGraphPatternSub\"], \r\n\t     \"INTEGER_POSITIVE\": [\"groupGraphPatternSub\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"groupGraphPatternSub\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"groupGraphPatternSub\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"groupGraphPatternSub\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"groupGraphPatternSub\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"groupGraphPatternSub\"], \r\n\t     \"}\": [\"groupGraphPatternSub\"]}, \r\n\t  \"or([var,[ (,expression,AS,var,)]])\" : {\r\n\t     \"VAR1\": [\"var\"], \r\n\t     \"VAR2\": [\"var\"], \r\n\t     \"(\": [\"[ (,expression,AS,var,)]\"]}, \r\n\t  \"or([verbPath,verbSimple])\" : {\r\n\t     \"^\": [\"verbPath\"], \r\n\t     \"a\": [\"verbPath\"], \r\n\t     \"!\": [\"verbPath\"], \r\n\t     \"(\": [\"verbPath\"], \r\n\t     \"IRI_REF\": [\"verbPath\"], \r\n\t     \"PNAME_LN\": [\"verbPath\"], \r\n\t     \"PNAME_NS\": [\"verbPath\"], \r\n\t     \"VAR1\": [\"verbSimple\"], \r\n\t     \"VAR2\": [\"verbSimple\"]}, \r\n\t  \"or([},[integer,}]])\" : {\r\n\t     \"}\": [\"}\"], \r\n\t     \"INTEGER\": [\"[integer,}]\"]}, \r\n\t  \"orderClause\" : {\r\n\t     \"ORDER\": [\"ORDER\",\"BY\",\"+orderCondition\"]}, \r\n\t  \"orderCondition\" : {\r\n\t     \"ASC\": [\"or([ASC,DESC])\",\"brackettedExpression\"], \r\n\t     \"DESC\": [\"or([ASC,DESC])\",\"brackettedExpression\"], \r\n\t     \"(\": [\"constraint\"], \r\n\t     \"STR\": [\"constraint\"], \r\n\t     \"LANG\": [\"constraint\"], \r\n\t     \"LANGMATCHES\": [\"constraint\"], \r\n\t     \"DATATYPE\": [\"constraint\"], \r\n\t     \"BOUND\": [\"constraint\"], \r\n\t     \"IRI\": [\"constraint\"], \r\n\t     \"URI\": [\"constraint\"], \r\n\t     \"BNODE\": [\"constraint\"], \r\n\t     \"RAND\": [\"constraint\"], \r\n\t     \"ABS\": [\"constraint\"], \r\n\t     \"CEIL\": [\"constraint\"], \r\n\t     \"FLOOR\": [\"constraint\"], \r\n\t     \"ROUND\": [\"constraint\"], \r\n\t     \"CONCAT\": [\"constraint\"], \r\n\t     \"STRLEN\": [\"constraint\"], \r\n\t     \"UCASE\": [\"constraint\"], \r\n\t     \"LCASE\": [\"constraint\"], \r\n\t     \"ENCODE_FOR_URI\": [\"constraint\"], \r\n\t     \"CONTAINS\": [\"constraint\"], \r\n\t     \"STRSTARTS\": [\"constraint\"], \r\n\t     \"STRENDS\": [\"constraint\"], \r\n\t     \"STRBEFORE\": [\"constraint\"], \r\n\t     \"STRAFTER\": [\"constraint\"], \r\n\t     \"YEAR\": [\"constraint\"], \r\n\t     \"MONTH\": [\"constraint\"], \r\n\t     \"DAY\": [\"constraint\"], \r\n\t     \"HOURS\": [\"constraint\"], \r\n\t     \"MINUTES\": [\"constraint\"], \r\n\t     \"SECONDS\": [\"constraint\"], \r\n\t     \"TIMEZONE\": [\"constraint\"], \r\n\t     \"TZ\": [\"constraint\"], \r\n\t     \"NOW\": [\"constraint\"], \r\n\t     \"UUID\": [\"constraint\"], \r\n\t     \"STRUUID\": [\"constraint\"], \r\n\t     \"MD5\": [\"constraint\"], \r\n\t     \"SHA1\": [\"constraint\"], \r\n\t     \"SHA256\": [\"constraint\"], \r\n\t     \"SHA384\": [\"constraint\"], \r\n\t     \"SHA512\": [\"constraint\"], \r\n\t     \"COALESCE\": [\"constraint\"], \r\n\t     \"IF\": [\"constraint\"], \r\n\t     \"STRLANG\": [\"constraint\"], \r\n\t     \"STRDT\": [\"constraint\"], \r\n\t     \"SAMETERM\": [\"constraint\"], \r\n\t     \"ISIRI\": [\"constraint\"], \r\n\t     \"ISURI\": [\"constraint\"], \r\n\t     \"ISBLANK\": [\"constraint\"], \r\n\t     \"ISLITERAL\": [\"constraint\"], \r\n\t     \"ISNUMERIC\": [\"constraint\"], \r\n\t     \"SUBSTR\": [\"constraint\"], \r\n\t     \"REPLACE\": [\"constraint\"], \r\n\t     \"REGEX\": [\"constraint\"], \r\n\t     \"EXISTS\": [\"constraint\"], \r\n\t     \"NOT\": [\"constraint\"], \r\n\t     \"IRI_REF\": [\"constraint\"], \r\n\t     \"PNAME_LN\": [\"constraint\"], \r\n\t     \"PNAME_NS\": [\"constraint\"], \r\n\t     \"VAR1\": [\"var\"], \r\n\t     \"VAR2\": [\"var\"]}, \r\n\t  \"path\" : {\r\n\t     \"^\": [\"pathAlternative\"], \r\n\t     \"a\": [\"pathAlternative\"], \r\n\t     \"!\": [\"pathAlternative\"], \r\n\t     \"(\": [\"pathAlternative\"], \r\n\t     \"IRI_REF\": [\"pathAlternative\"], \r\n\t     \"PNAME_LN\": [\"pathAlternative\"], \r\n\t     \"PNAME_NS\": [\"pathAlternative\"]}, \r\n\t  \"pathAlternative\" : {\r\n\t     \"^\": [\"pathSequence\",\"*[|,pathSequence]\"], \r\n\t     \"a\": [\"pathSequence\",\"*[|,pathSequence]\"], \r\n\t     \"!\": [\"pathSequence\",\"*[|,pathSequence]\"], \r\n\t     \"(\": [\"pathSequence\",\"*[|,pathSequence]\"], \r\n\t     \"IRI_REF\": [\"pathSequence\",\"*[|,pathSequence]\"], \r\n\t     \"PNAME_LN\": [\"pathSequence\",\"*[|,pathSequence]\"], \r\n\t     \"PNAME_NS\": [\"pathSequence\",\"*[|,pathSequence]\"]}, \r\n\t  \"pathElt\" : {\r\n\t     \"a\": [\"pathPrimary\",\"?pathMod\"], \r\n\t     \"!\": [\"pathPrimary\",\"?pathMod\"], \r\n\t     \"(\": [\"pathPrimary\",\"?pathMod\"], \r\n\t     \"IRI_REF\": [\"pathPrimary\",\"?pathMod\"], \r\n\t     \"PNAME_LN\": [\"pathPrimary\",\"?pathMod\"], \r\n\t     \"PNAME_NS\": [\"pathPrimary\",\"?pathMod\"]}, \r\n\t  \"pathEltOrInverse\" : {\r\n\t     \"a\": [\"pathElt\"], \r\n\t     \"!\": [\"pathElt\"], \r\n\t     \"(\": [\"pathElt\"], \r\n\t     \"IRI_REF\": [\"pathElt\"], \r\n\t     \"PNAME_LN\": [\"pathElt\"], \r\n\t     \"PNAME_NS\": [\"pathElt\"], \r\n\t     \"^\": [\"^\",\"pathElt\"]}, \r\n\t  \"pathMod\" : {\r\n\t     \"*\": [\"*\"], \r\n\t     \"?\": [\"?\"], \r\n\t     \"+\": [\"+\"], \r\n\t     \"{\": [\"{\",\"or([[integer,or([[,,or([},[integer,}]])],}])],[,,integer,}]])\"]}, \r\n\t  \"pathNegatedPropertySet\" : {\r\n\t     \"a\": [\"pathOneInPropertySet\"], \r\n\t     \"^\": [\"pathOneInPropertySet\"], \r\n\t     \"IRI_REF\": [\"pathOneInPropertySet\"], \r\n\t     \"PNAME_LN\": [\"pathOneInPropertySet\"], \r\n\t     \"PNAME_NS\": [\"pathOneInPropertySet\"], \r\n\t     \"(\": [\"(\",\"?[pathOneInPropertySet,*[|,pathOneInPropertySet]]\",\")\"]}, \r\n\t  \"pathOneInPropertySet\" : {\r\n\t     \"IRI_REF\": [\"iriRef\"], \r\n\t     \"PNAME_LN\": [\"iriRef\"], \r\n\t     \"PNAME_NS\": [\"iriRef\"], \r\n\t     \"a\": [\"a\"], \r\n\t     \"^\": [\"^\",\"or([iriRef,a])\"]}, \r\n\t  \"pathPrimary\" : {\r\n\t     \"IRI_REF\": [\"storeProperty\",\"iriRef\"], \r\n\t     \"PNAME_LN\": [\"storeProperty\",\"iriRef\"], \r\n\t     \"PNAME_NS\": [\"storeProperty\",\"iriRef\"], \r\n\t     \"a\": [\"storeProperty\",\"a\"], \r\n\t     \"!\": [\"!\",\"pathNegatedPropertySet\"], \r\n\t     \"(\": [\"(\",\"path\",\")\"]}, \r\n\t  \"pathSequence\" : {\r\n\t     \"^\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \r\n\t     \"a\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \r\n\t     \"!\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \r\n\t     \"(\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \r\n\t     \"IRI_REF\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \r\n\t     \"PNAME_LN\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \r\n\t     \"PNAME_NS\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"]}, \r\n\t  \"prefixDecl\" : {\r\n\t     \"PREFIX\": [\"PREFIX\",\"PNAME_NS\",\"IRI_REF\"]}, \r\n\t  \"prefixedName\" : {\r\n\t     \"PNAME_LN\": [\"PNAME_LN\"], \r\n\t     \"PNAME_NS\": [\"PNAME_NS\"]}, \r\n\t  \"primaryExpression\" : {\r\n\t     \"(\": [\"brackettedExpression\"], \r\n\t     \"STR\": [\"builtInCall\"], \r\n\t     \"LANG\": [\"builtInCall\"], \r\n\t     \"LANGMATCHES\": [\"builtInCall\"], \r\n\t     \"DATATYPE\": [\"builtInCall\"], \r\n\t     \"BOUND\": [\"builtInCall\"], \r\n\t     \"IRI\": [\"builtInCall\"], \r\n\t     \"URI\": [\"builtInCall\"], \r\n\t     \"BNODE\": [\"builtInCall\"], \r\n\t     \"RAND\": [\"builtInCall\"], \r\n\t     \"ABS\": [\"builtInCall\"], \r\n\t     \"CEIL\": [\"builtInCall\"], \r\n\t     \"FLOOR\": [\"builtInCall\"], \r\n\t     \"ROUND\": [\"builtInCall\"], \r\n\t     \"CONCAT\": [\"builtInCall\"], \r\n\t     \"STRLEN\": [\"builtInCall\"], \r\n\t     \"UCASE\": [\"builtInCall\"], \r\n\t     \"LCASE\": [\"builtInCall\"], \r\n\t     \"ENCODE_FOR_URI\": [\"builtInCall\"], \r\n\t     \"CONTAINS\": [\"builtInCall\"], \r\n\t     \"STRSTARTS\": [\"builtInCall\"], \r\n\t     \"STRENDS\": [\"builtInCall\"], \r\n\t     \"STRBEFORE\": [\"builtInCall\"], \r\n\t     \"STRAFTER\": [\"builtInCall\"], \r\n\t     \"YEAR\": [\"builtInCall\"], \r\n\t     \"MONTH\": [\"builtInCall\"], \r\n\t     \"DAY\": [\"builtInCall\"], \r\n\t     \"HOURS\": [\"builtInCall\"], \r\n\t     \"MINUTES\": [\"builtInCall\"], \r\n\t     \"SECONDS\": [\"builtInCall\"], \r\n\t     \"TIMEZONE\": [\"builtInCall\"], \r\n\t     \"TZ\": [\"builtInCall\"], \r\n\t     \"NOW\": [\"builtInCall\"], \r\n\t     \"UUID\": [\"builtInCall\"], \r\n\t     \"STRUUID\": [\"builtInCall\"], \r\n\t     \"MD5\": [\"builtInCall\"], \r\n\t     \"SHA1\": [\"builtInCall\"], \r\n\t     \"SHA256\": [\"builtInCall\"], \r\n\t     \"SHA384\": [\"builtInCall\"], \r\n\t     \"SHA512\": [\"builtInCall\"], \r\n\t     \"COALESCE\": [\"builtInCall\"], \r\n\t     \"IF\": [\"builtInCall\"], \r\n\t     \"STRLANG\": [\"builtInCall\"], \r\n\t     \"STRDT\": [\"builtInCall\"], \r\n\t     \"SAMETERM\": [\"builtInCall\"], \r\n\t     \"ISIRI\": [\"builtInCall\"], \r\n\t     \"ISURI\": [\"builtInCall\"], \r\n\t     \"ISBLANK\": [\"builtInCall\"], \r\n\t     \"ISLITERAL\": [\"builtInCall\"], \r\n\t     \"ISNUMERIC\": [\"builtInCall\"], \r\n\t     \"SUBSTR\": [\"builtInCall\"], \r\n\t     \"REPLACE\": [\"builtInCall\"], \r\n\t     \"REGEX\": [\"builtInCall\"], \r\n\t     \"EXISTS\": [\"builtInCall\"], \r\n\t     \"NOT\": [\"builtInCall\"], \r\n\t     \"IRI_REF\": [\"iriRefOrFunction\"], \r\n\t     \"PNAME_LN\": [\"iriRefOrFunction\"], \r\n\t     \"PNAME_NS\": [\"iriRefOrFunction\"], \r\n\t     \"STRING_LITERAL1\": [\"rdfLiteral\"], \r\n\t     \"STRING_LITERAL2\": [\"rdfLiteral\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"rdfLiteral\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"rdfLiteral\"], \r\n\t     \"INTEGER\": [\"numericLiteral\"], \r\n\t     \"DECIMAL\": [\"numericLiteral\"], \r\n\t     \"DOUBLE\": [\"numericLiteral\"], \r\n\t     \"INTEGER_POSITIVE\": [\"numericLiteral\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"numericLiteral\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"numericLiteral\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"numericLiteral\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"numericLiteral\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"numericLiteral\"], \r\n\t     \"TRUE\": [\"booleanLiteral\"], \r\n\t     \"FALSE\": [\"booleanLiteral\"], \r\n\t     \"VAR1\": [\"var\"], \r\n\t     \"VAR2\": [\"var\"], \r\n\t     \"COUNT\": [\"aggregate\"], \r\n\t     \"SUM\": [\"aggregate\"], \r\n\t     \"MIN\": [\"aggregate\"], \r\n\t     \"MAX\": [\"aggregate\"], \r\n\t     \"AVG\": [\"aggregate\"], \r\n\t     \"SAMPLE\": [\"aggregate\"], \r\n\t     \"GROUP_CONCAT\": [\"aggregate\"]}, \r\n\t  \"prologue\" : {\r\n\t     \"PREFIX\": [\"?baseDecl\",\"*prefixDecl\"], \r\n\t     \"BASE\": [\"?baseDecl\",\"*prefixDecl\"], \r\n\t     \"$\": [\"?baseDecl\",\"*prefixDecl\"], \r\n\t     \"CONSTRUCT\": [\"?baseDecl\",\"*prefixDecl\"], \r\n\t     \"DESCRIBE\": [\"?baseDecl\",\"*prefixDecl\"], \r\n\t     \"ASK\": [\"?baseDecl\",\"*prefixDecl\"], \r\n\t     \"INSERT\": [\"?baseDecl\",\"*prefixDecl\"], \r\n\t     \"DELETE\": [\"?baseDecl\",\"*prefixDecl\"], \r\n\t     \"SELECT\": [\"?baseDecl\",\"*prefixDecl\"], \r\n\t     \"LOAD\": [\"?baseDecl\",\"*prefixDecl\"], \r\n\t     \"CLEAR\": [\"?baseDecl\",\"*prefixDecl\"], \r\n\t     \"DROP\": [\"?baseDecl\",\"*prefixDecl\"], \r\n\t     \"ADD\": [\"?baseDecl\",\"*prefixDecl\"], \r\n\t     \"MOVE\": [\"?baseDecl\",\"*prefixDecl\"], \r\n\t     \"COPY\": [\"?baseDecl\",\"*prefixDecl\"], \r\n\t     \"CREATE\": [\"?baseDecl\",\"*prefixDecl\"], \r\n\t     \"WITH\": [\"?baseDecl\",\"*prefixDecl\"]}, \r\n\t  \"propertyList\" : {\r\n\t     \"a\": [\"propertyListNotEmpty\"], \r\n\t     \"VAR1\": [\"propertyListNotEmpty\"], \r\n\t     \"VAR2\": [\"propertyListNotEmpty\"], \r\n\t     \"IRI_REF\": [\"propertyListNotEmpty\"], \r\n\t     \"PNAME_LN\": [\"propertyListNotEmpty\"], \r\n\t     \"PNAME_NS\": [\"propertyListNotEmpty\"], \r\n\t     \".\": [], \r\n\t     \"}\": [], \r\n\t     \"GRAPH\": []}, \r\n\t  \"propertyListNotEmpty\" : {\r\n\t     \"a\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n\t     \"VAR1\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n\t     \"VAR2\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n\t     \"IRI_REF\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n\t     \"PNAME_LN\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n\t     \"PNAME_NS\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"]}, \r\n\t  \"propertyListPath\" : {\r\n\t     \"a\": [\"propertyListNotEmpty\"], \r\n\t     \"VAR1\": [\"propertyListNotEmpty\"], \r\n\t     \"VAR2\": [\"propertyListNotEmpty\"], \r\n\t     \"IRI_REF\": [\"propertyListNotEmpty\"], \r\n\t     \"PNAME_LN\": [\"propertyListNotEmpty\"], \r\n\t     \"PNAME_NS\": [\"propertyListNotEmpty\"], \r\n\t     \".\": [], \r\n\t     \"{\": [], \r\n\t     \"OPTIONAL\": [], \r\n\t     \"MINUS\": [], \r\n\t     \"GRAPH\": [], \r\n\t     \"SERVICE\": [], \r\n\t     \"FILTER\": [], \r\n\t     \"BIND\": [], \r\n\t     \"VALUES\": [], \r\n\t     \"}\": []}, \r\n\t  \"propertyListPathNotEmpty\" : {\r\n\t     \"VAR1\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \r\n\t     \"VAR2\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \r\n\t     \"^\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \r\n\t     \"a\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \r\n\t     \"!\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \r\n\t     \"(\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \r\n\t     \"IRI_REF\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \r\n\t     \"PNAME_LN\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \r\n\t     \"PNAME_NS\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"]}, \r\n\t  \"quadData\" : {\r\n\t     \"{\": [\"{\",\"disallowVars\",\"quads\",\"allowVars\",\"}\"]}, \r\n\t  \"quadDataNoBnodes\" : {\r\n\t     \"{\": [\"{\",\"disallowBnodes\",\"disallowVars\",\"quads\",\"allowVars\",\"allowBnodes\",\"}\"]}, \r\n\t  \"quadPattern\" : {\r\n\t     \"{\": [\"{\",\"quads\",\"}\"]}, \r\n\t  \"quadPatternNoBnodes\" : {\r\n\t     \"{\": [\"{\",\"disallowBnodes\",\"quads\",\"allowBnodes\",\"}\"]}, \r\n\t  \"quads\" : {\r\n\t     \"GRAPH\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n\t     \"VAR1\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n\t     \"VAR2\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n\t     \"NIL\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n\t     \"(\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n\t     \"[\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n\t     \"IRI_REF\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n\t     \"TRUE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n\t     \"FALSE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n\t     \"BLANK_NODE_LABEL\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n\t     \"ANON\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n\t     \"PNAME_LN\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n\t     \"PNAME_NS\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n\t     \"STRING_LITERAL1\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n\t     \"STRING_LITERAL2\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n\t     \"INTEGER\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n\t     \"DECIMAL\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n\t     \"DOUBLE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n\t     \"INTEGER_POSITIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n\t     \"}\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"]}, \r\n\t  \"quadsNotTriples\" : {\r\n\t     \"GRAPH\": [\"GRAPH\",\"varOrIRIref\",\"{\",\"?triplesTemplate\",\"}\"]}, \r\n\t  \"queryAll\" : {\r\n\t     \"CONSTRUCT\": [\"or([selectQuery,constructQuery,describeQuery,askQuery])\",\"valuesClause\"], \r\n\t     \"DESCRIBE\": [\"or([selectQuery,constructQuery,describeQuery,askQuery])\",\"valuesClause\"], \r\n\t     \"ASK\": [\"or([selectQuery,constructQuery,describeQuery,askQuery])\",\"valuesClause\"], \r\n\t     \"SELECT\": [\"or([selectQuery,constructQuery,describeQuery,askQuery])\",\"valuesClause\"]}, \r\n\t  \"rdfLiteral\" : {\r\n\t     \"STRING_LITERAL1\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"], \r\n\t     \"STRING_LITERAL2\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"]}, \r\n\t  \"regexExpression\" : {\r\n\t     \"REGEX\": [\"REGEX\",\"(\",\"expression\",\",\",\"expression\",\"?[,,expression]\",\")\"]}, \r\n\t  \"relationalExpression\" : {\r\n\t     \"!\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"+\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"-\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"VAR1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"VAR2\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"(\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"STR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"LANG\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"LANGMATCHES\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"DATATYPE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"BOUND\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"IRI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"URI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"BNODE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"RAND\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"ABS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"CEIL\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"FLOOR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"ROUND\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"CONCAT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"STRLEN\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"UCASE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"LCASE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"ENCODE_FOR_URI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"CONTAINS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"STRSTARTS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"STRENDS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"STRBEFORE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"STRAFTER\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"YEAR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"MONTH\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"DAY\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"HOURS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"MINUTES\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"SECONDS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"TIMEZONE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"TZ\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"NOW\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"UUID\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"STRUUID\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"MD5\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"SHA1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"SHA256\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"SHA384\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"SHA512\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"COALESCE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"IF\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"STRLANG\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"STRDT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"SAMETERM\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"ISIRI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"ISURI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"ISBLANK\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"ISLITERAL\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"ISNUMERIC\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"TRUE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"FALSE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"COUNT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"SUM\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"MIN\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"MAX\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"AVG\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"SAMPLE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"GROUP_CONCAT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"SUBSTR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"REPLACE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"REGEX\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"EXISTS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"NOT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"IRI_REF\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"STRING_LITERAL1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"STRING_LITERAL2\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"INTEGER\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"DECIMAL\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"DOUBLE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"INTEGER_POSITIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"PNAME_LN\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n\t     \"PNAME_NS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"]}, \r\n\t  \"selectClause\" : {\r\n\t     \"SELECT\": [\"SELECT\",\"?or([DISTINCT,REDUCED])\",\"or([+or([var,[ (,expression,AS,var,)]]),*])\"]}, \r\n\t  \"selectQuery\" : {\r\n\t     \"SELECT\": [\"selectClause\",\"*datasetClause\",\"whereClause\",\"solutionModifier\"]}, \r\n\t  \"serviceGraphPattern\" : {\r\n\t     \"SERVICE\": [\"SERVICE\",\"?SILENT\",\"varOrIRIref\",\"groupGraphPattern\"]}, \r\n\t  \"solutionModifier\" : {\r\n\t     \"LIMIT\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \r\n\t     \"OFFSET\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \r\n\t     \"ORDER\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \r\n\t     \"HAVING\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \r\n\t     \"GROUP\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \r\n\t     \"VALUES\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \r\n\t     \"$\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \r\n\t     \"}\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"]}, \r\n\t  \"sourceSelector\" : {\r\n\t     \"IRI_REF\": [\"iriRef\"], \r\n\t     \"PNAME_LN\": [\"iriRef\"], \r\n\t     \"PNAME_NS\": [\"iriRef\"]}, \r\n\t  \"sparql11\" : {\r\n\t     \"$\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \r\n\t     \"CONSTRUCT\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \r\n\t     \"DESCRIBE\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \r\n\t     \"ASK\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \r\n\t     \"INSERT\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \r\n\t     \"DELETE\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \r\n\t     \"SELECT\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \r\n\t     \"LOAD\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \r\n\t     \"CLEAR\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \r\n\t     \"DROP\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \r\n\t     \"ADD\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \r\n\t     \"MOVE\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \r\n\t     \"COPY\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \r\n\t     \"CREATE\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \r\n\t     \"WITH\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \r\n\t     \"PREFIX\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \r\n\t     \"BASE\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"]}, \r\n\t  \"storeProperty\" : {\r\n\t     \"VAR1\": [], \r\n\t     \"VAR2\": [], \r\n\t     \"IRI_REF\": [], \r\n\t     \"PNAME_LN\": [], \r\n\t     \"PNAME_NS\": [], \r\n\t     \"a\": []}, \r\n\t  \"strReplaceExpression\" : {\r\n\t     \"REPLACE\": [\"REPLACE\",\"(\",\"expression\",\",\",\"expression\",\",\",\"expression\",\"?[,,expression]\",\")\"]}, \r\n\t  \"string\" : {\r\n\t     \"STRING_LITERAL1\": [\"STRING_LITERAL1\"], \r\n\t     \"STRING_LITERAL2\": [\"STRING_LITERAL2\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"STRING_LITERAL_LONG1\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"STRING_LITERAL_LONG2\"]}, \r\n\t  \"subSelect\" : {\r\n\t     \"SELECT\": [\"selectClause\",\"whereClause\",\"solutionModifier\",\"valuesClause\"]}, \r\n\t  \"substringExpression\" : {\r\n\t     \"SUBSTR\": [\"SUBSTR\",\"(\",\"expression\",\",\",\"expression\",\"?[,,expression]\",\")\"]}, \r\n\t  \"triplesBlock\" : {\r\n\t     \"VAR1\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n\t     \"VAR2\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n\t     \"NIL\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n\t     \"(\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n\t     \"[\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n\t     \"IRI_REF\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n\t     \"TRUE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n\t     \"FALSE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n\t     \"BLANK_NODE_LABEL\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n\t     \"ANON\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n\t     \"PNAME_LN\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n\t     \"PNAME_NS\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n\t     \"STRING_LITERAL1\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n\t     \"STRING_LITERAL2\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n\t     \"INTEGER\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n\t     \"DECIMAL\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n\t     \"DOUBLE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n\t     \"INTEGER_POSITIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"]}, \r\n\t  \"triplesNode\" : {\r\n\t     \"(\": [\"collection\"], \r\n\t     \"[\": [\"blankNodePropertyList\"]}, \r\n\t  \"triplesNodePath\" : {\r\n\t     \"(\": [\"collectionPath\"], \r\n\t     \"[\": [\"blankNodePropertyListPath\"]}, \r\n\t  \"triplesSameSubject\" : {\r\n\t     \"VAR1\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n\t     \"VAR2\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n\t     \"NIL\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n\t     \"IRI_REF\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n\t     \"TRUE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n\t     \"FALSE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n\t     \"BLANK_NODE_LABEL\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n\t     \"ANON\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n\t     \"PNAME_LN\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n\t     \"PNAME_NS\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n\t     \"STRING_LITERAL1\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n\t     \"STRING_LITERAL2\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n\t     \"INTEGER\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n\t     \"DECIMAL\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n\t     \"DOUBLE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n\t     \"INTEGER_POSITIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n\t     \"(\": [\"triplesNode\",\"propertyList\"], \r\n\t     \"[\": [\"triplesNode\",\"propertyList\"]}, \r\n\t  \"triplesSameSubjectPath\" : {\r\n\t     \"VAR1\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n\t     \"VAR2\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n\t     \"NIL\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n\t     \"IRI_REF\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n\t     \"TRUE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n\t     \"FALSE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n\t     \"BLANK_NODE_LABEL\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n\t     \"ANON\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n\t     \"PNAME_LN\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n\t     \"PNAME_NS\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n\t     \"STRING_LITERAL1\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n\t     \"STRING_LITERAL2\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n\t     \"INTEGER\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n\t     \"DECIMAL\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n\t     \"DOUBLE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n\t     \"INTEGER_POSITIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n\t     \"(\": [\"triplesNodePath\",\"propertyListPath\"], \r\n\t     \"[\": [\"triplesNodePath\",\"propertyListPath\"]}, \r\n\t  \"triplesTemplate\" : {\r\n\t     \"VAR1\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n\t     \"VAR2\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n\t     \"NIL\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n\t     \"(\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n\t     \"[\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n\t     \"IRI_REF\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n\t     \"TRUE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n\t     \"FALSE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n\t     \"BLANK_NODE_LABEL\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n\t     \"ANON\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n\t     \"PNAME_LN\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n\t     \"PNAME_NS\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n\t     \"STRING_LITERAL1\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n\t     \"STRING_LITERAL2\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n\t     \"INTEGER\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n\t     \"DECIMAL\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n\t     \"DOUBLE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n\t     \"INTEGER_POSITIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"]}, \r\n\t  \"unaryExpression\" : {\r\n\t     \"!\": [\"!\",\"primaryExpression\"], \r\n\t     \"+\": [\"+\",\"primaryExpression\"], \r\n\t     \"-\": [\"-\",\"primaryExpression\"], \r\n\t     \"VAR1\": [\"primaryExpression\"], \r\n\t     \"VAR2\": [\"primaryExpression\"], \r\n\t     \"(\": [\"primaryExpression\"], \r\n\t     \"STR\": [\"primaryExpression\"], \r\n\t     \"LANG\": [\"primaryExpression\"], \r\n\t     \"LANGMATCHES\": [\"primaryExpression\"], \r\n\t     \"DATATYPE\": [\"primaryExpression\"], \r\n\t     \"BOUND\": [\"primaryExpression\"], \r\n\t     \"IRI\": [\"primaryExpression\"], \r\n\t     \"URI\": [\"primaryExpression\"], \r\n\t     \"BNODE\": [\"primaryExpression\"], \r\n\t     \"RAND\": [\"primaryExpression\"], \r\n\t     \"ABS\": [\"primaryExpression\"], \r\n\t     \"CEIL\": [\"primaryExpression\"], \r\n\t     \"FLOOR\": [\"primaryExpression\"], \r\n\t     \"ROUND\": [\"primaryExpression\"], \r\n\t     \"CONCAT\": [\"primaryExpression\"], \r\n\t     \"STRLEN\": [\"primaryExpression\"], \r\n\t     \"UCASE\": [\"primaryExpression\"], \r\n\t     \"LCASE\": [\"primaryExpression\"], \r\n\t     \"ENCODE_FOR_URI\": [\"primaryExpression\"], \r\n\t     \"CONTAINS\": [\"primaryExpression\"], \r\n\t     \"STRSTARTS\": [\"primaryExpression\"], \r\n\t     \"STRENDS\": [\"primaryExpression\"], \r\n\t     \"STRBEFORE\": [\"primaryExpression\"], \r\n\t     \"STRAFTER\": [\"primaryExpression\"], \r\n\t     \"YEAR\": [\"primaryExpression\"], \r\n\t     \"MONTH\": [\"primaryExpression\"], \r\n\t     \"DAY\": [\"primaryExpression\"], \r\n\t     \"HOURS\": [\"primaryExpression\"], \r\n\t     \"MINUTES\": [\"primaryExpression\"], \r\n\t     \"SECONDS\": [\"primaryExpression\"], \r\n\t     \"TIMEZONE\": [\"primaryExpression\"], \r\n\t     \"TZ\": [\"primaryExpression\"], \r\n\t     \"NOW\": [\"primaryExpression\"], \r\n\t     \"UUID\": [\"primaryExpression\"], \r\n\t     \"STRUUID\": [\"primaryExpression\"], \r\n\t     \"MD5\": [\"primaryExpression\"], \r\n\t     \"SHA1\": [\"primaryExpression\"], \r\n\t     \"SHA256\": [\"primaryExpression\"], \r\n\t     \"SHA384\": [\"primaryExpression\"], \r\n\t     \"SHA512\": [\"primaryExpression\"], \r\n\t     \"COALESCE\": [\"primaryExpression\"], \r\n\t     \"IF\": [\"primaryExpression\"], \r\n\t     \"STRLANG\": [\"primaryExpression\"], \r\n\t     \"STRDT\": [\"primaryExpression\"], \r\n\t     \"SAMETERM\": [\"primaryExpression\"], \r\n\t     \"ISIRI\": [\"primaryExpression\"], \r\n\t     \"ISURI\": [\"primaryExpression\"], \r\n\t     \"ISBLANK\": [\"primaryExpression\"], \r\n\t     \"ISLITERAL\": [\"primaryExpression\"], \r\n\t     \"ISNUMERIC\": [\"primaryExpression\"], \r\n\t     \"TRUE\": [\"primaryExpression\"], \r\n\t     \"FALSE\": [\"primaryExpression\"], \r\n\t     \"COUNT\": [\"primaryExpression\"], \r\n\t     \"SUM\": [\"primaryExpression\"], \r\n\t     \"MIN\": [\"primaryExpression\"], \r\n\t     \"MAX\": [\"primaryExpression\"], \r\n\t     \"AVG\": [\"primaryExpression\"], \r\n\t     \"SAMPLE\": [\"primaryExpression\"], \r\n\t     \"GROUP_CONCAT\": [\"primaryExpression\"], \r\n\t     \"SUBSTR\": [\"primaryExpression\"], \r\n\t     \"REPLACE\": [\"primaryExpression\"], \r\n\t     \"REGEX\": [\"primaryExpression\"], \r\n\t     \"EXISTS\": [\"primaryExpression\"], \r\n\t     \"NOT\": [\"primaryExpression\"], \r\n\t     \"IRI_REF\": [\"primaryExpression\"], \r\n\t     \"STRING_LITERAL1\": [\"primaryExpression\"], \r\n\t     \"STRING_LITERAL2\": [\"primaryExpression\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"primaryExpression\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"primaryExpression\"], \r\n\t     \"INTEGER\": [\"primaryExpression\"], \r\n\t     \"DECIMAL\": [\"primaryExpression\"], \r\n\t     \"DOUBLE\": [\"primaryExpression\"], \r\n\t     \"INTEGER_POSITIVE\": [\"primaryExpression\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"primaryExpression\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"primaryExpression\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"primaryExpression\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"primaryExpression\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"primaryExpression\"], \r\n\t     \"PNAME_LN\": [\"primaryExpression\"], \r\n\t     \"PNAME_NS\": [\"primaryExpression\"]}, \r\n\t  \"update\" : {\r\n\t     \"INSERT\": [\"prologue\",\"?[update1,?[;,update]]\"], \r\n\t     \"DELETE\": [\"prologue\",\"?[update1,?[;,update]]\"], \r\n\t     \"LOAD\": [\"prologue\",\"?[update1,?[;,update]]\"], \r\n\t     \"CLEAR\": [\"prologue\",\"?[update1,?[;,update]]\"], \r\n\t     \"DROP\": [\"prologue\",\"?[update1,?[;,update]]\"], \r\n\t     \"ADD\": [\"prologue\",\"?[update1,?[;,update]]\"], \r\n\t     \"MOVE\": [\"prologue\",\"?[update1,?[;,update]]\"], \r\n\t     \"COPY\": [\"prologue\",\"?[update1,?[;,update]]\"], \r\n\t     \"CREATE\": [\"prologue\",\"?[update1,?[;,update]]\"], \r\n\t     \"WITH\": [\"prologue\",\"?[update1,?[;,update]]\"], \r\n\t     \"PREFIX\": [\"prologue\",\"?[update1,?[;,update]]\"], \r\n\t     \"BASE\": [\"prologue\",\"?[update1,?[;,update]]\"], \r\n\t     \"$\": [\"prologue\",\"?[update1,?[;,update]]\"]}, \r\n\t  \"update1\" : {\r\n\t     \"LOAD\": [\"load\"], \r\n\t     \"CLEAR\": [\"clear\"], \r\n\t     \"DROP\": [\"drop\"], \r\n\t     \"ADD\": [\"add\"], \r\n\t     \"MOVE\": [\"move\"], \r\n\t     \"COPY\": [\"copy\"], \r\n\t     \"CREATE\": [\"create\"], \r\n\t     \"INSERT\": [\"INSERT\",\"insert1\"], \r\n\t     \"DELETE\": [\"DELETE\",\"delete1\"], \r\n\t     \"WITH\": [\"modify\"]}, \r\n\t  \"updateAll\" : {\r\n\t     \"INSERT\": [\"?[update1,?[;,update]]\"], \r\n\t     \"DELETE\": [\"?[update1,?[;,update]]\"], \r\n\t     \"LOAD\": [\"?[update1,?[;,update]]\"], \r\n\t     \"CLEAR\": [\"?[update1,?[;,update]]\"], \r\n\t     \"DROP\": [\"?[update1,?[;,update]]\"], \r\n\t     \"ADD\": [\"?[update1,?[;,update]]\"], \r\n\t     \"MOVE\": [\"?[update1,?[;,update]]\"], \r\n\t     \"COPY\": [\"?[update1,?[;,update]]\"], \r\n\t     \"CREATE\": [\"?[update1,?[;,update]]\"], \r\n\t     \"WITH\": [\"?[update1,?[;,update]]\"], \r\n\t     \"$\": [\"?[update1,?[;,update]]\"]}, \r\n\t  \"usingClause\" : {\r\n\t     \"USING\": [\"USING\",\"or([iriRef,[NAMED,iriRef]])\"]}, \r\n\t  \"valueLogical\" : {\r\n\t     \"!\": [\"relationalExpression\"], \r\n\t     \"+\": [\"relationalExpression\"], \r\n\t     \"-\": [\"relationalExpression\"], \r\n\t     \"VAR1\": [\"relationalExpression\"], \r\n\t     \"VAR2\": [\"relationalExpression\"], \r\n\t     \"(\": [\"relationalExpression\"], \r\n\t     \"STR\": [\"relationalExpression\"], \r\n\t     \"LANG\": [\"relationalExpression\"], \r\n\t     \"LANGMATCHES\": [\"relationalExpression\"], \r\n\t     \"DATATYPE\": [\"relationalExpression\"], \r\n\t     \"BOUND\": [\"relationalExpression\"], \r\n\t     \"IRI\": [\"relationalExpression\"], \r\n\t     \"URI\": [\"relationalExpression\"], \r\n\t     \"BNODE\": [\"relationalExpression\"], \r\n\t     \"RAND\": [\"relationalExpression\"], \r\n\t     \"ABS\": [\"relationalExpression\"], \r\n\t     \"CEIL\": [\"relationalExpression\"], \r\n\t     \"FLOOR\": [\"relationalExpression\"], \r\n\t     \"ROUND\": [\"relationalExpression\"], \r\n\t     \"CONCAT\": [\"relationalExpression\"], \r\n\t     \"STRLEN\": [\"relationalExpression\"], \r\n\t     \"UCASE\": [\"relationalExpression\"], \r\n\t     \"LCASE\": [\"relationalExpression\"], \r\n\t     \"ENCODE_FOR_URI\": [\"relationalExpression\"], \r\n\t     \"CONTAINS\": [\"relationalExpression\"], \r\n\t     \"STRSTARTS\": [\"relationalExpression\"], \r\n\t     \"STRENDS\": [\"relationalExpression\"], \r\n\t     \"STRBEFORE\": [\"relationalExpression\"], \r\n\t     \"STRAFTER\": [\"relationalExpression\"], \r\n\t     \"YEAR\": [\"relationalExpression\"], \r\n\t     \"MONTH\": [\"relationalExpression\"], \r\n\t     \"DAY\": [\"relationalExpression\"], \r\n\t     \"HOURS\": [\"relationalExpression\"], \r\n\t     \"MINUTES\": [\"relationalExpression\"], \r\n\t     \"SECONDS\": [\"relationalExpression\"], \r\n\t     \"TIMEZONE\": [\"relationalExpression\"], \r\n\t     \"TZ\": [\"relationalExpression\"], \r\n\t     \"NOW\": [\"relationalExpression\"], \r\n\t     \"UUID\": [\"relationalExpression\"], \r\n\t     \"STRUUID\": [\"relationalExpression\"], \r\n\t     \"MD5\": [\"relationalExpression\"], \r\n\t     \"SHA1\": [\"relationalExpression\"], \r\n\t     \"SHA256\": [\"relationalExpression\"], \r\n\t     \"SHA384\": [\"relationalExpression\"], \r\n\t     \"SHA512\": [\"relationalExpression\"], \r\n\t     \"COALESCE\": [\"relationalExpression\"], \r\n\t     \"IF\": [\"relationalExpression\"], \r\n\t     \"STRLANG\": [\"relationalExpression\"], \r\n\t     \"STRDT\": [\"relationalExpression\"], \r\n\t     \"SAMETERM\": [\"relationalExpression\"], \r\n\t     \"ISIRI\": [\"relationalExpression\"], \r\n\t     \"ISURI\": [\"relationalExpression\"], \r\n\t     \"ISBLANK\": [\"relationalExpression\"], \r\n\t     \"ISLITERAL\": [\"relationalExpression\"], \r\n\t     \"ISNUMERIC\": [\"relationalExpression\"], \r\n\t     \"TRUE\": [\"relationalExpression\"], \r\n\t     \"FALSE\": [\"relationalExpression\"], \r\n\t     \"COUNT\": [\"relationalExpression\"], \r\n\t     \"SUM\": [\"relationalExpression\"], \r\n\t     \"MIN\": [\"relationalExpression\"], \r\n\t     \"MAX\": [\"relationalExpression\"], \r\n\t     \"AVG\": [\"relationalExpression\"], \r\n\t     \"SAMPLE\": [\"relationalExpression\"], \r\n\t     \"GROUP_CONCAT\": [\"relationalExpression\"], \r\n\t     \"SUBSTR\": [\"relationalExpression\"], \r\n\t     \"REPLACE\": [\"relationalExpression\"], \r\n\t     \"REGEX\": [\"relationalExpression\"], \r\n\t     \"EXISTS\": [\"relationalExpression\"], \r\n\t     \"NOT\": [\"relationalExpression\"], \r\n\t     \"IRI_REF\": [\"relationalExpression\"], \r\n\t     \"STRING_LITERAL1\": [\"relationalExpression\"], \r\n\t     \"STRING_LITERAL2\": [\"relationalExpression\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"relationalExpression\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"relationalExpression\"], \r\n\t     \"INTEGER\": [\"relationalExpression\"], \r\n\t     \"DECIMAL\": [\"relationalExpression\"], \r\n\t     \"DOUBLE\": [\"relationalExpression\"], \r\n\t     \"INTEGER_POSITIVE\": [\"relationalExpression\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"relationalExpression\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"relationalExpression\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"relationalExpression\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"relationalExpression\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"relationalExpression\"], \r\n\t     \"PNAME_LN\": [\"relationalExpression\"], \r\n\t     \"PNAME_NS\": [\"relationalExpression\"]}, \r\n\t  \"valuesClause\" : {\r\n\t     \"VALUES\": [\"VALUES\",\"dataBlock\"], \r\n\t     \"$\": [], \r\n\t     \"}\": []}, \r\n\t  \"var\" : {\r\n\t     \"VAR1\": [\"VAR1\"], \r\n\t     \"VAR2\": [\"VAR2\"]}, \r\n\t  \"varOrIRIref\" : {\r\n\t     \"VAR1\": [\"var\"], \r\n\t     \"VAR2\": [\"var\"], \r\n\t     \"IRI_REF\": [\"iriRef\"], \r\n\t     \"PNAME_LN\": [\"iriRef\"], \r\n\t     \"PNAME_NS\": [\"iriRef\"]}, \r\n\t  \"varOrTerm\" : {\r\n\t     \"VAR1\": [\"var\"], \r\n\t     \"VAR2\": [\"var\"], \r\n\t     \"NIL\": [\"graphTerm\"], \r\n\t     \"IRI_REF\": [\"graphTerm\"], \r\n\t     \"TRUE\": [\"graphTerm\"], \r\n\t     \"FALSE\": [\"graphTerm\"], \r\n\t     \"BLANK_NODE_LABEL\": [\"graphTerm\"], \r\n\t     \"ANON\": [\"graphTerm\"], \r\n\t     \"PNAME_LN\": [\"graphTerm\"], \r\n\t     \"PNAME_NS\": [\"graphTerm\"], \r\n\t     \"STRING_LITERAL1\": [\"graphTerm\"], \r\n\t     \"STRING_LITERAL2\": [\"graphTerm\"], \r\n\t     \"STRING_LITERAL_LONG1\": [\"graphTerm\"], \r\n\t     \"STRING_LITERAL_LONG2\": [\"graphTerm\"], \r\n\t     \"INTEGER\": [\"graphTerm\"], \r\n\t     \"DECIMAL\": [\"graphTerm\"], \r\n\t     \"DOUBLE\": [\"graphTerm\"], \r\n\t     \"INTEGER_POSITIVE\": [\"graphTerm\"], \r\n\t     \"DECIMAL_POSITIVE\": [\"graphTerm\"], \r\n\t     \"DOUBLE_POSITIVE\": [\"graphTerm\"], \r\n\t     \"INTEGER_NEGATIVE\": [\"graphTerm\"], \r\n\t     \"DECIMAL_NEGATIVE\": [\"graphTerm\"], \r\n\t     \"DOUBLE_NEGATIVE\": [\"graphTerm\"]}, \r\n\t  \"verb\" : {\r\n\t     \"VAR1\": [\"storeProperty\",\"varOrIRIref\"], \r\n\t     \"VAR2\": [\"storeProperty\",\"varOrIRIref\"], \r\n\t     \"IRI_REF\": [\"storeProperty\",\"varOrIRIref\"], \r\n\t     \"PNAME_LN\": [\"storeProperty\",\"varOrIRIref\"], \r\n\t     \"PNAME_NS\": [\"storeProperty\",\"varOrIRIref\"], \r\n\t     \"a\": [\"storeProperty\",\"a\"]}, \r\n\t  \"verbPath\" : {\r\n\t     \"^\": [\"path\"], \r\n\t     \"a\": [\"path\"], \r\n\t     \"!\": [\"path\"], \r\n\t     \"(\": [\"path\"], \r\n\t     \"IRI_REF\": [\"path\"], \r\n\t     \"PNAME_LN\": [\"path\"], \r\n\t     \"PNAME_NS\": [\"path\"]}, \r\n\t  \"verbSimple\" : {\r\n\t     \"VAR1\": [\"var\"], \r\n\t     \"VAR2\": [\"var\"]}, \r\n\t  \"whereClause\" : {\r\n\t     \"{\": [\"?WHERE\",\"groupGraphPattern\"], \r\n\t     \"WHERE\": [\"?WHERE\",\"groupGraphPattern\"]}\r\n\t};\r\n\t\r\n\tvar keywords=/^(GROUP_CONCAT|DATATYPE|BASE|PREFIX|SELECT|CONSTRUCT|DESCRIBE|ASK|FROM|NAMED|ORDER|BY|LIMIT|ASC|DESC|OFFSET|DISTINCT|REDUCED|WHERE|GRAPH|OPTIONAL|UNION|FILTER|GROUP|HAVING|AS|VALUES|LOAD|CLEAR|DROP|CREATE|MOVE|COPY|SILENT|INSERT|DELETE|DATA|WITH|TO|USING|NAMED|MINUS|BIND|LANGMATCHES|LANG|BOUND|SAMETERM|ISIRI|ISURI|ISBLANK|ISLITERAL|REGEX|TRUE|FALSE|UNDEF|ADD|DEFAULT|ALL|SERVICE|INTO|IN|NOT|IRI|URI|BNODE|RAND|ABS|CEIL|FLOOR|ROUND|CONCAT|STRLEN|UCASE|LCASE|ENCODE_FOR_URI|CONTAINS|STRSTARTS|STRENDS|STRBEFORE|STRAFTER|YEAR|MONTH|DAY|HOURS|MINUTES|SECONDS|TIMEZONE|TZ|NOW|UUID|STRUUID|MD5|SHA1|SHA256|SHA384|SHA512|COALESCE|IF|STRLANG|STRDT|ISNUMERIC|SUBSTR|REPLACE|EXISTS|COUNT|SUM|MIN|MAX|AVG|SAMPLE|SEPARATOR|STR)/i ;\r\n\t\r\n\tvar punct=/^(\\*|a|\\.|\\{|\\}|,|\\(|\\)|;|\\[|\\]|\\|\\||&&|=|!=|!|<=|>=|<|>|\\+|-|\\/|\\^\\^|\\?|\\||\\^)/ ;\r\n\t\r\n\tvar defaultQueryType=null;\r\n\tvar lexVersion=\"sparql11\";\r\n\tvar startSymbol=\"sparql11\";\r\n\tvar acceptEmpty=true;\r\n\t\r\n\t\tfunction getTerminals()\r\n\t\t{\r\n\t\t\tvar IRI_REF = '<[^<>\\\"\\'\\|\\{\\}\\^\\\\\\x00-\\x20]*>';\r\n\t\t\t/*\r\n\t\t\t * PN_CHARS_BASE =\r\n\t\t\t * '[A-Z]|[a-z]|[\\\\u00C0-\\\\u00D6]|[\\\\u00D8-\\\\u00F6]|[\\\\u00F8-\\\\u02FF]|[\\\\u0370-\\\\u037D]|[\\\\u037F-\\\\u1FFF]|[\\\\u200C-\\\\u200D]|[\\\\u2070-\\\\u218F]|[\\\\u2C00-\\\\u2FEF]|[\\\\u3001-\\\\uD7FF]|[\\\\uF900-\\\\uFDCF]|[\\\\uFDF0-\\\\uFFFD]|[\\\\u10000-\\\\uEFFFF]';\r\n\t\t\t */\r\n\t\r\n\t\t\tvar PN_CHARS_BASE =\r\n\t\t\t\t'[A-Za-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD]';\r\n\t\t\tvar PN_CHARS_U = PN_CHARS_BASE+'|_';\r\n\t\r\n\t\t\tvar PN_CHARS= '('+PN_CHARS_U+'|-|[0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040])';\r\n\t\t\tvar VARNAME = '('+PN_CHARS_U+'|[0-9])'+\r\n\t\t\t\t'('+PN_CHARS_U+'|[0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040])*';\r\n\t\t\tvar VAR1 = '\\\\?'+VARNAME;\r\n\t\t\tvar VAR2 = '\\\\$'+VARNAME;\r\n\t\r\n\t\t\tvar PN_PREFIX= '('+PN_CHARS_BASE+')((('+PN_CHARS+')|\\\\.)*('+PN_CHARS+'))?';\r\n\t\r\n\t\t\tvar HEX= '[0-9A-Fa-f]';\r\n\t\t\tvar PERCENT='(%'+HEX+HEX+')';\r\n\t\t\tvar PN_LOCAL_ESC='(\\\\\\\\[_~\\\\.\\\\-!\\\\$&\\'\\\\(\\\\)\\\\*\\\\+,;=/\\\\?#@%])';\r\n\t\t\tvar PLX= '('+PERCENT+'|'+PN_LOCAL_ESC+')';\r\n\t\t\tvar PN_LOCAL;\r\n\t\t\tvar BLANK_NODE_LABEL;\r\n\t\t\tif (lexVersion==\"sparql11\") {\r\n\t\t\t\tPN_LOCAL= '('+PN_CHARS_U+'|:|[0-9]|'+PLX+')(('+PN_CHARS+'|\\\\.|:|'+PLX+')*('+PN_CHARS+'|:|'+PLX+'))?';\r\n\t\t\t\tBLANK_NODE_LABEL = '_:('+PN_CHARS_U+'|[0-9])(('+PN_CHARS+'|\\\\.)*'+PN_CHARS+')?';\r\n\t\t\t} else {\r\n\t\t\t\tPN_LOCAL= '('+PN_CHARS_U+'|[0-9])((('+PN_CHARS+')|\\\\.)*('+PN_CHARS+'))?';\r\n\t\t\t\tBLANK_NODE_LABEL = '_:'+PN_LOCAL;\r\n\t\t\t}\r\n\t\t\tvar PNAME_NS = '('+PN_PREFIX+')?:';\r\n\t\t\tvar PNAME_LN = PNAME_NS+PN_LOCAL;\r\n\t\t\tvar LANGTAG = '@[a-zA-Z]+(-[a-zA-Z0-9]+)*';\r\n\t\r\n\t\t\tvar EXPONENT = '[eE][\\\\+-]?[0-9]+';\r\n\t\t\tvar INTEGER = '[0-9]+';\r\n\t\t\tvar DECIMAL = '(([0-9]+\\\\.[0-9]*)|(\\\\.[0-9]+))';\r\n\t\t\tvar DOUBLE =\r\n\t\t\t\t'(([0-9]+\\\\.[0-9]*'+EXPONENT+')|'+\r\n\t\t\t\t'(\\\\.[0-9]+'+EXPONENT+')|'+\r\n\t\t\t\t'([0-9]+'+EXPONENT+'))';\r\n\t\r\n\t\t\tvar INTEGER_POSITIVE = '\\\\+' + INTEGER;\r\n\t\t\tvar DECIMAL_POSITIVE = '\\\\+' + DECIMAL;\r\n\t\t\tvar DOUBLE_POSITIVE  = '\\\\+' + DOUBLE;\r\n\t\t\tvar INTEGER_NEGATIVE = '-' + INTEGER;\r\n\t\t\tvar DECIMAL_NEGATIVE = '-' + DECIMAL;\r\n\t\t\tvar DOUBLE_NEGATIVE  = '-' + DOUBLE;\r\n\t\r\n\t\t\tvar ECHAR = '\\\\\\\\[tbnrf\\\\\\\\\"\\']';\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t //IMPORTANT: this unicode rule is not in the official grammar.\r\n\t\t      //Reason: https://github.com/YASGUI/YASQE/issues/49\r\n\t\t      //unicode escape sequences (which the sparql spec considers part of the pre-processing of sparql queries)\r\n\t\t      //are marked as invalid. We have little choice (other than adding a layer of complixity) than to modify the grammar accordingly\r\n\t\t      //however, for now only allow these escape sequences in literals (where actually, this should be allows in e.g. prefixes as well)\r\n\t\t\tvar hex4 = HEX + '{4}'\r\n\t\t\tvar unicode = '(\\\\\\\\u' + hex4 +'|\\\\\\\\U00(10|0' + HEX + ')'+ hex4 + ')';\r\n\t\r\n\t\t\tvar STRING_LITERAL1 = \"'(([^\\\\x27\\\\x5C\\\\x0A\\\\x0D])|\"+ECHAR+\"|\" + unicode + \")*'\";\r\n\t\t\tvar STRING_LITERAL2 = '\"(([^\\\\x22\\\\x5C\\\\x0A\\\\x0D])|'+ECHAR+'|' + unicode + ')*\"';\r\n\t\r\n\t\t\tvar STRING_LITERAL_LONG1 = \"'''(('|'')?([^'\\\\\\\\]|\"+ECHAR+\"|\"+unicode+\"))*'''\";\r\n\t\t\tvar STRING_LITERAL_LONG2 = '\"\"\"((\"|\"\")?([^\"\\\\\\\\]|'+ECHAR+'|'+unicode+'))*\"\"\"';\r\n\t\r\n\t\t\tvar WS    =        '[\\\\x20\\\\x09\\\\x0D\\\\x0A]';\r\n\t\t\t// Careful! Code mirror feeds one line at a time with no \\n\r\n\t\t\t// ... but otherwise comment is terminated by \\n\r\n\t\t\tvar COMMENT = '#([^\\\\n\\\\r]*[\\\\n\\\\r]|[^\\\\n\\\\r]*$)';\r\n\t\t\tvar WS_OR_COMMENT_STAR = '('+WS+'|('+COMMENT+'))*';\r\n\t\t\tvar NIL   = '\\\\('+WS_OR_COMMENT_STAR+'\\\\)';\r\n\t\t\tvar ANON  = '\\\\['+WS_OR_COMMENT_STAR+'\\\\]';\r\n\t\r\n\t\t\tvar terminals=\r\n\t\t\t\t{\r\n\t\t\t\t\tterminal: [\r\n\t\r\n\t\t\t\t\t\t{ name: \"WS\",\r\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+WS+\"+\"),\r\n\t\t\t\t\t\t\tstyle:\"ws\" },\r\n\t\r\n\t\t\t\t\t\t{ name: \"COMMENT\",\r\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+COMMENT),\r\n\t\t\t\t\t\t\tstyle:\"comment\" },\r\n\t\r\n\t\t\t\t\t\t{ name: \"IRI_REF\",\r\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+IRI_REF),\r\n\t\t\t\t\t\t\tstyle:\"variable-3\" },\r\n\t\r\n\t\t\t\t\t\t{ name: \"VAR1\",\r\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+VAR1),\r\n\t\t\t\t\t\t\tstyle:\"atom\"},\r\n\t\r\n\t\t\t\t\t\t{ name: \"VAR2\",\r\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+VAR2),\r\n\t\t\t\t\t\t\tstyle:\"atom\"},\r\n\t\r\n\t\t\t\t\t\t{ name: \"LANGTAG\",\r\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+LANGTAG),\r\n\t\t\t\t\t\t\tstyle:\"meta\"},\r\n\t\r\n\t\t\t\t\t\t{ name: \"DOUBLE\",\r\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+DOUBLE),\r\n\t\t\t\t\t\t\tstyle:\"number\" },\r\n\t\r\n\t\t\t\t\t\t{ name: \"DECIMAL\",\r\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+DECIMAL),\r\n\t\t\t\t\t\t\tstyle:\"number\" },\r\n\t\r\n\t\t\t\t\t\t{ name: \"INTEGER\",\r\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+INTEGER),\r\n\t\t\t\t\t\t\tstyle:\"number\" },\r\n\t\r\n\t\t\t\t\t\t{ name: \"DOUBLE_POSITIVE\",\r\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+DOUBLE_POSITIVE),\r\n\t\t\t\t\t\t\tstyle:\"number\" },\r\n\t\r\n\t\t\t\t\t\t{ name: \"DECIMAL_POSITIVE\",\r\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+DECIMAL_POSITIVE),\r\n\t\t\t\t\t\t\tstyle:\"number\" },\r\n\t\r\n\t\t\t\t\t\t{ name: \"INTEGER_POSITIVE\",\r\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+INTEGER_POSITIVE),\r\n\t\t\t\t\t\t\tstyle:\"number\" },\r\n\t\r\n\t\t\t\t\t\t{ name: \"DOUBLE_NEGATIVE\",\r\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+DOUBLE_NEGATIVE),\r\n\t\t\t\t\t\t\tstyle:\"number\" },\r\n\t\r\n\t\t\t\t\t\t{ name: \"DECIMAL_NEGATIVE\",\r\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+DECIMAL_NEGATIVE),\r\n\t\t\t\t\t\t\tstyle:\"number\" },\r\n\t\r\n\t\t\t\t\t\t{ name: \"INTEGER_NEGATIVE\",\r\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+INTEGER_NEGATIVE),\r\n\t\t\t\t\t\t\tstyle:\"number\" },\r\n\t\r\n\t\t\t\t\t\t{ name: \"STRING_LITERAL_LONG1\",\r\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL_LONG1),\r\n\t\t\t\t\t\t\tstyle:\"string\" },\r\n\t\r\n\t\t\t\t\t\t{ name: \"STRING_LITERAL_LONG2\",\r\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL_LONG2),\r\n\t\t\t\t\t\t\tstyle:\"string\" },\r\n\t\r\n\t\t\t\t\t\t{ name: \"STRING_LITERAL1\",\r\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL1),\r\n\t\t\t\t\t\t\tstyle:\"string\" },\r\n\t\r\n\t\t\t\t\t\t{ name: \"STRING_LITERAL2\",\r\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL2),\r\n\t\t\t\t\t\t\tstyle:\"string\" },\r\n\t\r\n\t\t\t\t\t\t// Enclosed comments won't be highlighted\r\n\t\t\t\t\t\t{ name: \"NIL\",\r\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+NIL),\r\n\t\t\t\t\t\t\tstyle:\"punc\" },\r\n\t\r\n\t\t\t\t\t\t// Enclosed comments won't be highlighted\r\n\t\t\t\t\t\t{ name: \"ANON\",\r\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+ANON),\r\n\t\t\t\t\t\t\tstyle:\"punc\" },\r\n\t\r\n\t\t\t\t\t\t{ name: \"PNAME_LN\",\r\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+PNAME_LN),\r\n\t\t\t\t\t\t\tstyle:\"string-2\" },\r\n\t\r\n\t\t\t\t\t\t{ name: \"PNAME_NS\",\r\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+PNAME_NS),\r\n\t\t\t\t\t\t\tstyle:\"string-2\" },\r\n\t\r\n\t\t\t\t\t\t{ name: \"BLANK_NODE_LABEL\",\r\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+BLANK_NODE_LABEL),\r\n\t\t\t\t\t\t\tstyle:\"string-2\" }\r\n\t\t\t\t\t],\r\n\t\r\n\t\t\t\t};\r\n\t\t\treturn terminals;\r\n\t\t}\r\n\t\r\n\t\tfunction getPossibles(symbol)\r\n\t\t{\r\n\t\t\tvar possibles=[], possiblesOb=ll1_table[symbol];\r\n\t\t\tif (possiblesOb!=undefined)\r\n\t\t\t\tfor (var property in possiblesOb)\r\n\t\t\t\t\tpossibles.push(property.toString());\r\n\t\t\telse\r\n\t\t\t\tpossibles.push(symbol);\r\n\t\t\treturn possibles;\r\n\t\t}\r\n\t\r\n\t\tvar tms= getTerminals();\r\n\t\tvar terminal=tms.terminal;\r\n\t\r\n\t\tfunction tokenBase(stream, state) {\r\n\t\r\n\t\t\tfunction nextToken() {\r\n\t\r\n\t\t\t\tvar consumed=null;\r\n\t\t\t\t// Tokens defined by individual regular expressions\r\n\t\t\t\tfor (var i=0; i<terminal.length; ++i) {\r\n\t\t\t\t\tconsumed= stream.match(terminal[i].regex,true,false);\r\n\t\t\t\t\tif (consumed)\r\n\t\t\t\t\t\treturn { cat: terminal[i].name,\r\n\t\t\t\t\t\t\t\t\t\t style: terminal[i].style,\r\n\t\t\t\t\t\t\t\t\t\t text: consumed[0]\r\n\t\t\t\t\t\t\t\t\t };\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// Keywords\r\n\t\t\t\tconsumed= stream.match(keywords,true,false);\r\n\t\t\t\tif (consumed)\r\n\t\t\t\t\treturn { cat: stream.current().toUpperCase(),\r\n\t\t\t\t\t\t\t\t\t style: \"keyword\",\r\n\t\t\t\t\t\t\t\t\t text: consumed[0]\r\n\t\t\t\t\t\t\t\t };\r\n\t\r\n\t\t\t\t// Punctuation\r\n\t\t\t\tconsumed= stream.match(punct,true,false);\r\n\t\t\t\tif (consumed)\r\n\t\t\t\t\treturn { cat: stream.current(),\r\n\t\t\t\t\t\t\t\t\t style: \"punc\",\r\n\t\t\t\t\t\t\t\t\t text: consumed[0]\r\n\t\t\t\t\t\t\t\t };\r\n\t\r\n\t\t\t\t// Token is invalid\r\n\t\t\t\t// better consume something anyway, or else we're stuck\r\n\t\t\t\tconsumed= stream.match(/^.[A-Za-z0-9]*/,true,false);\r\n\t\t\t\treturn { cat:\"<invalid_token>\",\r\n\t\t\t\t\t\t\t\t style: \"error\",\r\n\t\t\t\t\t\t\t\t text: consumed[0]\r\n\t\t\t\t\t\t\t };\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction recordFailurePos() {\r\n\t\t\t\t// tokenOb.style= \"sp-invalid\";\r\n\t\t\t\tvar col= stream.column();\r\n\t\t\t\tstate.errorStartPos= col;\r\n\t\t\t\tstate.errorEndPos= col+tokenOb.text.length;\r\n\t\t\t};\r\n\t\r\n\t\t\tfunction setQueryType(s) {\r\n\t\t\t\tif (state.queryType==null) {\r\n\t\t\t\t\tif (s ==\"SELECT\" || s==\"CONSTRUCT\" || s==\"ASK\" || s==\"DESCRIBE\" || s==\"INSERT\" || s==\"DELETE\" || s==\"LOAD\" || s==\"CLEAR\" || s==\"CREATE\" || s==\"DROP\" || s==\"COPY\" || s==\"MOVE\" || s==\"ADD\")\r\n\t\t\t\t\t\tstate.queryType=s;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\t// Some fake non-terminals are just there to have side-effect on state\r\n\t\t\t// - i.e. allow or disallow variables and bnodes in certain non-nesting\r\n\t\t\t// contexts\r\n\t\t\tfunction setSideConditions(topSymbol) {\r\n\t\t\t\tif (topSymbol==\"disallowVars\") state.allowVars=false;\r\n\t\t\t\telse if (topSymbol==\"allowVars\") state.allowVars=true;\r\n\t\t\t\telse if (topSymbol==\"disallowBnodes\") state.allowBnodes=false;\r\n\t\t\t\telse if (topSymbol==\"allowBnodes\") state.allowBnodes=true;\r\n\t\t\t\telse if (topSymbol==\"storeProperty\") state.storeProperty=true;\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction checkSideConditions(topSymbol) {\r\n\t\t\t\treturn(\r\n\t\t\t\t\t(state.allowVars || topSymbol!=\"var\") &&\r\n\t\t\t\t\t\t(state.allowBnodes ||\r\n\t\t\t\t\t\t (topSymbol!=\"blankNode\" &&\r\n\t\t\t\t\t\t\ttopSymbol!=\"blankNodePropertyList\" &&\r\n\t\t\t\t\t\t\ttopSymbol!=\"blankNodePropertyListPath\")));\r\n\t\t\t}\r\n\t\r\n\t\t\t// CodeMirror works with one line at a time,\r\n\t\t\t// but newline should behave like whitespace\r\n\t\t\t// - i.e. a definite break between tokens (for autocompleter)\r\n\t\t\tif (stream.pos==0)\r\n\t\t\t\tstate.possibleCurrent= state.possibleNext;\r\n\t\r\n\t\t\tvar tokenOb= nextToken();\r\n\t\r\n\t\r\n\t\t\tif (tokenOb.cat==\"<invalid_token>\") {\r\n\t\t\t\t// set error state, and\r\n\t\t\t\tif (state.OK==true) {\r\n\t\t\t\t\tstate.OK=false;\r\n\t\t\t\t\trecordFailurePos();\r\n\t\t\t\t}\r\n\t\t\t\tstate.complete=false;\r\n\t\t\t\t// alert(\"Invalid:\"+tokenOb.text);\r\n\t\t\t\treturn tokenOb.style;\r\n\t\t\t}\r\n\t\r\n\t\t\tif (tokenOb.cat == \"WS\" ||\r\n\t\t\t\t\ttokenOb.cat == \"COMMENT\") {\r\n\t\t\t\tstate.possibleCurrent= state.possibleNext;\r\n\t\t\t\treturn(tokenOb.style);\r\n\t\t\t}\r\n\t\t\t// Otherwise, run the parser until the token is digested\r\n\t\t\t// or failure\r\n\t\t\tvar finished= false;\r\n\t\t\tvar topSymbol;\r\n\t\t\tvar token= tokenOb.cat;\r\n\t\r\n\t\t\t// Incremental LL1 parse\r\n\t\t\twhile(state.stack.length>0 && token && state.OK && !finished ) {\r\n\t\t\t\ttopSymbol= state.stack.pop();\r\n\t\r\n\t\t\t\tif (!ll1_table[topSymbol]) {\r\n\t\t\t\t\t// Top symbol is a terminal\r\n\t\t\t\t\tif (topSymbol==token) {\r\n\t\t\t\t\t\t// Matching terminals\r\n\t\t\t\t\t\t// - consume token from input stream\r\n\t\t\t\t\t\tfinished=true;\r\n\t\t\t\t\t\tsetQueryType(topSymbol);\r\n\t\t\t\t\t\t// Check whether $ (end of input token) is poss next\r\n\t\t\t\t\t\t// for everything on stack\r\n\t\t\t\t\t\tvar allNillable=true;\r\n\t\t\t\t\t\tfor(var sp=state.stack.length;sp>0;--sp) {\r\n\t\t\t\t\t\t\tvar item=ll1_table[state.stack[sp-1]];\r\n\t\t\t\t\t\t\tif (!item || !item[\"$\"])\r\n\t\t\t\t\t\t\t\tallNillable=false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tstate.complete= allNillable;\r\n\t\t\t\t\t\tif (state.storeProperty && token.cat!=\"punc\") {\r\n\t\t\t\t\t\t\t\tstate.lastProperty= tokenOb.text;\r\n\t\t\t\t\t\t\t\tstate.storeProperty= false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tstate.OK=false;\r\n\t\t\t\t\t\tstate.complete=false;\r\n\t\t\t\t\t\trecordFailurePos();\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// topSymbol is nonterminal\r\n\t\t\t\t\t// - see if there is an entry for topSymbol\r\n\t\t\t\t\t// and nextToken in table\r\n\t\t\t\t\tvar nextSymbols= ll1_table[topSymbol][token];\r\n\t\t\t\t\tif (nextSymbols!=undefined\r\n\t\t\t\t\t\t\t&& checkSideConditions(topSymbol)\r\n\t\t\t\t\t\t )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Match - copy RHS of rule to stack\r\n\t\t\t\t\t\tfor (var i=nextSymbols.length-1; i>=0; --i)\r\n\t\t\t\t\t\t\tstate.stack.push(nextSymbols[i]);\r\n\t\t\t\t\t\t// Peform any non-grammatical side-effects\r\n\t\t\t\t\t\tsetSideConditions(topSymbol);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// No match in table - fail\r\n\t\t\t\t\t\tstate.OK=false;\r\n\t\t\t\t\t\tstate.complete=false;\r\n\t\t\t\t\t\trecordFailurePos();\r\n\t\t\t\t\t\tstate.stack.push(topSymbol);  // Shove topSymbol back on stack\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!finished && state.OK) { \r\n\t\t\t\tstate.OK=false; state.complete=false; recordFailurePos(); \r\n\t    }\r\n\t\r\n\t\t\tstate.possibleCurrent= state.possibleNext;\r\n\t\t\tstate.possibleNext= getPossibles(state.stack[state.stack.length-1]);\r\n\t\r\n\t\t\t// alert(token+\"=\"+tokenOb.style+'\\n'+state.stack);\r\n\t\t\treturn tokenOb.style;\r\n\t\t}\r\n\t\r\n\t\tvar indentTop={\r\n\t\t\t\"*[,, object]\": 3,\r\n\t\t\t\"*[(,),object]\": 3,\r\n\t\t\t\"*[(,),objectPath]\": 3,\r\n\t\t\t\"*[/,pathEltOrInverse]\": 2,\r\n\t\t\t\"object\": 2,\r\n\t\t\t\"objectPath\": 2,\r\n\t\t\t\"objectList\": 2,\r\n\t\t\t\"objectListPath\": 2,\r\n\t\t\t\"storeProperty\": 2,\r\n\t\t\t\"pathMod\": 2,\r\n\t\t\t\"?pathMod\": 2,\r\n\t\t\t\"propertyListNotEmpty\": 1,\r\n\t\t\t\"propertyList\": 1,\r\n\t\t\t\"propertyListPath\": 1,\r\n\t\t\t\"propertyListPathNotEmpty\": 1,\r\n\t\t\t\"?[verb,objectList]\": 1,\r\n\t\t\t\"?[or([verbPath, verbSimple]),objectList]\": 1,\r\n\t\t};\r\n\t\r\n\t\tvar indentTable={\r\n\t\t\t\"}\":1,\r\n\t\t\t\"]\":0,\r\n\t\t\t\")\":1,\r\n\t\t\t\"{\":-1,\r\n\t\t\t\"(\":-1,\r\n\t\t\t\"*[;,?[or([verbPath,verbSimple]),objectList]]\": 1,\r\n\t\t};\r\n\t\t\r\n\t\r\n\t\tfunction indent(state, textAfter) {\r\n\t\t\tvar n = 0; // indent level\r\n\t\t\tvar i=state.stack.length-1;\r\n\t\r\n\t\t\tif (/^[\\}\\]\\)]/.test(textAfter)) {\r\n\t\t\t\t// Skip stack items until after matching bracket\r\n\t\t\t\tvar closeBracket=textAfter.substr(0,1);\r\n\t\t\t\tfor( ;i>=0;--i)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (state.stack[i]==closeBracket)\r\n\t\t\t\t\t{--i; break;};\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// Consider nullable non-terminals if at top of stack\r\n\t\t\t\tvar dn=indentTop[state.stack[i]];\r\n\t\t\t\tif (dn) { \r\n\t\t\t\t\tn+=dn; --i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor( ;i>=0;--i)\r\n\t\t\t{\r\n\t\t\t\tvar dn=indentTable[state.stack[i]];\r\n\t\t\t\tif (dn) {\r\n\t\t\t\t\tn+=dn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn n * config.indentUnit;\r\n\t\t};\r\n\t\r\n\t\treturn {\r\n\t\t\ttoken: tokenBase,\r\n\t\t\tstartState: function(base) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\ttokenize: tokenBase,\r\n\t\t\t\t\tOK: true,\r\n\t\t\t\t\tcomplete: acceptEmpty,\r\n\t\t\t\t\terrorStartPos: null,\r\n\t\t\t\t\terrorEndPos: null,\r\n\t\t\t\t\tqueryType: defaultQueryType,\r\n\t\t\t\t\tpossibleCurrent: getPossibles(startSymbol),\r\n\t\t\t\t\tpossibleNext: getPossibles(startSymbol),\r\n\t\t\t\t\tallowVars : true,\r\n\t\t\t\t\tallowBnodes : true,\r\n\t\t\t\t\tstoreProperty : false,\r\n\t\t\t\t\tlastProperty : \"\",\r\n\t\t\t\t\tstack: [startSymbol]\r\n\t\t\t\t}; \r\n\t\t\t},\r\n\t\t\tindent: indent,\r\n\t\t\telectricChars: \"}])\"\r\n\t\t};\r\n\t}\r\n\t);\r\n\tCodeMirror.defineMIME(\"application/x-sparql-query\", \"sparql11\");\r\n});\r\n","/*\r\n* TRIE implementation in Javascript\r\n* Copyright (c) 2010 Saurabh Odhyan | http://odhyan.com\r\n* \r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n* \r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n* \r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n* THE SOFTWARE.\r\n*\r\n* Date: Nov 7, 2010\r\n*/\r\n\r\n/*\r\n* A trie, or prefix tree, is a multi-way tree structure useful for storing strings over an alphabet. \r\n* It has been used to store large dictionaries of English (say) words in spell-checking programs \r\n* and in natural-language \"understanding\" programs.    \r\n* @see http://en.wikipedia.org/wiki/Trie\r\n* @see http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/Tree/Trie/\r\n/*\r\n\r\n* @class Trie\r\n* @constructor\r\n*/  \r\nvar Trie = module.exports = function() {\r\n    this.words = 0;\r\n    this.prefixes = 0;\r\n    this.children = [];\r\n};\r\n\r\nTrie.prototype = {\r\n    \r\n    /*\r\n    * Insert a word into the dictionary. \r\n    * Recursively traverse through the trie nodes, and create new node if does not already exist.\r\n    *\r\n    * @method insert\r\n    * @param {String} str Word to insert in the dictionary\r\n    * @param {Integer} pos Current index of the string to be inserted\r\n    * @return {Void}\r\n    */\r\n    insert: function(str, pos) {\r\n        if(str.length == 0) { //blank string cannot be inserted\r\n            return;\r\n        }\r\n        \r\n        var T = this,\r\n            k,\r\n            child;\r\n            \r\n        if(pos === undefined) {\r\n            pos = 0;\r\n        }\r\n        if(pos === str.length) {\r\n            T.words ++;\r\n            return;\r\n        }\r\n        T.prefixes ++;\r\n        k = str[pos];\r\n        if(T.children[k] === undefined) { //if node for this char doesn't exist, create one\r\n            T.children[k] = new Trie();\r\n        }\r\n        child = T.children[k];\r\n        child.insert(str, pos + 1);\r\n    },\r\n    \r\n    /*\r\n    * Remove a word from the dictionary.\r\n    *\r\n    * @method remove\r\n    * @param {String} str Word to be removed\r\n    * @param {Integer} pos Current index of the string to be removed\r\n    * @return {Void}\r\n    */\r\n    remove: function(str, pos) {\r\n        if(str.length == 0) {\r\n            return;\r\n        }\r\n        \r\n        var T = this,\r\n            k,\r\n            child;\r\n        \r\n        if(pos === undefined) {\r\n            pos = 0;\r\n        }   \r\n        if(T === undefined) {\r\n            return;\r\n        }\r\n        if(pos === str.length) {\r\n            T.words --;\r\n            return;\r\n        }\r\n        T.prefixes --;\r\n        k = str[pos];\r\n        child = T.children[k];\r\n        child.remove(str, pos + 1);\r\n    },\r\n    \r\n    /*\r\n    * Update an existing word in the dictionary. \r\n    * This method removes the old word from the dictionary and inserts the new word.\r\n    *\r\n    * @method update\r\n    * @param {String} strOld The old word to be replaced\r\n    * @param {String} strNew The new word to be inserted\r\n    * @return {Void}\r\n    */\r\n    update: function(strOld, strNew) {\r\n        if(strOld.length == 0 || strNew.length == 0) {\r\n            return;\r\n        }\r\n        this.remove(strOld);\r\n        this.insert(strNew);\r\n    },\r\n    \r\n    /*\r\n    * Count the number of times a given word has been inserted into the dictionary\r\n    *\r\n    * @method countWord\r\n    * @param {String} str Word to get count of\r\n    * @param {Integer} pos Current index of the given word\r\n    * @return {Integer} The number of times a given word exists in the dictionary\r\n    */\r\n    countWord: function(str, pos) {\r\n        if(str.length == 0) {\r\n            return 0;\r\n        }\r\n        \r\n        var T = this,\r\n            k,\r\n            child,\r\n            ret = 0;\r\n        \r\n        if(pos === undefined) {\r\n            pos = 0;\r\n        }   \r\n        if(pos === str.length) {\r\n            return T.words;\r\n        }\r\n        k = str[pos];\r\n        child = T.children[k];\r\n        if(child !== undefined) { //node exists\r\n            ret = child.countWord(str, pos + 1);\r\n        }\r\n        return ret;\r\n    },\r\n    \r\n    /*\r\n    * Count the number of times a given prefix exists in the dictionary\r\n    *\r\n    * @method countPrefix\r\n    * @param {String} str Prefix to get count of\r\n    * @param {Integer} pos Current index of the given prefix\r\n    * @return {Integer} The number of times a given prefix exists in the dictionary\r\n    */\r\n    countPrefix: function(str, pos) {\r\n        if(str.length == 0) {\r\n            return 0;\r\n        }\r\n        \r\n        var T = this,\r\n            k,\r\n            child,\r\n            ret = 0;\r\n\r\n        if(pos === undefined) {\r\n            pos = 0;\r\n        }\r\n        if(pos === str.length) {\r\n            return T.prefixes;\r\n        }\r\n        var k = str[pos];\r\n        child = T.children[k];\r\n        if(child !== undefined) { //node exists\r\n            ret = child.countPrefix(str, pos + 1); \r\n        }\r\n        return ret; \r\n    },\r\n    \r\n    /*\r\n    * Find a word in the dictionary\r\n    *\r\n    * @method find\r\n    * @param {String} str The word to find in the dictionary\r\n    * @return {Boolean} True if the word exists in the dictionary, else false\r\n    */\r\n    find: function(str) {\r\n        if(str.length == 0) {\r\n            return false;\r\n        }\r\n        \r\n        if(this.countWord(str) > 0) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    },\r\n    \r\n    /*\r\n    * Get all words in the dictionary\r\n    *\r\n    * @method getAllWords\r\n    * @param {String} str Prefix of current word\r\n    * @return {Array} Array of words in the dictionary\r\n    */\r\n    getAllWords: function(str) {\r\n        var T = this,\r\n            k,\r\n            child,\r\n            ret = [];\r\n        if(str === undefined) {\r\n            str = \"\";\r\n        }\r\n        if(T === undefined) {\r\n            return [];\r\n        }\r\n        if(T.words > 0) {\r\n            ret.push(str);\r\n        }\r\n        for(k in T.children) {\r\n            child = T.children[k];\r\n            ret = ret.concat(child.getAllWords(str + k));\r\n        }\r\n        return ret;\r\n    },\r\n    \r\n    /*\r\n    * Autocomplete a given prefix\r\n    *\r\n    * @method autoComplete\r\n    * @param {String} str Prefix to be completed based on dictionary entries\r\n    * @param {Integer} pos Current index of the prefix\r\n    * @return {Array} Array of possible suggestions\r\n    */\r\n    autoComplete: function(str, pos) {\r\n        \r\n        \r\n        var T = this,\r\n            k,\r\n            child;\r\n        if(str.length == 0) {\r\n\t\t\tif (pos === undefined) {\r\n\t\t\t\treturn T.getAllWords(str);\r\n\t\t\t} else {\r\n\t\t\t\treturn [];\r\n\t\t\t}\r\n        }\r\n        if(pos === undefined) {\r\n            pos = 0;\r\n        }   \r\n        k = str[pos];\r\n        child = T.children[k];\r\n        if(child === undefined) { //node doesn't exist\r\n            return [];\r\n        }\r\n        if(pos === str.length - 1) {\r\n            return child.getAllWords(str);\r\n        }\r\n        return child.autoComplete(str, pos + 1);\r\n    }\r\n};\r\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"fullScreen\", false, function(cm, val, old) {\n    if (old == CodeMirror.Init) old = false;\n    if (!old == !val) return;\n    if (val) setFullscreen(cm);\n    else setNormal(cm);\n  });\n\n  function setFullscreen(cm) {\n    var wrap = cm.getWrapperElement();\n    cm.state.fullScreenRestore = {scrollTop: window.pageYOffset, scrollLeft: window.pageXOffset,\n                                  width: wrap.style.width, height: wrap.style.height};\n    wrap.style.width = \"\";\n    wrap.style.height = \"auto\";\n    wrap.className += \" CodeMirror-fullscreen\";\n    document.documentElement.style.overflow = \"hidden\";\n    cm.refresh();\n  }\n\n  function setNormal(cm) {\n    var wrap = cm.getWrapperElement();\n    wrap.className = wrap.className.replace(/\\s*CodeMirror-fullscreen\\b/, \"\");\n    document.documentElement.style.overflow = \"\";\n    var info = cm.state.fullScreenRestore;\n    wrap.style.width = info.width; wrap.style.height = info.height;\n    window.scrollTo(info.scrollLeft, info.scrollTop);\n    cm.refresh();\n  }\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  var ie_lt8 = /MSIE \\d/.test(navigator.userAgent) &&\n    (document.documentMode == null || document.documentMode < 8);\n\n  var Pos = CodeMirror.Pos;\n\n  var matching = {\"(\": \")>\", \")\": \"(<\", \"[\": \"]>\", \"]\": \"[<\", \"{\": \"}>\", \"}\": \"{<\"};\n\n  function findMatchingBracket(cm, where, strict, config) {\n    var line = cm.getLineHandle(where.line), pos = where.ch - 1;\n    var match = (pos >= 0 && matching[line.text.charAt(pos)]) || matching[line.text.charAt(++pos)];\n    if (!match) return null;\n    var dir = match.charAt(1) == \">\" ? 1 : -1;\n    if (strict && (dir > 0) != (pos == where.ch)) return null;\n    var style = cm.getTokenTypeAt(Pos(where.line, pos + 1));\n\n    var found = scanForBracket(cm, Pos(where.line, pos + (dir > 0 ? 1 : 0)), dir, style || null, config);\n    if (found == null) return null;\n    return {from: Pos(where.line, pos), to: found && found.pos,\n            match: found && found.ch == match.charAt(0), forward: dir > 0};\n  }\n\n  // bracketRegex is used to specify which type of bracket to scan\n  // should be a regexp, e.g. /[[\\]]/\n  //\n  // Note: If \"where\" is on an open bracket, then this bracket is ignored.\n  //\n  // Returns false when no bracket was found, null when it reached\n  // maxScanLines and gave up\n  function scanForBracket(cm, where, dir, style, config) {\n    var maxScanLen = (config && config.maxScanLineLength) || 10000;\n    var maxScanLines = (config && config.maxScanLines) || 1000;\n\n    var stack = [];\n    var re = config && config.bracketRegex ? config.bracketRegex : /[(){}[\\]]/;\n    var lineEnd = dir > 0 ? Math.min(where.line + maxScanLines, cm.lastLine() + 1)\n                          : Math.max(cm.firstLine() - 1, where.line - maxScanLines);\n    for (var lineNo = where.line; lineNo != lineEnd; lineNo += dir) {\n      var line = cm.getLine(lineNo);\n      if (!line) continue;\n      var pos = dir > 0 ? 0 : line.length - 1, end = dir > 0 ? line.length : -1;\n      if (line.length > maxScanLen) continue;\n      if (lineNo == where.line) pos = where.ch - (dir < 0 ? 1 : 0);\n      for (; pos != end; pos += dir) {\n        var ch = line.charAt(pos);\n        if (re.test(ch) && (style === undefined || cm.getTokenTypeAt(Pos(lineNo, pos + 1)) == style)) {\n          var match = matching[ch];\n          if ((match.charAt(1) == \">\") == (dir > 0)) stack.push(ch);\n          else if (!stack.length) return {pos: Pos(lineNo, pos), ch: ch};\n          else stack.pop();\n        }\n      }\n    }\n    return lineNo - dir == (dir > 0 ? cm.lastLine() : cm.firstLine()) ? false : null;\n  }\n\n  function matchBrackets(cm, autoclear, config) {\n    // Disable brace matching in long lines, since it'll cause hugely slow updates\n    var maxHighlightLen = cm.state.matchBrackets.maxHighlightLineLength || 1000;\n    var marks = [], ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      var match = ranges[i].empty() && findMatchingBracket(cm, ranges[i].head, false, config);\n      if (match && cm.getLine(match.from.line).length <= maxHighlightLen) {\n        var style = match.match ? \"CodeMirror-matchingbracket\" : \"CodeMirror-nonmatchingbracket\";\n        marks.push(cm.markText(match.from, Pos(match.from.line, match.from.ch + 1), {className: style}));\n        if (match.to && cm.getLine(match.to.line).length <= maxHighlightLen)\n          marks.push(cm.markText(match.to, Pos(match.to.line, match.to.ch + 1), {className: style}));\n      }\n    }\n\n    if (marks.length) {\n      // Kludge to work around the IE bug from issue #1193, where text\n      // input stops going to the textare whever this fires.\n      if (ie_lt8 && cm.state.focused) cm.display.input.focus();\n\n      var clear = function() {\n        cm.operation(function() {\n          for (var i = 0; i < marks.length; i++) marks[i].clear();\n        });\n      };\n      if (autoclear) setTimeout(clear, 800);\n      else return clear;\n    }\n  }\n\n  var currentlyHighlighted = null;\n  function doMatchBrackets(cm) {\n    cm.operation(function() {\n      if (currentlyHighlighted) {currentlyHighlighted(); currentlyHighlighted = null;}\n      currentlyHighlighted = matchBrackets(cm, false, cm.state.matchBrackets);\n    });\n  }\n\n  CodeMirror.defineOption(\"matchBrackets\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init)\n      cm.off(\"cursorActivity\", doMatchBrackets);\n    if (val) {\n      cm.state.matchBrackets = typeof val == \"object\" ? val : {};\n      cm.on(\"cursorActivity\", doMatchBrackets);\n    }\n  });\n\n  CodeMirror.defineExtension(\"matchBrackets\", function() {matchBrackets(this, true);});\n  CodeMirror.defineExtension(\"findMatchingBracket\", function(pos, strict, config){\n    return findMatchingBracket(this, pos, strict, config);\n  });\n  CodeMirror.defineExtension(\"scanForBracket\", function(pos, dir, style, config){\n    return scanForBracket(this, pos, dir, style, config);\n  });\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"fold\", \"brace\", function(cm, start) {\n  var line = start.line, lineText = cm.getLine(line);\n  var startCh, tokenType;\n\n  function findOpening(openCh) {\n    for (var at = start.ch, pass = 0;;) {\n      var found = at <= 0 ? -1 : lineText.lastIndexOf(openCh, at - 1);\n      if (found == -1) {\n        if (pass == 1) break;\n        pass = 1;\n        at = lineText.length;\n        continue;\n      }\n      if (pass == 1 && found < start.ch) break;\n      tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n      if (!/^(comment|string)/.test(tokenType)) return found + 1;\n      at = found - 1;\n    }\n  }\n\n  var startToken = \"{\", endToken = \"}\", startCh = findOpening(\"{\");\n  if (startCh == null) {\n    startToken = \"[\", endToken = \"]\";\n    startCh = findOpening(\"[\");\n  }\n\n  if (startCh == null) return;\n  var count = 1, lastLine = cm.lastLine(), end, endCh;\n  outer: for (var i = line; i <= lastLine; ++i) {\n    var text = cm.getLine(i), pos = i == line ? startCh : 0;\n    for (;;) {\n      var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n      if (nextOpen < 0) nextOpen = text.length;\n      if (nextClose < 0) nextClose = text.length;\n      pos = Math.min(nextOpen, nextClose);\n      if (pos == text.length) break;\n      if (cm.getTokenTypeAt(CodeMirror.Pos(i, pos + 1)) == tokenType) {\n        if (pos == nextOpen) ++count;\n        else if (!--count) { end = i; endCh = pos; break outer; }\n      }\n      ++pos;\n    }\n  }\n  if (end == null || line == end && endCh == startCh) return;\n  return {from: CodeMirror.Pos(line, startCh),\n          to: CodeMirror.Pos(end, endCh)};\n});\n\nCodeMirror.registerHelper(\"fold\", \"import\", function(cm, start) {\n  function hasImport(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type != \"keyword\" || start.string != \"import\") return null;\n    // Now find closing semicolon, return its position\n    for (var i = line, e = Math.min(cm.lastLine(), line + 10); i <= e; ++i) {\n      var text = cm.getLine(i), semi = text.indexOf(\";\");\n      if (semi != -1) return {startCh: start.end, end: CodeMirror.Pos(i, semi)};\n    }\n  }\n\n  var start = start.line, has = hasImport(start), prev;\n  if (!has || hasImport(start - 1) || ((prev = hasImport(start - 2)) && prev.end.line == start - 1))\n    return null;\n  for (var end = has.end;;) {\n    var next = hasImport(end.line + 1);\n    if (next == null) break;\n    end = next.end;\n  }\n  return {from: cm.clipPos(CodeMirror.Pos(start, has.startCh + 1)), to: end};\n});\n\nCodeMirror.registerHelper(\"fold\", \"include\", function(cm, start) {\n  function hasInclude(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type == \"meta\" && start.string.slice(0, 8) == \"#include\") return start.start + 8;\n  }\n\n  var start = start.line, has = hasInclude(start);\n  if (has == null || hasInclude(start - 1) != null) return null;\n  for (var end = start;;) {\n    var next = hasInclude(end + 1);\n    if (next == null) break;\n    ++end;\n  }\n  return {from: CodeMirror.Pos(start, has + 1),\n          to: cm.clipPos(CodeMirror.Pos(end))};\n});\n\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function doFold(cm, pos, options, force) {\n    if (options && options.call) {\n      var finder = options;\n      options = null;\n    } else {\n      var finder = getOption(cm, options, \"rangeFinder\");\n    }\n    if (typeof pos == \"number\") pos = CodeMirror.Pos(pos, 0);\n    var minSize = getOption(cm, options, \"minFoldSize\");\n\n    function getRange(allowFolded) {\n      var range = finder(cm, pos);\n      if (!range || range.to.line - range.from.line < minSize) return null;\n      var marks = cm.findMarksAt(range.from);\n      for (var i = 0; i < marks.length; ++i) {\n        if (marks[i].__isFold && force !== \"fold\") {\n          if (!allowFolded) return null;\n          range.cleared = true;\n          marks[i].clear();\n        }\n      }\n      return range;\n    }\n\n    var range = getRange(true);\n    if (getOption(cm, options, \"scanUp\")) while (!range && pos.line > cm.firstLine()) {\n      pos = CodeMirror.Pos(pos.line - 1, 0);\n      range = getRange(false);\n    }\n    if (!range || range.cleared || force === \"unfold\") return;\n\n    var myWidget = makeWidget(cm, options);\n    CodeMirror.on(myWidget, \"mousedown\", function(e) {\n      myRange.clear();\n      CodeMirror.e_preventDefault(e);\n    });\n    var myRange = cm.markText(range.from, range.to, {\n      replacedWith: myWidget,\n      clearOnEnter: true,\n      __isFold: true\n    });\n    myRange.on(\"clear\", function(from, to) {\n      CodeMirror.signal(cm, \"unfold\", cm, from, to);\n    });\n    CodeMirror.signal(cm, \"fold\", cm, range.from, range.to);\n  }\n\n  function makeWidget(cm, options) {\n    var widget = getOption(cm, options, \"widget\");\n    if (typeof widget == \"string\") {\n      var text = document.createTextNode(widget);\n      widget = document.createElement(\"span\");\n      widget.appendChild(text);\n      widget.className = \"CodeMirror-foldmarker\";\n    }\n    return widget;\n  }\n\n  // Clumsy backwards-compatible interface\n  CodeMirror.newFoldFunction = function(rangeFinder, widget) {\n    return function(cm, pos) { doFold(cm, pos, {rangeFinder: rangeFinder, widget: widget}); };\n  };\n\n  // New-style interface\n  CodeMirror.defineExtension(\"foldCode\", function(pos, options, force) {\n    doFold(this, pos, options, force);\n  });\n\n  CodeMirror.defineExtension(\"isFolded\", function(pos) {\n    var marks = this.findMarksAt(pos);\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold) return true;\n  });\n\n  CodeMirror.commands.toggleFold = function(cm) {\n    cm.foldCode(cm.getCursor());\n  };\n  CodeMirror.commands.fold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"fold\");\n  };\n  CodeMirror.commands.unfold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"unfold\");\n  };\n  CodeMirror.commands.foldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"fold\");\n    });\n  };\n  CodeMirror.commands.unfoldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"unfold\");\n    });\n  };\n\n  CodeMirror.registerHelper(\"fold\", \"combine\", function() {\n    var funcs = Array.prototype.slice.call(arguments, 0);\n    return function(cm, start) {\n      for (var i = 0; i < funcs.length; ++i) {\n        var found = funcs[i](cm, start);\n        if (found) return found;\n      }\n    };\n  });\n\n  CodeMirror.registerHelper(\"fold\", \"auto\", function(cm, start) {\n    var helpers = cm.getHelpers(start, \"fold\");\n    for (var i = 0; i < helpers.length; i++) {\n      var cur = helpers[i](cm, start);\n      if (cur) return cur;\n    }\n  });\n\n  var defaultOptions = {\n    rangeFinder: CodeMirror.fold.auto,\n    widget: \"\\u2194\",\n    minFoldSize: 0,\n    scanUp: false\n  };\n\n  CodeMirror.defineOption(\"foldOptions\", null);\n\n  function getOption(cm, options, name) {\n    if (options && options[name] !== undefined)\n      return options[name];\n    var editorOptions = cm.options.foldOptions;\n    if (editorOptions && editorOptions[name] !== undefined)\n      return editorOptions[name];\n    return defaultOptions[name];\n  }\n\n  CodeMirror.defineExtension(\"foldOption\", function(options, name) {\n    return getOption(this, options, name);\n  });\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})(), require(\"./foldcode\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./foldcode\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"foldGutter\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.clearGutter(cm.state.foldGutter.options.gutter);\n      cm.state.foldGutter = null;\n      cm.off(\"gutterClick\", onGutterClick);\n      cm.off(\"change\", onChange);\n      cm.off(\"viewportChange\", onViewportChange);\n      cm.off(\"fold\", onFold);\n      cm.off(\"unfold\", onFold);\n      cm.off(\"swapDoc\", updateInViewport);\n    }\n    if (val) {\n      cm.state.foldGutter = new State(parseOptions(val));\n      updateInViewport(cm);\n      cm.on(\"gutterClick\", onGutterClick);\n      cm.on(\"change\", onChange);\n      cm.on(\"viewportChange\", onViewportChange);\n      cm.on(\"fold\", onFold);\n      cm.on(\"unfold\", onFold);\n      cm.on(\"swapDoc\", updateInViewport);\n    }\n  });\n\n  var Pos = CodeMirror.Pos;\n\n  function State(options) {\n    this.options = options;\n    this.from = this.to = 0;\n  }\n\n  function parseOptions(opts) {\n    if (opts === true) opts = {};\n    if (opts.gutter == null) opts.gutter = \"CodeMirror-foldgutter\";\n    if (opts.indicatorOpen == null) opts.indicatorOpen = \"CodeMirror-foldgutter-open\";\n    if (opts.indicatorFolded == null) opts.indicatorFolded = \"CodeMirror-foldgutter-folded\";\n    return opts;\n  }\n\n  function isFolded(cm, line) {\n    var marks = cm.findMarksAt(Pos(line));\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold && marks[i].find().from.line == line) return true;\n  }\n\n  function marker(spec) {\n    if (typeof spec == \"string\") {\n      var elt = document.createElement(\"div\");\n      elt.className = spec + \" CodeMirror-guttermarker-subtle\";\n      return elt;\n    } else {\n      return spec.cloneNode(true);\n    }\n  }\n\n  function updateFoldInfo(cm, from, to) {\n    var opts = cm.state.foldGutter.options, cur = from;\n    var minSize = cm.foldOption(opts, \"minFoldSize\");\n    var func = cm.foldOption(opts, \"rangeFinder\");\n    cm.eachLine(from, to, function(line) {\n      var mark = null;\n      if (isFolded(cm, cur)) {\n        mark = marker(opts.indicatorFolded);\n      } else {\n        var pos = Pos(cur, 0);\n        var range = func && func(cm, pos);\n        if (range && range.to.line - range.from.line >= minSize)\n          mark = marker(opts.indicatorOpen);\n      }\n      cm.setGutterMarker(line, opts.gutter, mark);\n      ++cur;\n    });\n  }\n\n  function updateInViewport(cm) {\n    var vp = cm.getViewport(), state = cm.state.foldGutter;\n    if (!state) return;\n    cm.operation(function() {\n      updateFoldInfo(cm, vp.from, vp.to);\n    });\n    state.from = vp.from; state.to = vp.to;\n  }\n\n  function onGutterClick(cm, line, gutter) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    if (gutter != opts.gutter) return;\n    cm.foldCode(Pos(line, 0), opts.rangeFinder);\n  }\n\n  function onChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    state.from = state.to = 0;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() { updateInViewport(cm); }, opts.foldOnChangeTimeSpan || 600);\n  }\n\n  function onViewportChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() {\n      var vp = cm.getViewport();\n      if (state.from == state.to || vp.from - state.to > 20 || state.from - vp.to > 20) {\n        updateInViewport(cm);\n      } else {\n        cm.operation(function() {\n          if (vp.from < state.from) {\n            updateFoldInfo(cm, vp.from, state.from);\n            state.from = vp.from;\n          }\n          if (vp.to > state.to) {\n            updateFoldInfo(cm, state.to, vp.to);\n            state.to = vp.to;\n          }\n        });\n      }\n    }, opts.updateViewportTimeSpan || 400);\n  }\n\n  function onFold(cm, from) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var line = from.line;\n    if (line >= state.from && line < state.to)\n      updateFoldInfo(cm, line, line + 1);\n  }\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var Pos = CodeMirror.Pos;\n  function cmp(a, b) { return a.line - b.line || a.ch - b.ch; }\n\n  var nameStartChar = \"A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\";\n  var nameChar = nameStartChar + \"\\-\\:\\.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\";\n  var xmlTagStart = new RegExp(\"<(/?)([\" + nameStartChar + \"][\" + nameChar + \"]*)\", \"g\");\n\n  function Iter(cm, line, ch, range) {\n    this.line = line; this.ch = ch;\n    this.cm = cm; this.text = cm.getLine(line);\n    this.min = range ? range.from : cm.firstLine();\n    this.max = range ? range.to - 1 : cm.lastLine();\n  }\n\n  function tagAt(iter, ch) {\n    var type = iter.cm.getTokenTypeAt(Pos(iter.line, ch));\n    return type && /\\btag\\b/.test(type);\n  }\n\n  function nextLine(iter) {\n    if (iter.line >= iter.max) return;\n    iter.ch = 0;\n    iter.text = iter.cm.getLine(++iter.line);\n    return true;\n  }\n  function prevLine(iter) {\n    if (iter.line <= iter.min) return;\n    iter.text = iter.cm.getLine(--iter.line);\n    iter.ch = iter.text.length;\n    return true;\n  }\n\n  function toTagEnd(iter) {\n    for (;;) {\n      var gt = iter.text.indexOf(\">\", iter.ch);\n      if (gt == -1) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt + 1; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n  function toTagStart(iter) {\n    for (;;) {\n      var lt = iter.ch ? iter.text.lastIndexOf(\"<\", iter.ch - 1) : -1;\n      if (lt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, lt + 1)) { iter.ch = lt; continue; }\n      xmlTagStart.lastIndex = lt;\n      iter.ch = lt;\n      var match = xmlTagStart.exec(iter.text);\n      if (match && match.index == lt) return match;\n    }\n  }\n\n  function toNextTag(iter) {\n    for (;;) {\n      xmlTagStart.lastIndex = iter.ch;\n      var found = xmlTagStart.exec(iter.text);\n      if (!found) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, found.index + 1)) { iter.ch = found.index + 1; continue; }\n      iter.ch = found.index + found[0].length;\n      return found;\n    }\n  }\n  function toPrevTag(iter) {\n    for (;;) {\n      var gt = iter.ch ? iter.text.lastIndexOf(\">\", iter.ch - 1) : -1;\n      if (gt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n\n  function findMatchingClose(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var next = toNextTag(iter), end, startLine = iter.line, startCh = iter.ch - (next ? next[0].length : 0);\n      if (!next || !(end = toTagEnd(iter))) return;\n      if (end == \"selfClose\") continue;\n      if (next[1]) { // closing tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == next[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == next[2])) return {\n          tag: next[2],\n          from: Pos(startLine, startCh),\n          to: Pos(iter.line, iter.ch)\n        };\n      } else { // opening tag\n        stack.push(next[2]);\n      }\n    }\n  }\n  function findMatchingOpen(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var prev = toPrevTag(iter);\n      if (!prev) return;\n      if (prev == \"selfClose\") { toTagStart(iter); continue; }\n      var endLine = iter.line, endCh = iter.ch;\n      var start = toTagStart(iter);\n      if (!start) return;\n      if (start[1]) { // closing tag\n        stack.push(start[2]);\n      } else { // opening tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == start[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == start[2])) return {\n          tag: start[2],\n          from: Pos(iter.line, iter.ch),\n          to: Pos(endLine, endCh)\n        };\n      }\n    }\n  }\n\n  CodeMirror.registerHelper(\"fold\", \"xml\", function(cm, start) {\n    var iter = new Iter(cm, start.line, 0);\n    for (;;) {\n      var openTag = toNextTag(iter), end;\n      if (!openTag || iter.line != start.line || !(end = toTagEnd(iter))) return;\n      if (!openTag[1] && end != \"selfClose\") {\n        var start = Pos(iter.line, iter.ch);\n        var close = findMatchingClose(iter, openTag[2]);\n        return close && {from: start, to: close.from};\n      }\n    }\n  });\n  CodeMirror.findMatchingTag = function(cm, pos, range) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    if (iter.text.indexOf(\">\") == -1 && iter.text.indexOf(\"<\") == -1) return;\n    var end = toTagEnd(iter), to = end && Pos(iter.line, iter.ch);\n    var start = end && toTagStart(iter);\n    if (!end || !start || cmp(iter, pos) > 0) return;\n    var here = {from: Pos(iter.line, iter.ch), to: to, tag: start[2]};\n    if (end == \"selfClose\") return {open: here, close: null, at: \"open\"};\n\n    if (start[1]) { // closing tag\n      return {open: findMatchingOpen(iter, start[2]), close: here, at: \"close\"};\n    } else { // opening tag\n      iter = new Iter(cm, to.line, to.ch, range);\n      return {open: here, close: findMatchingClose(iter, start[2]), at: \"open\"};\n    }\n  };\n\n  CodeMirror.findEnclosingTag = function(cm, pos, range) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    for (;;) {\n      var open = findMatchingOpen(iter);\n      if (!open) break;\n      var forward = new Iter(cm, pos.line, pos.ch, range);\n      var close = findMatchingClose(forward, open.tag);\n      if (close) return {open: open, close: close};\n    }\n  };\n\n  // Used by addon/edit/closetag.js\n  CodeMirror.scanForClosingTag = function(cm, pos, name, end) {\n    var iter = new Iter(cm, pos.line, pos.ch, end ? {from: 0, to: end} : null);\n    return findMatchingClose(iter, name);\n  };\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var HINT_ELEMENT_CLASS        = \"CodeMirror-hint\";\n  var ACTIVE_HINT_ELEMENT_CLASS = \"CodeMirror-hint-active\";\n\n  // This is the old interface, kept around for now to stay\n  // backwards-compatible.\n  CodeMirror.showHint = function(cm, getHints, options) {\n    if (!getHints) return cm.showHint(options);\n    if (options && options.async) getHints.async = true;\n    var newOpts = {hint: getHints};\n    if (options) for (var prop in options) newOpts[prop] = options[prop];\n    return cm.showHint(newOpts);\n  };\n\n  var asyncRunID = 0;\n  function retrieveHints(getter, cm, options, then) {\n    if (getter.async) {\n      var id = ++asyncRunID;\n      getter(cm, function(hints) {\n        if (asyncRunID == id) then(hints);\n      }, options);\n    } else {\n      then(getter(cm, options));\n    }\n  }\n\n  CodeMirror.defineExtension(\"showHint\", function(options) {\n    // We want a single cursor position.\n    if (this.listSelections().length > 1 || this.somethingSelected()) return;\n\n    if (this.state.completionActive) this.state.completionActive.close();\n    var completion = this.state.completionActive = new Completion(this, options);\n    var getHints = completion.options.hint;\n    if (!getHints) return;\n\n    CodeMirror.signal(this, \"startCompletion\", this);\n    return retrieveHints(getHints, this, completion.options, function(hints) { completion.showHints(hints); });\n  });\n\n  function Completion(cm, options) {\n    this.cm = cm;\n    this.options = this.buildOptions(options);\n    this.widget = this.onClose = null;\n  }\n\n  Completion.prototype = {\n    close: function() {\n      if (!this.active()) return;\n      this.cm.state.completionActive = null;\n\n      if (this.widget) this.widget.close();\n      if (this.onClose) this.onClose();\n      CodeMirror.signal(this.cm, \"endCompletion\", this.cm);\n    },\n\n    active: function() {\n      return this.cm.state.completionActive == this;\n    },\n\n    pick: function(data, i) {\n      var completion = data.list[i];\n      if (completion.hint) completion.hint(this.cm, data, completion);\n      else this.cm.replaceRange(getText(completion), completion.from || data.from,\n                                completion.to || data.to, \"complete\");\n      CodeMirror.signal(data, \"pick\", completion);\n      this.close();\n    },\n\n    showHints: function(data) {\n      if (!data || !data.list.length || !this.active()) return this.close();\n\n      if (this.options.completeSingle && data.list.length == 1)\n        this.pick(data, 0);\n      else\n        this.showWidget(data);\n    },\n\n    showWidget: function(data) {\n      this.widget = new Widget(this, data);\n      CodeMirror.signal(data, \"shown\");\n\n      var debounce = 0, completion = this, finished;\n      var closeOn = this.options.closeCharacters;\n      var startPos = this.cm.getCursor(), startLen = this.cm.getLine(startPos.line).length;\n\n      var requestAnimationFrame = window.requestAnimationFrame || function(fn) {\n        return setTimeout(fn, 1000/60);\n      };\n      var cancelAnimationFrame = window.cancelAnimationFrame || clearTimeout;\n\n      function done() {\n        if (finished) return;\n        finished = true;\n        completion.close();\n        completion.cm.off(\"cursorActivity\", activity);\n        if (data) CodeMirror.signal(data, \"close\");\n      }\n\n      function update() {\n        if (finished) return;\n        CodeMirror.signal(data, \"update\");\n        retrieveHints(completion.options.hint, completion.cm, completion.options, finishUpdate);\n      }\n      function finishUpdate(data_) {\n        data = data_;\n        if (finished) return;\n        if (!data || !data.list.length) return done();\n        if (completion.widget) completion.widget.close();\n        completion.widget = new Widget(completion, data);\n      }\n\n      function clearDebounce() {\n        if (debounce) {\n          cancelAnimationFrame(debounce);\n          debounce = 0;\n        }\n      }\n\n      function activity() {\n        clearDebounce();\n        var pos = completion.cm.getCursor(), line = completion.cm.getLine(pos.line);\n        if (pos.line != startPos.line || line.length - pos.ch != startLen - startPos.ch ||\n            pos.ch < startPos.ch || completion.cm.somethingSelected() ||\n            (pos.ch && closeOn.test(line.charAt(pos.ch - 1)))) {\n          completion.close();\n        } else {\n          debounce = requestAnimationFrame(update);\n          if (completion.widget) completion.widget.close();\n        }\n      }\n      this.cm.on(\"cursorActivity\", activity);\n      this.onClose = done;\n    },\n\n    buildOptions: function(options) {\n      var editor = this.cm.options.hintOptions;\n      var out = {};\n      for (var prop in defaultOptions) out[prop] = defaultOptions[prop];\n      if (editor) for (var prop in editor)\n        if (editor[prop] !== undefined) out[prop] = editor[prop];\n      if (options) for (var prop in options)\n        if (options[prop] !== undefined) out[prop] = options[prop];\n      return out;\n    }\n  };\n\n  function getText(completion) {\n    if (typeof completion == \"string\") return completion;\n    else return completion.text;\n  }\n\n  function buildKeyMap(completion, handle) {\n    var baseMap = {\n      Up: function() {handle.moveFocus(-1);},\n      Down: function() {handle.moveFocus(1);},\n      PageUp: function() {handle.moveFocus(-handle.menuSize() + 1, true);},\n      PageDown: function() {handle.moveFocus(handle.menuSize() - 1, true);},\n      Home: function() {handle.setFocus(0);},\n      End: function() {handle.setFocus(handle.length - 1);},\n      Enter: handle.pick,\n      Tab: handle.pick,\n      Esc: handle.close\n    };\n    var custom = completion.options.customKeys;\n    var ourMap = custom ? {} : baseMap;\n    function addBinding(key, val) {\n      var bound;\n      if (typeof val != \"string\")\n        bound = function(cm) { return val(cm, handle); };\n      // This mechanism is deprecated\n      else if (baseMap.hasOwnProperty(val))\n        bound = baseMap[val];\n      else\n        bound = val;\n      ourMap[key] = bound;\n    }\n    if (custom)\n      for (var key in custom) if (custom.hasOwnProperty(key))\n        addBinding(key, custom[key]);\n    var extra = completion.options.extraKeys;\n    if (extra)\n      for (var key in extra) if (extra.hasOwnProperty(key))\n        addBinding(key, extra[key]);\n    return ourMap;\n  }\n\n  function getHintElement(hintsElement, el) {\n    while (el && el != hintsElement) {\n      if (el.nodeName.toUpperCase() === \"LI\" && el.parentNode == hintsElement) return el;\n      el = el.parentNode;\n    }\n  }\n\n  function Widget(completion, data) {\n    this.completion = completion;\n    this.data = data;\n    var widget = this, cm = completion.cm;\n\n    var hints = this.hints = document.createElement(\"ul\");\n    hints.className = \"CodeMirror-hints\";\n    this.selectedHint = data.selectedHint || 0;\n\n    var completions = data.list;\n    for (var i = 0; i < completions.length; ++i) {\n      var elt = hints.appendChild(document.createElement(\"li\")), cur = completions[i];\n      var className = HINT_ELEMENT_CLASS + (i != this.selectedHint ? \"\" : \" \" + ACTIVE_HINT_ELEMENT_CLASS);\n      if (cur.className != null) className = cur.className + \" \" + className;\n      elt.className = className;\n      if (cur.render) cur.render(elt, data, cur);\n      else elt.appendChild(document.createTextNode(cur.displayText || getText(cur)));\n      elt.hintId = i;\n    }\n\n    var pos = cm.cursorCoords(completion.options.alignWithWord ? data.from : null);\n    var left = pos.left, top = pos.bottom, below = true;\n    hints.style.left = left + \"px\";\n    hints.style.top = top + \"px\";\n    // If we're at the edge of the screen, then we want the menu to appear on the left of the cursor.\n    var winW = window.innerWidth || Math.max(document.body.offsetWidth, document.documentElement.offsetWidth);\n    var winH = window.innerHeight || Math.max(document.body.offsetHeight, document.documentElement.offsetHeight);\n    (completion.options.container || document.body).appendChild(hints);\n    var box = hints.getBoundingClientRect(), overlapY = box.bottom - winH;\n    if (overlapY > 0) {\n      var height = box.bottom - box.top, curTop = pos.top - (pos.bottom - box.top);\n      if (curTop - height > 0) { // Fits above cursor\n        hints.style.top = (top = pos.top - height) + \"px\";\n        below = false;\n      } else if (height > winH) {\n        hints.style.height = (winH - 5) + \"px\";\n        hints.style.top = (top = pos.bottom - box.top) + \"px\";\n        var cursor = cm.getCursor();\n        if (data.from.ch != cursor.ch) {\n          pos = cm.cursorCoords(cursor);\n          hints.style.left = (left = pos.left) + \"px\";\n          box = hints.getBoundingClientRect();\n        }\n      }\n    }\n    var overlapX = box.right - winW;\n    if (overlapX > 0) {\n      if (box.right - box.left > winW) {\n        hints.style.width = (winW - 5) + \"px\";\n        overlapX -= (box.right - box.left) - winW;\n      }\n      hints.style.left = (left = pos.left - overlapX) + \"px\";\n    }\n\n    cm.addKeyMap(this.keyMap = buildKeyMap(completion, {\n      moveFocus: function(n, avoidWrap) { widget.changeActive(widget.selectedHint + n, avoidWrap); },\n      setFocus: function(n) { widget.changeActive(n); },\n      menuSize: function() { return widget.screenAmount(); },\n      length: completions.length,\n      close: function() { completion.close(); },\n      pick: function() { widget.pick(); },\n      data: data\n    }));\n\n    if (completion.options.closeOnUnfocus) {\n      var closingOnBlur;\n      cm.on(\"blur\", this.onBlur = function() { closingOnBlur = setTimeout(function() { completion.close(); }, 100); });\n      cm.on(\"focus\", this.onFocus = function() { clearTimeout(closingOnBlur); });\n    }\n\n    var startScroll = cm.getScrollInfo();\n    cm.on(\"scroll\", this.onScroll = function() {\n      var curScroll = cm.getScrollInfo(), editor = cm.getWrapperElement().getBoundingClientRect();\n      var newTop = top + startScroll.top - curScroll.top;\n      var point = newTop - (window.pageYOffset || (document.documentElement || document.body).scrollTop);\n      if (!below) point += hints.offsetHeight;\n      if (point <= editor.top || point >= editor.bottom) return completion.close();\n      hints.style.top = newTop + \"px\";\n      hints.style.left = (left + startScroll.left - curScroll.left) + \"px\";\n    });\n\n    CodeMirror.on(hints, \"dblclick\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {widget.changeActive(t.hintId); widget.pick();}\n    });\n\n    CodeMirror.on(hints, \"click\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {\n        widget.changeActive(t.hintId);\n        if (completion.options.completeOnSingleClick) widget.pick();\n      }\n    });\n\n    CodeMirror.on(hints, \"mousedown\", function() {\n      setTimeout(function(){cm.focus();}, 20);\n    });\n\n    CodeMirror.signal(data, \"select\", completions[0], hints.firstChild);\n    return true;\n  }\n\n  Widget.prototype = {\n    close: function() {\n      if (this.completion.widget != this) return;\n      this.completion.widget = null;\n      this.hints.parentNode.removeChild(this.hints);\n      this.completion.cm.removeKeyMap(this.keyMap);\n\n      var cm = this.completion.cm;\n      if (this.completion.options.closeOnUnfocus) {\n        cm.off(\"blur\", this.onBlur);\n        cm.off(\"focus\", this.onFocus);\n      }\n      cm.off(\"scroll\", this.onScroll);\n    },\n\n    pick: function() {\n      this.completion.pick(this.data, this.selectedHint);\n    },\n\n    changeActive: function(i, avoidWrap) {\n      if (i >= this.data.list.length)\n        i = avoidWrap ? this.data.list.length - 1 : 0;\n      else if (i < 0)\n        i = avoidWrap ? 0  : this.data.list.length - 1;\n      if (this.selectedHint == i) return;\n      var node = this.hints.childNodes[this.selectedHint];\n      node.className = node.className.replace(\" \" + ACTIVE_HINT_ELEMENT_CLASS, \"\");\n      node = this.hints.childNodes[this.selectedHint = i];\n      node.className += \" \" + ACTIVE_HINT_ELEMENT_CLASS;\n      if (node.offsetTop < this.hints.scrollTop)\n        this.hints.scrollTop = node.offsetTop - 3;\n      else if (node.offsetTop + node.offsetHeight > this.hints.scrollTop + this.hints.clientHeight)\n        this.hints.scrollTop = node.offsetTop + node.offsetHeight - this.hints.clientHeight + 3;\n      CodeMirror.signal(this.data, \"select\", this.data.list[this.selectedHint], node);\n    },\n\n    screenAmount: function() {\n      return Math.floor(this.hints.clientHeight / this.hints.firstChild.offsetHeight) || 1;\n    }\n  };\n\n  CodeMirror.registerHelper(\"hint\", \"auto\", function(cm, options) {\n    var helpers = cm.getHelpers(cm.getCursor(), \"hint\"), words;\n    if (helpers.length) {\n      for (var i = 0; i < helpers.length; i++) {\n        var cur = helpers[i](cm, options);\n        if (cur && cur.list.length) return cur;\n      }\n    } else if (words = cm.getHelper(cm.getCursor(), \"hintWords\")) {\n      if (words) return CodeMirror.hint.fromList(cm, {words: words});\n    } else if (CodeMirror.hint.anyword) {\n      return CodeMirror.hint.anyword(cm, options);\n    }\n  });\n\n  CodeMirror.registerHelper(\"hint\", \"fromList\", function(cm, options) {\n    var cur = cm.getCursor(), token = cm.getTokenAt(cur);\n    var found = [];\n    for (var i = 0; i < options.words.length; i++) {\n      var word = options.words[i];\n      if (word.slice(0, token.string.length) == token.string)\n        found.push(word);\n    }\n\n    if (found.length) return {\n      list: found,\n      from: CodeMirror.Pos(cur.line, token.start),\n            to: CodeMirror.Pos(cur.line, token.end)\n    };\n  });\n\n  CodeMirror.commands.autocomplete = CodeMirror.showHint;\n\n  var defaultOptions = {\n    hint: CodeMirror.hint.auto,\n    completeSingle: true,\n    alignWithWord: true,\n    closeCharacters: /[\\s()\\[\\]{};:>,]/,\n    closeOnUnfocus: true,\n    completeOnSingleClick: false,\n    container: null,\n    customKeys: null,\n    extraKeys: null\n  };\n\n  CodeMirror.defineOption(\"hintOptions\", null);\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.runMode = function(string, modespec, callback, options) {\n  var mode = CodeMirror.getMode(CodeMirror.defaults, modespec);\n  var ie = /MSIE \\d/.test(navigator.userAgent);\n  var ie_lt9 = ie && (document.documentMode == null || document.documentMode < 9);\n\n  if (callback.nodeType == 1) {\n    var tabSize = (options && options.tabSize) || CodeMirror.defaults.tabSize;\n    var node = callback, col = 0;\n    node.innerHTML = \"\";\n    callback = function(text, style) {\n      if (text == \"\\n\") {\n        // Emitting LF or CRLF on IE8 or earlier results in an incorrect display.\n        // Emitting a carriage return makes everything ok.\n        node.appendChild(document.createTextNode(ie_lt9 ? '\\r' : text));\n        col = 0;\n        return;\n      }\n      var content = \"\";\n      // replace tabs\n      for (var pos = 0;;) {\n        var idx = text.indexOf(\"\\t\", pos);\n        if (idx == -1) {\n          content += text.slice(pos);\n          col += text.length - pos;\n          break;\n        } else {\n          col += idx - pos;\n          content += text.slice(pos, idx);\n          var size = tabSize - col % tabSize;\n          col += size;\n          for (var i = 0; i < size; ++i) content += \" \";\n          pos = idx + 1;\n        }\n      }\n\n      if (style) {\n        var sp = node.appendChild(document.createElement(\"span\"));\n        sp.className = \"cm-\" + style.replace(/ +/g, \" cm-\");\n        sp.appendChild(document.createTextNode(content));\n      } else {\n        node.appendChild(document.createTextNode(content));\n      }\n    };\n  }\n\n  var lines = CodeMirror.splitLines(string), state = (options && options.state) || CodeMirror.startState(mode);\n  for (var i = 0, e = lines.length; i < e; ++i) {\n    if (i) callback(\"\\n\");\n    var stream = new CodeMirror.StringStream(lines[i]);\n    if (!stream.string && mode.blankLine) mode.blankLine(state);\n    while (!stream.eol()) {\n      var style = mode.token(stream, state);\n      callback(stream.current(), style, i, stream.start, state);\n      stream.start = stream.pos;\n    }\n  }\n};\n\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n  var Pos = CodeMirror.Pos;\n\n  function SearchCursor(doc, query, pos, caseFold) {\n    this.atOccurrence = false; this.doc = doc;\n    if (caseFold == null && typeof query == \"string\") caseFold = false;\n\n    pos = pos ? doc.clipPos(pos) : Pos(0, 0);\n    this.pos = {from: pos, to: pos};\n\n    // The matches method is filled in based on the type of query.\n    // It takes a position and a direction, and returns an object\n    // describing the next occurrence of the query, or null if no\n    // more matches were found.\n    if (typeof query != \"string\") { // Regexp match\n      if (!query.global) query = new RegExp(query.source, query.ignoreCase ? \"ig\" : \"g\");\n      this.matches = function(reverse, pos) {\n        if (reverse) {\n          query.lastIndex = 0;\n          var line = doc.getLine(pos.line).slice(0, pos.ch), cutOff = 0, match, start;\n          for (;;) {\n            query.lastIndex = cutOff;\n            var newMatch = query.exec(line);\n            if (!newMatch) break;\n            match = newMatch;\n            start = match.index;\n            cutOff = match.index + (match[0].length || 1);\n            if (cutOff == line.length) break;\n          }\n          var matchLen = (match && match[0].length) || 0;\n          if (!matchLen) {\n            if (start == 0 && line.length == 0) {match = undefined;}\n            else if (start != doc.getLine(pos.line).length) {\n              matchLen++;\n            }\n          }\n        } else {\n          query.lastIndex = pos.ch;\n          var line = doc.getLine(pos.line), match = query.exec(line);\n          var matchLen = (match && match[0].length) || 0;\n          var start = match && match.index;\n          if (start + matchLen != line.length && !matchLen) matchLen = 1;\n        }\n        if (match && matchLen)\n          return {from: Pos(pos.line, start),\n                  to: Pos(pos.line, start + matchLen),\n                  match: match};\n      };\n    } else { // String query\n      var origQuery = query;\n      if (caseFold) query = query.toLowerCase();\n      var fold = caseFold ? function(str){return str.toLowerCase();} : function(str){return str;};\n      var target = query.split(\"\\n\");\n      // Different methods for single-line and multi-line queries\n      if (target.length == 1) {\n        if (!query.length) {\n          // Empty string would match anything and never progress, so\n          // we define it to match nothing instead.\n          this.matches = function() {};\n        } else {\n          this.matches = function(reverse, pos) {\n            if (reverse) {\n              var orig = doc.getLine(pos.line).slice(0, pos.ch), line = fold(orig);\n              var match = line.lastIndexOf(query);\n              if (match > -1) {\n                match = adjustPos(orig, line, match);\n                return {from: Pos(pos.line, match), to: Pos(pos.line, match + origQuery.length)};\n              }\n             } else {\n               var orig = doc.getLine(pos.line).slice(pos.ch), line = fold(orig);\n               var match = line.indexOf(query);\n               if (match > -1) {\n                 match = adjustPos(orig, line, match) + pos.ch;\n                 return {from: Pos(pos.line, match), to: Pos(pos.line, match + origQuery.length)};\n               }\n            }\n          };\n        }\n      } else {\n        var origTarget = origQuery.split(\"\\n\");\n        this.matches = function(reverse, pos) {\n          var last = target.length - 1;\n          if (reverse) {\n            if (pos.line - (target.length - 1) < doc.firstLine()) return;\n            if (fold(doc.getLine(pos.line).slice(0, origTarget[last].length)) != target[target.length - 1]) return;\n            var to = Pos(pos.line, origTarget[last].length);\n            for (var ln = pos.line - 1, i = last - 1; i >= 1; --i, --ln)\n              if (target[i] != fold(doc.getLine(ln))) return;\n            var line = doc.getLine(ln), cut = line.length - origTarget[0].length;\n            if (fold(line.slice(cut)) != target[0]) return;\n            return {from: Pos(ln, cut), to: to};\n          } else {\n            if (pos.line + (target.length - 1) > doc.lastLine()) return;\n            var line = doc.getLine(pos.line), cut = line.length - origTarget[0].length;\n            if (fold(line.slice(cut)) != target[0]) return;\n            var from = Pos(pos.line, cut);\n            for (var ln = pos.line + 1, i = 1; i < last; ++i, ++ln)\n              if (target[i] != fold(doc.getLine(ln))) return;\n            if (fold(doc.getLine(ln).slice(0, origTarget[last].length)) != target[last]) return;\n            return {from: from, to: Pos(ln, origTarget[last].length)};\n          }\n        };\n      }\n    }\n  }\n\n  SearchCursor.prototype = {\n    findNext: function() {return this.find(false);},\n    findPrevious: function() {return this.find(true);},\n\n    find: function(reverse) {\n      var self = this, pos = this.doc.clipPos(reverse ? this.pos.from : this.pos.to);\n      function savePosAndFail(line) {\n        var pos = Pos(line, 0);\n        self.pos = {from: pos, to: pos};\n        self.atOccurrence = false;\n        return false;\n      }\n\n      for (;;) {\n        if (this.pos = this.matches(reverse, pos)) {\n          this.atOccurrence = true;\n          return this.pos.match || true;\n        }\n        if (reverse) {\n          if (!pos.line) return savePosAndFail(0);\n          pos = Pos(pos.line-1, this.doc.getLine(pos.line-1).length);\n        }\n        else {\n          var maxLine = this.doc.lineCount();\n          if (pos.line == maxLine - 1) return savePosAndFail(maxLine);\n          pos = Pos(pos.line + 1, 0);\n        }\n      }\n    },\n\n    from: function() {if (this.atOccurrence) return this.pos.from;},\n    to: function() {if (this.atOccurrence) return this.pos.to;},\n\n    replace: function(newText) {\n      if (!this.atOccurrence) return;\n      var lines = CodeMirror.splitLines(newText);\n      this.doc.replaceRange(lines, this.pos.from, this.pos.to);\n      this.pos.to = Pos(this.pos.from.line + lines.length - 1,\n                        lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0));\n    }\n  };\n\n  // Maps a position in a case-folded line back to a position in the original line\n  // (compensating for codepoints increasing in number during folding)\n  function adjustPos(orig, folded, pos) {\n    if (orig.length == folded.length) return pos;\n    for (var pos1 = Math.min(pos, orig.length);;) {\n      var len1 = orig.slice(0, pos1).toLowerCase().length;\n      if (len1 < pos) ++pos1;\n      else if (len1 > pos) --pos1;\n      else return pos1;\n    }\n  }\n\n  CodeMirror.defineExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this.doc, query, pos, caseFold);\n  });\n  CodeMirror.defineDocExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this, query, pos, caseFold);\n  });\n\n  CodeMirror.defineExtension(\"selectMatches\", function(query, caseFold) {\n    var ranges = [], next;\n    var cur = this.getSearchCursor(query, this.getCursor(\"from\"), caseFold);\n    while (next = cur.findNext()) {\n      if (CodeMirror.cmpPos(cur.to(), this.getCursor(\"to\")) > 0) break;\n      ranges.push({anchor: cur.from(), head: cur.to()});\n    }\n    if (ranges.length)\n      this.setSelections(ranges, 0);\n  });\n});\n",";(function(win){\n\tvar store = {},\n\t\tdoc = win.document,\n\t\tlocalStorageName = 'localStorage',\n\t\tscriptTag = 'script',\n\t\tstorage\n\n\tstore.disabled = false\n\tstore.version = '1.3.17'\n\tstore.set = function(key, value) {}\n\tstore.get = function(key, defaultVal) {}\n\tstore.has = function(key) { return store.get(key) !== undefined }\n\tstore.remove = function(key) {}\n\tstore.clear = function() {}\n\tstore.transact = function(key, defaultVal, transactionFn) {\n\t\tif (transactionFn == null) {\n\t\t\ttransactionFn = defaultVal\n\t\t\tdefaultVal = null\n\t\t}\n\t\tif (defaultVal == null) {\n\t\t\tdefaultVal = {}\n\t\t}\n\t\tvar val = store.get(key, defaultVal)\n\t\ttransactionFn(val)\n\t\tstore.set(key, val)\n\t}\n\tstore.getAll = function() {}\n\tstore.forEach = function() {}\n\n\tstore.serialize = function(value) {\n\t\treturn JSON.stringify(value)\n\t}\n\tstore.deserialize = function(value) {\n\t\tif (typeof value != 'string') { return undefined }\n\t\ttry { return JSON.parse(value) }\n\t\tcatch(e) { return value || undefined }\n\t}\n\n\t// Functions to encapsulate questionable FireFox 3.6.13 behavior\n\t// when about.config::dom.storage.enabled === false\n\t// See https://github.com/marcuswestin/store.js/issues#issue/13\n\tfunction isLocalStorageNameSupported() {\n\t\ttry { return (localStorageName in win && win[localStorageName]) }\n\t\tcatch(err) { return false }\n\t}\n\n\tif (isLocalStorageNameSupported()) {\n\t\tstorage = win[localStorageName]\n\t\tstore.set = function(key, val) {\n\t\t\tif (val === undefined) { return store.remove(key) }\n\t\t\tstorage.setItem(key, store.serialize(val))\n\t\t\treturn val\n\t\t}\n\t\tstore.get = function(key, defaultVal) {\n\t\t\tvar val = store.deserialize(storage.getItem(key))\n\t\t\treturn (val === undefined ? defaultVal : val)\n\t\t}\n\t\tstore.remove = function(key) { storage.removeItem(key) }\n\t\tstore.clear = function() { storage.clear() }\n\t\tstore.getAll = function() {\n\t\t\tvar ret = {}\n\t\t\tstore.forEach(function(key, val) {\n\t\t\t\tret[key] = val\n\t\t\t})\n\t\t\treturn ret\n\t\t}\n\t\tstore.forEach = function(callback) {\n\t\t\tfor (var i=0; i<storage.length; i++) {\n\t\t\t\tvar key = storage.key(i)\n\t\t\t\tcallback(key, store.get(key))\n\t\t\t}\n\t\t}\n\t} else if (doc.documentElement.addBehavior) {\n\t\tvar storageOwner,\n\t\t\tstorageContainer\n\t\t// Since #userData storage applies only to specific paths, we need to\n\t\t// somehow link our data to a specific path.  We choose /favicon.ico\n\t\t// as a pretty safe option, since all browsers already make a request to\n\t\t// this URL anyway and being a 404 will not hurt us here.  We wrap an\n\t\t// iframe pointing to the favicon in an ActiveXObject(htmlfile) object\n\t\t// (see: http://msdn.microsoft.com/en-us/library/aa752574(v=VS.85).aspx)\n\t\t// since the iframe access rules appear to allow direct access and\n\t\t// manipulation of the document element, even for a 404 page.  This\n\t\t// document can be used instead of the current document (which would\n\t\t// have been limited to the current path) to perform #userData storage.\n\t\ttry {\n\t\t\tstorageContainer = new ActiveXObject('htmlfile')\n\t\t\tstorageContainer.open()\n\t\t\tstorageContainer.write('<'+scriptTag+'>document.w=window</'+scriptTag+'><iframe src=\"/favicon.ico\"></iframe>')\n\t\t\tstorageContainer.close()\n\t\t\tstorageOwner = storageContainer.w.frames[0].document\n\t\t\tstorage = storageOwner.createElement('div')\n\t\t} catch(e) {\n\t\t\t// somehow ActiveXObject instantiation failed (perhaps some special\n\t\t\t// security settings or otherwse), fall back to per-path storage\n\t\t\tstorage = doc.createElement('div')\n\t\t\tstorageOwner = doc.body\n\t\t}\n\t\tvar withIEStorage = function(storeFunction) {\n\t\t\treturn function() {\n\t\t\t\tvar args = Array.prototype.slice.call(arguments, 0)\n\t\t\t\targs.unshift(storage)\n\t\t\t\t// See http://msdn.microsoft.com/en-us/library/ms531081(v=VS.85).aspx\n\t\t\t\t// and http://msdn.microsoft.com/en-us/library/ms531424(v=VS.85).aspx\n\t\t\t\tstorageOwner.appendChild(storage)\n\t\t\t\tstorage.addBehavior('#default#userData')\n\t\t\t\tstorage.load(localStorageName)\n\t\t\t\tvar result = storeFunction.apply(store, args)\n\t\t\t\tstorageOwner.removeChild(storage)\n\t\t\t\treturn result\n\t\t\t}\n\t\t}\n\n\t\t// In IE7, keys cannot start with a digit or contain certain chars.\n\t\t// See https://github.com/marcuswestin/store.js/issues/40\n\t\t// See https://github.com/marcuswestin/store.js/issues/83\n\t\tvar forbiddenCharsRegex = new RegExp(\"[!\\\"#$%&'()*+,/\\\\\\\\:;<=>?@[\\\\]^`{|}~]\", \"g\")\n\t\tfunction ieKeyFix(key) {\n\t\t\treturn key.replace(/^d/, '___$&').replace(forbiddenCharsRegex, '___')\n\t\t}\n\t\tstore.set = withIEStorage(function(storage, key, val) {\n\t\t\tkey = ieKeyFix(key)\n\t\t\tif (val === undefined) { return store.remove(key) }\n\t\t\tstorage.setAttribute(key, store.serialize(val))\n\t\t\tstorage.save(localStorageName)\n\t\t\treturn val\n\t\t})\n\t\tstore.get = withIEStorage(function(storage, key, defaultVal) {\n\t\t\tkey = ieKeyFix(key)\n\t\t\tvar val = store.deserialize(storage.getAttribute(key))\n\t\t\treturn (val === undefined ? defaultVal : val)\n\t\t})\n\t\tstore.remove = withIEStorage(function(storage, key) {\n\t\t\tkey = ieKeyFix(key)\n\t\t\tstorage.removeAttribute(key)\n\t\t\tstorage.save(localStorageName)\n\t\t})\n\t\tstore.clear = withIEStorage(function(storage) {\n\t\t\tvar attributes = storage.XMLDocument.documentElement.attributes\n\t\t\tstorage.load(localStorageName)\n\t\t\tfor (var i=0, attr; attr=attributes[i]; i++) {\n\t\t\t\tstorage.removeAttribute(attr.name)\n\t\t\t}\n\t\t\tstorage.save(localStorageName)\n\t\t})\n\t\tstore.getAll = function(storage) {\n\t\t\tvar ret = {}\n\t\t\tstore.forEach(function(key, val) {\n\t\t\t\tret[key] = val\n\t\t\t})\n\t\t\treturn ret\n\t\t}\n\t\tstore.forEach = withIEStorage(function(storage, callback) {\n\t\t\tvar attributes = storage.XMLDocument.documentElement.attributes\n\t\t\tfor (var i=0, attr; attr=attributes[i]; ++i) {\n\t\t\t\tcallback(attr.name, store.deserialize(storage.getAttribute(attr.name)))\n\t\t\t}\n\t\t})\n\t}\n\n\ttry {\n\t\tvar testKey = '__storejs__'\n\t\tstore.set(testKey, testKey)\n\t\tif (store.get(testKey) != testKey) { store.disabled = true }\n\t\tstore.remove(testKey)\n\t} catch(e) {\n\t\tstore.disabled = true\n\t}\n\tstore.enabled = !store.disabled\n\n\tif (typeof module != 'undefined' && module.exports && this.module !== module) { module.exports = store }\n\telse if (typeof define === 'function' && define.amd) { define(store) }\n\telse { win.store = store }\n\n})(Function('return this')());\n","module.exports={\n  \"name\": \"yasgui-utils\",\n  \"version\": \"1.6.0\",\n  \"description\": \"Utils for YASGUI libs\",\n  \"main\": \"src/main.js\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/YASGUI/Utils.git\"\n  },\n  \"licenses\": [\n    {\n      \"type\": \"MIT\",\n      \"url\": \"http://yasgui.github.io/license.txt\"\n    }\n  ],\n  \"author\": {\n    \"name\": \"Laurens Rietveld\"\n  },\n  \"maintainers\": [\n    {\n      \"name\": \"laurens.rietveld\",\n      \"email\": \"laurens.rietveld@gmail.com\"\n    }\n  ],\n  \"bugs\": {\n    \"url\": \"https://github.com/YASGUI/Utils/issues\"\n  },\n  \"homepage\": \"https://github.com/YASGUI/Utils\",\n  \"dependencies\": {\n    \"store\": \"^1.3.14\"\n  },\n  \"_id\": \"yasgui-utils@1.6.0\",\n  \"dist\": {\n    \"shasum\": \"bcb9091109c233e3e82737c94c202e6512389c47\",\n    \"tarball\": \"http://registry.npmjs.org/yasgui-utils/-/yasgui-utils-1.6.0.tgz\"\n  },\n  \"_from\": \"yasgui-utils@>=1.4.1 <2.0.0\",\n  \"_npmVersion\": \"1.4.3\",\n  \"_npmUser\": {\n    \"name\": \"laurens.rietveld\",\n    \"email\": \"laurens.rietveld@gmail.com\"\n  },\n  \"directories\": {},\n  \"_shasum\": \"bcb9091109c233e3e82737c94c202e6512389c47\",\n  \"_resolved\": \"https://registry.npmjs.org/yasgui-utils/-/yasgui-utils-1.6.0.tgz\",\n  \"readme\": \"ERROR: No README data found!\"\n}\n","window.console = window.console || {\"log\":function(){}};//make sure any console statements don't break IE\nmodule.exports = {\n\tstorage: require(\"./storage.js\"),\n\tsvg: require(\"./svg.js\"),\n\tversion: {\n\t\t\"yasgui-utils\" : require(\"../package.json\").version,\n\t},\n\tnestedExists : function(obj) {\n\t\tvar args = Array.prototype.slice.call(arguments, 1);\n\n\t\tfor (var i = 0; i < args.length; i++) {\n\t\t\tif (!obj || !obj.hasOwnProperty(args[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tobj = obj[args[i]];\n\t\t}\n\t\treturn true;\n\t}\n};\n","var store = require(\"store\");\nvar times = {\n\tday: function() {\n\t\treturn 1000 * 3600 * 24;//millis to day\n\t},\n\tmonth: function() {\n\t\ttimes.day() * 30;\n\t},\n\tyear: function() {\n\t\ttimes.month() * 12;\n\t}\n};\n\nvar root = module.exports = {\n\tset : function(key, val, exp) {\n    if (!store.enabled) return;//this is probably in private mode. Don't run, as we might get Js errors\n\t\tif (key && val !== undefined) {\n\t\t\tif (typeof exp == \"string\") {\n\t\t\t\texp = times[exp]();\n\t\t\t}\n\t\t\t//try to store string for dom objects (e.g. XML result). Otherwise, we might get a circular reference error when stringifying this\n\t\t\tif (val.documentElement) val = new XMLSerializer().serializeToString(val.documentElement);\n\t\t\tstore.set(key, {\n\t\t\t\tval : val,\n\t\t\t\texp : exp,\n\t\t\t\ttime : new Date().getTime()\n\t\t\t});\n\t\t}\n\t},\n\tremove: function(key) {\n\t\tif (!store.enabled) return;//this is probably in private mode. Don't run, as we might get Js errors\n\t\tif (key) store.remove(key)\n\t},\n\tremoveAll: function(filter) {\n\t\tif (!store.enabled) return;//this is probably in private mode. Don't run, as we might get Js errors\n\t\tif (typeof filter === 'function') {\n\t\t\tfor (var key in store.getAll()) {\n\t\t\t\tif (filter(key, root.get(key))) root.remove(key);\n\t\t\t}\n\t\t}\n\t},\n\tget : function(key) {\n    if (!store.enabled) return null;//this is probably in private mode. Don't run, as we might get Js errors\n\t\tif (key) {\n\t\t\tvar info = store.get(key);\n\t\t\tif (!info) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (info.exp && new Date().getTime() - info.time > info.exp) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn info.val;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n};\n","module.exports = {\n\tdraw: function(parent, svgString) {\n\t\tif (!parent) return;\n\t\tvar el = module.exports.getElement(svgString);\n\t\tif (el) {\n\t\t\tif (parent.append) {\n\t\t\t\tparent.append(el);\n\t\t\t} else {\n\t\t\t\t//regular dom doc\n\t\t\t\tparent.appendChild(el);\n\t\t\t}\n\t\t}\n\t},\n\tgetElement: function(svgString) {\n\t\tif (svgString && svgString.indexOf(\"<svg\") == 0) {\n\t\t\t//no style passed via config. guess own styles\n\t\t\tvar parser = new DOMParser();\n\t\t\tvar dom = parser.parseFromString(svgString, \"text/xml\");\n\t\t\tvar svg = dom.documentElement;\n\t\t\t\n\t\t\tvar svgContainer = document.createElement(\"div\");\n\t\t\tsvgContainer.className = 'svgImg';\n\t\t\tsvgContainer.appendChild(svg);\n\t\t\treturn svgContainer;\n\t\t}\n\t\treturn false;\n\t}\n};","module.exports={\r\n  \"name\": \"yasgui-yasqe\",\r\n  \"description\": \"Yet Another SPARQL Query Editor\",\r\n  \"version\": \"2.3.7\",\r\n  \"main\": \"src/main.js\",\r\n  \"licenses\": [\r\n    {\r\n      \"type\": \"MIT\",\r\n      \"url\": \"http://yasqe.yasgui.org/license.txt\"\r\n    }\r\n  ],\r\n  \"author\": \"Laurens Rietveld\",\r\n  \"homepage\": \"http://yasqe.yasgui.org\",\r\n  \"devDependencies\": {\r\n    \"browserify\": \"^6.1.0\",\r\n    \"gulp\": \"~3.6.0\",\r\n    \"gulp-bump\": \"^0.1.11\",\r\n    \"gulp-concat\": \"^2.4.1\",\r\n    \"gulp-connect\": \"^2.0.5\",\r\n    \"gulp-embedlr\": \"^0.5.2\",\r\n    \"gulp-filter\": \"^1.0.2\",\r\n    \"gulp-git\": \"^0.5.2\",\r\n    \"gulp-jsvalidate\": \"^0.2.0\",\r\n    \"gulp-livereload\": \"^1.3.1\",\r\n    \"gulp-minify-css\": \"0.3.11\",\r\n    \"gulp-notify\": \"^2.0.1\",\r\n    \"gulp-rename\": \"^1.2.0\",\r\n    \"gulp-streamify\": \"0.0.5\",\r\n    \"gulp-tag-version\": \"^1.1.0\",\r\n    \"gulp-uglify\": \"^1.0.1\",\r\n    \"require-dir\": \"^0.1.0\",\r\n    \"run-sequence\": \"^1.0.1\",\r\n    \"vinyl-buffer\": \"^1.0.0\",\r\n    \"vinyl-source-stream\": \"~0.1.1\",\r\n    \"watchify\": \"^0.6.4\",\r\n    \"gulp-sourcemaps\": \"^1.2.8\",\r\n    \"exorcist\": \"^0.1.6\",\r\n    \"vinyl-transform\": \"0.0.1\",\r\n    \"gulp-sass\": \"^1.2.2\",\r\n    \"bootstrap-sass\": \"^3.3.1\",\r\n    \"browserify-transform-tools\": \"^1.2.1\",\r\n    \"gulp-cssimport\": \"^1.3.1\"\r\n  },\r\n  \"bugs\": \"https://github.com/YASGUI/YASQE/issues/\",\r\n  \"keywords\": [\r\n    \"JavaScript\",\r\n    \"SPARQL\",\r\n    \"Editor\",\r\n    \"Semantic Web\",\r\n    \"Linked Data\"\r\n  ],\r\n  \"maintainers\": [\r\n    {\r\n      \"name\": \"Laurens Rietveld\",\r\n      \"email\": \"laurens.rietveld@gmail.com\",\r\n      \"web\": \"http://laurensrietveld.nl\"\r\n    }\r\n  ],\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"https://github.com/YASGUI/YASQE.git\"\r\n  },\r\n  \"dependencies\": {\r\n    \"jquery\": \"~ 1.11.0\",\r\n    \"codemirror\": \"^4.7.0\",\r\n    \"yasgui-utils\": \"^1.4.1\"\r\n  },\r\n  \"optionalShim\": {\r\n    \"codemirror\": {\r\n      \"require\": \"codemirror\",\r\n      \"global\": \"CodeMirror\"\r\n    },\r\n    \"jquery\": {\r\n      \"require\": \"jquery\",\r\n      \"global\": \"jQuery\"\r\n    },\r\n    \"../../lib/codemirror\": {\r\n      \"require\": \"codemirror\",\r\n      \"global\": \"CodeMirror\"\r\n    }\r\n  }\r\n}\r\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\r\n// Distributed under an MIT license: http://codemirror.net/LICENSE\r\n\r\n(function(mod) {\r\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\r\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\r\n  else if (typeof define == \"function\" && define.amd) // AMD\r\n    define([\"codemirror\"], mod);\r\n  else // Plain browser env\r\n    mod(CodeMirror);\r\n})(function(CodeMirror) {\r\n  var DEFAULT_BRACKETS = \"()[]{}''\\\"\\\"\";\r\n  var DEFAULT_EXPLODE_ON_ENTER = \"[]{}\";\r\n  var SPACE_CHAR_REGEX = /\\s/;\r\n\r\n  var Pos = CodeMirror.Pos;\r\n\r\n  CodeMirror.defineOption(\"autoCloseBrackets\", false, function(cm, val, old) {\r\n    if (old != CodeMirror.Init && old)\r\n      cm.removeKeyMap(\"autoCloseBrackets\");\r\n    if (!val) return;\r\n    var pairs = DEFAULT_BRACKETS, explode = DEFAULT_EXPLODE_ON_ENTER;\r\n    if (typeof val == \"string\") pairs = val;\r\n    else if (typeof val == \"object\") {\r\n      if (val.pairs != null) pairs = val.pairs;\r\n      if (val.explode != null) explode = val.explode;\r\n    }\r\n    var map = buildKeymap(pairs);\r\n    if (explode) map.Enter = buildExplodeHandler(explode);\r\n    cm.addKeyMap(map);\r\n  });\r\n\r\n  function charsAround(cm, pos) {\r\n    var str = cm.getRange(Pos(pos.line, pos.ch - 1),\r\n                          Pos(pos.line, pos.ch + 1));\r\n    return str.length == 2 ? str : null;\r\n  }\r\n\r\n  // Project the token type that will exists after the given char is\r\n  // typed, and use it to determine whether it would cause the start\r\n  // of a string token.\r\n  function enteringString(cm, pos, ch) {\r\n    var line = cm.getLine(pos.line);\r\n    var token = cm.getTokenAt(pos);\r\n    if (/\\bstring2?\\b/.test(token.type)) return false;\r\n    var stream = new CodeMirror.StringStream(line.slice(0, pos.ch) + ch + line.slice(pos.ch), 4);\r\n    stream.pos = stream.start = token.start;\r\n    for (;;) {\r\n      var type1 = cm.getMode().token(stream, token.state);\r\n      if (stream.pos >= pos.ch + 1) return /\\bstring2?\\b/.test(type1) || type1 === 'error';\r\n      stream.start = stream.pos;\r\n    }\r\n  }\r\n\r\n  function buildKeymap(pairs) {\r\n    var map = {\r\n      name : \"autoCloseBrackets\",\r\n      Backspace: function(cm) {\r\n        if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\r\n        var ranges = cm.listSelections();\r\n        for (var i = 0; i < ranges.length; i++) {\r\n          if (!ranges[i].empty()) return CodeMirror.Pass;\r\n          var around = charsAround(cm, ranges[i].head);\r\n          if (!around || pairs.indexOf(around) % 2 != 0) return CodeMirror.Pass;\r\n        }\r\n        for (var i = ranges.length - 1; i >= 0; i--) {\r\n          var cur = ranges[i].head;\r\n          cm.replaceRange(\"\", Pos(cur.line, cur.ch - 1), Pos(cur.line, cur.ch + 1));\r\n        }\r\n      }\r\n    };\r\n    var closingBrackets = \"\";\r\n    for (var i = 0; i < pairs.length; i += 2) (function(left, right) {\r\n      closingBrackets += right;\r\n      map[\"'\" + left + \"'\"] = function(cm) {\r\n        if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\r\n        var ranges = cm.listSelections(), type, next;\r\n        for (var i = 0; i < ranges.length; i++) {\r\n          var range = ranges[i], cur = range.head, curType;\r\n          var next = cm.getRange(cur, Pos(cur.line, cur.ch + 1));\r\n          if (!range.empty()) {\r\n            curType = \"surround\";\r\n          } else if (left == right && next == right) {\r\n            if (cm.getRange(cur, Pos(cur.line, cur.ch + 3)) == left + left + left)\r\n              curType = \"skipThree\";\r\n            else\r\n              curType = \"skip\";\r\n          } else if (left == right && cur.ch > 1 &&\r\n                     cm.getRange(Pos(cur.line, cur.ch - 2), cur) == left + left &&\r\n                     (cur.ch <= 2 || cm.getRange(Pos(cur.line, cur.ch - 3), Pos(cur.line, cur.ch - 2)) != left)) {\r\n            curType = \"addFour\";\r\n          } else if (left == '\"' || left == \"'\") {\r\n            if (!CodeMirror.isWordChar(next) && enteringString(cm, cur, left)) curType = \"both\";\r\n            else return CodeMirror.Pass;\r\n          } else if (cm.getLine(cur.line).length == cur.ch || closingBrackets.indexOf(next) >= 0 || SPACE_CHAR_REGEX.test(next)) {\r\n            curType = \"both\";\r\n          } else {\r\n            return CodeMirror.Pass;\r\n          }\r\n          if (!type) type = curType;\r\n          else if (type != curType) return CodeMirror.Pass;\r\n        }\r\n\r\n        cm.operation(function() {\r\n          if (type == \"skip\") {\r\n            cm.execCommand(\"goCharRight\");\r\n          } else if (type == \"skipThree\") {\r\n            for (var i = 0; i < 3; i++)\r\n              cm.execCommand(\"goCharRight\");\r\n          } else if (type == \"surround\") {\r\n            var sels = cm.getSelections();\r\n            for (var i = 0; i < sels.length; i++)\r\n              sels[i] = left + sels[i] + right;\r\n            cm.replaceSelections(sels, \"around\");\r\n          } else if (type == \"both\") {\r\n            cm.replaceSelection(left + right, null);\r\n            cm.execCommand(\"goCharLeft\");\r\n          } else if (type == \"addFour\") {\r\n            cm.replaceSelection(left + left + left + left, \"before\");\r\n            cm.execCommand(\"goCharRight\");\r\n          }\r\n        });\r\n      };\r\n      if (left != right) map[\"'\" + right + \"'\"] = function(cm) {\r\n        var ranges = cm.listSelections();\r\n        for (var i = 0; i < ranges.length; i++) {\r\n          var range = ranges[i];\r\n          if (!range.empty() ||\r\n              cm.getRange(range.head, Pos(range.head.line, range.head.ch + 1)) != right)\r\n            return CodeMirror.Pass;\r\n        }\r\n        cm.execCommand(\"goCharRight\");\r\n      };\r\n    })(pairs.charAt(i), pairs.charAt(i + 1));\r\n    return map;\r\n  }\r\n\r\n  function buildExplodeHandler(pairs) {\r\n    return function(cm) {\r\n      if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\r\n      var ranges = cm.listSelections();\r\n      for (var i = 0; i < ranges.length; i++) {\r\n        if (!ranges[i].empty()) return CodeMirror.Pass;\r\n        var around = charsAround(cm, ranges[i].head);\r\n        if (!around || pairs.indexOf(around) % 2 != 0) return CodeMirror.Pass;\r\n      }\r\n      cm.operation(function() {\r\n        cm.replaceSelection(\"\\n\\n\", null);\r\n        cm.execCommand(\"goCharLeft\");\r\n        ranges = cm.listSelections();\r\n        for (var i = 0; i < ranges.length; i++) {\r\n          var line = ranges[i].head.line;\r\n          cm.indentLine(line, null, true);\r\n          cm.indentLine(line + 1, null, true);\r\n        }\r\n      });\r\n    };\r\n  }\r\n});\r\n","'use strict';\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\r\n\tutils = require('../utils.js'),\r\n\tyutils = require('yasgui-utils'),\r\n\tTrie = require('../../lib/trie.js');\r\n\r\nmodule.exports = function(YASQE, yasqe) {\r\n\tvar completionNotifications = {};\r\n\tvar completers = {};\r\n\tvar tries = {};\r\n\t\r\n\tyasqe.on('cursorActivity', function(yasqe, eventInfo) {\r\n\t\tautoComplete(true);\r\n\t});\r\n\tyasqe.on('change', function() {\r\n\t\tvar needPossibleAdjustment = [];\r\n\t\tfor (var notificationName in completionNotifications) {\r\n\t\t\tif (completionNotifications[notificationName].is(':visible')) {\r\n\t\t\t\tneedPossibleAdjustment.push(completionNotifications[notificationName]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (needPossibleAdjustment.length > 0) {\r\n\t\t\t//position completion notifications\r\n\t\t\tvar scrollBar = $(yasqe.getWrapperElement()).find(\".CodeMirror-vscrollbar\");\r\n\t\t\tvar offset = 0;\r\n\t\t\tif (scrollBar.is(\":visible\")) {\r\n\t\t\t\toffset = scrollBar.outerWidth();\r\n\t\t\t}\r\n\t\t\tneedPossibleAdjustment.forEach(function(notification){notification.css(\"right\", offset)});\r\n\t\t}\r\n\t});\r\n\r\n\t\r\n\r\n\t/**\r\n\t * Store bulk completions in memory as trie, and store these in localstorage as well (if enabled)\r\n\t * \r\n\t * @method doc.storeBulkCompletions\r\n\t * @param completions {array}\r\n\t */\r\n\tvar storeBulkCompletions = function(completer, completions) {\r\n\t\t// store array as trie\r\n\t\ttries[completer.name] = new Trie();\r\n\t\tfor (var i = 0; i < completions.length; i++) {\r\n\t\t\ttries[completer.name].insert(completions[i]);\r\n\t\t}\r\n\t\t// store in localstorage as well\r\n\t\tvar storageId = utils.getPersistencyId(yasqe, completer.persistent);\r\n\t\tif (storageId) yutils.storage.set(storageId, completions, \"month\");\r\n\t};\r\n\t\r\n\tvar initCompleter = function(name, completionInit) {\r\n\t\tvar completer = completers[name] = new completionInit(yasqe, name);\r\n\t\tcompleter.name = name;\r\n\t\tif (completer.bulk) {\r\n\t\t\tvar storeArrayAsBulk = function(suggestions) {\r\n\t\t\t\tif (suggestions && suggestions instanceof Array && suggestions.length > 0) {\r\n\t\t\t\t\tstoreBulkCompletions(completer, suggestions);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (completer.get instanceof Array) {\r\n\t\t\t\t// we don't care whether the completions are already stored in\r\n\t\t\t\t// localstorage. just use this one\r\n\t\t\t\tstoreArrayAsBulk(completer.get);\r\n\t\t\t} else {\r\n\t\t\t\t// if completions are defined in localstorage, use those! (calling the\r\n\t\t\t\t// function may come with overhead (e.g. async calls))\r\n\t\t\t\tvar completionsFromStorage = null;\r\n\t\t\t\tvar persistencyIdentifier = utils.getPersistencyId(yasqe, completer.persistent);\r\n\t\t\t\tif (persistencyIdentifier)\r\n\t\t\t\t\tcompletionsFromStorage = yutils.storage.get(persistencyIdentifier);\r\n\t\t\t\tif (completionsFromStorage && completionsFromStorage.length > 0) {\r\n\t\t\t\t\tstoreArrayAsBulk(completionsFromStorage);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// nothing in storage. check whether we have a function via which we\r\n\t\t\t\t\t// can get our prefixes\r\n\t\t\t\t\tif (completer.get instanceof Function) {\r\n\t\t\t\t\t\tif (completer.async) {\r\n\t\t\t\t\t\t\tcompleter.get(null, storeArrayAsBulk);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tstoreArrayAsBulk(completer.get());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tvar autoComplete = function(fromAutoShow) {\r\n\t\tif (yasqe.somethingSelected())\r\n\t\t\treturn;\r\n\t\tvar tryHintType = function(completer) {\r\n\t\t\tif (fromAutoShow // from autoShow, i.e. this gets called each time the editor content changes\r\n\t\t\t\t\t&& (!completer.autoShow // autoshow for  this particular type of autocompletion is -not- enabled\r\n\t\t\t\t\t|| (!completer.bulk && completer.async)) // async is enabled (don't want to re-do ajax-like request for every editor change)\r\n\t\t\t) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvar hintConfig = {\r\n\t\t\t\tcloseCharacters : /(?=a)b/,\r\n\t\t\t\tcompleteSingle: false\r\n\t\t\t};\r\n\t\t\tif (!completer.bulk && completer.async) {\r\n\t\t\t\thintConfig.async = true;\r\n\t\t\t}\r\n\t\t\tvar wrappedHintCallback = function(yasqe, callback) {\r\n\t\t\t\treturn getCompletionHintsObject(completer, callback);\r\n\t\t\t};\r\n\t\t\tvar result = YASQE.showHint(yasqe, wrappedHintCallback, hintConfig);\r\n\t\t\treturn true;\r\n\t\t};\r\n\t\tfor ( var completerName in completers) {\r\n\t\t\tif ($.inArray(completerName, yasqe.options.autocompleters) == -1) continue;//this completer is disabled\r\n\t\t\tvar completer = completers[completerName];\r\n\t\t\tif (!completer.isValidCompletionPosition) continue; //no way to check whether we are in a valid position\r\n\t\t\t\r\n\t\t\tif (!completer.isValidCompletionPosition()) {\r\n\t\t\t\t//if needed, fire callbacks for when we are -not- in valid completion position\r\n\t\t\t\tif (completer.callbacks && completer.callbacks.invalidPosition) {\r\n\t\t\t\t\tcompleter.callbacks.invalidPosition(yasqe, completer);\r\n\t\t\t\t}\r\n\t\t\t\t//not in a valid position, so continue to next completion candidate type\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// run valid position handler, if there is one (if it returns false, stop the autocompletion!)\r\n\t\t\tif (completer.callbacks && completer.callbacks.validPosition) {\r\n\t\t\t\tif (completer.callbacks.validPosition(yasqe, completer) === false)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tvar success = tryHintType(completer);\r\n\t\t\tif (success)\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t};\r\n\t\r\n\t\r\n\r\n\tvar getCompletionHintsObject = function(completer, callback) {\r\n\t\tvar getSuggestionsFromToken = function(partialToken) {\r\n\t\t\tvar stringToAutocomplete = partialToken.autocompletionString || partialToken.string;\r\n\t\t\tvar suggestions = [];\r\n\t\t\tif (tries[completer.name]) {\r\n\t\t\t\tsuggestions = tries[completer.name].autoComplete(stringToAutocomplete);\r\n\t\t\t} else if (typeof completer.get == \"function\" && completer.async == false) {\r\n\t\t\t\tsuggestions = completer.get(stringToAutocomplete);\r\n\t\t\t} else if (typeof completer.get == \"object\") {\r\n\t\t\t\tvar partialTokenLength = stringToAutocomplete.length;\r\n\t\t\t\tfor (var i = 0; i < completer.get.length; i++) {\r\n\t\t\t\t\tvar completion = completer.get[i];\r\n\t\t\t\t\tif (completion.slice(0, partialTokenLength) == stringToAutocomplete) {\r\n\t\t\t\t\t\tsuggestions.push(completion);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn getSuggestionsAsHintObject(suggestions, completer, partialToken);\r\n\t\t\t\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\tvar token = yasqe.getCompleteToken();\r\n\t\tif (completer.preProcessToken) {\r\n\t\t\ttoken = completer.preProcessToken(token);\r\n\t\t}\r\n\t\t\r\n\t\tif (token) {\r\n\t\t\t// use custom completionhint function, to avoid reaching a loop when the\r\n\t\t\t// completionhint is the same as the current token\r\n\t\t\t// regular behaviour would keep changing the codemirror dom, hence\r\n\t\t\t// constantly calling this callback\r\n\t\t\tif (!completer.bulk && completer.async) {\r\n\t\t\t\tvar wrappedCallback = function(suggestions) {\r\n\t\t\t\t\tcallback(getSuggestionsAsHintObject(suggestions, completer, token));\r\n\t\t\t\t};\r\n\t\t\t\tcompleter.get(token, wrappedCallback);\r\n\t\t\t} else {\r\n\t\t\t\treturn getSuggestionsFromToken(token);\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t\r\n\r\n\t/**\r\n\t *  get our array of suggestions (strings) in the codemirror hint format\r\n\t */\r\n\tvar getSuggestionsAsHintObject = function(suggestions, completer, token) {\r\n\t\tvar hintList = [];\r\n\t\tfor (var i = 0; i < suggestions.length; i++) {\r\n\t\t\tvar suggestedString = suggestions[i];\r\n\t\t\tif (completer.postProcessToken) {\r\n\t\t\t\tsuggestedString = completer.postProcessToken(token, suggestedString);\r\n\t\t\t}\r\n\t\t\thintList.push({\r\n\t\t\t\ttext : suggestedString,\r\n\t\t\t\tdisplayText : suggestedString,\r\n\t\t\t\thint : selectHint,\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tvar cur = yasqe.getCursor();\r\n\t\tvar returnObj = {\r\n\t\t\tcompletionToken : token.string,\r\n\t\t\tlist : hintList,\r\n\t\t\tfrom : {\r\n\t\t\t\tline : cur.line,\r\n\t\t\t\tch : token.start\r\n\t\t\t},\r\n\t\t\tto : {\r\n\t\t\t\tline : cur.line,\r\n\t\t\t\tch : token.end\r\n\t\t\t}\r\n\t\t};\r\n\t\t//if we have some autocompletion handlers specified, add these these to the object. Codemirror will take care of firing these\r\n\t\tif (completer.callbacks) {\r\n\t\t\tfor ( var callbackName in completer.callbacks) {\r\n\t\t\t\tif (completer.callbacks[callbackName]) \r\n\t\t\t\t\tyasqe.on(returnObj, callbackName, completer.callbacks[callbackName]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn returnObj;\r\n\t};\r\n\t\r\n\treturn {\r\n\t\tinit: initCompleter,\r\n\t\tcompleters: completers,\r\n\t\tnotifications: {\r\n\t\t\tgetEl: function(completer) {\r\n\t\t\t\treturn $(completionNotifications[completer.name]);\r\n\t\t\t},\r\n\t\t\tshow: function(yasqe, completer) {\r\n\t\t\t\t//only draw when the user needs to use a keypress to summon autocompletions\r\n\t\t\t\tif (!completer.autoshow) {\r\n\t\t\t\t\tif (!completionNotifications[completer.name]) completionNotifications[completer.name] = $(\"<div class='completionNotification'></div>\");\r\n\t\t\t\t\tcompletionNotifications[completer.name]\r\n\t\t\t\t\t\t.show()\r\n\t\t\t\t\t\t.text(\"Press \" + (navigator.userAgent.indexOf('Mac OS X') != -1? \"CMD\": \"CTRL\") + \" - <spacebar> to autocomplete\")\r\n\t\t\t\t\t\t.appendTo($(yasqe.getWrapperElement()));\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\thide: function(yasqe, completer) {\r\n\t\t\t\tif (completionNotifications[completer.name]) {\r\n\t\t\t\t\tcompletionNotifications[completer.name].hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t},\r\n\t\tautoComplete: autoComplete,\r\n\t\tgetTrie: function(completer) {return (typeof completer == \"string\"? tries[completer]: tries[completer.name]);}\r\n\t}\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * function which fires after the user selects a completion. this function checks whether we actually need to store this one (if completion is same as current token, don't do anything)\r\n */\r\nvar selectHint = function(yasqe, data, completion) {\r\n\tif (completion.text != yasqe.getTokenAt(yasqe.getCursor()).string) {\r\n\t\tyasqe.replaceRange(completion.text, data.from, data.to);\r\n\t}\r\n};\r\n\r\n\r\n\r\n\r\n\r\n//\r\n//module.exports = {\r\n//\tpreprocessPrefixTokenForCompletion: preprocessPrefixTokenForCompletion,\r\n//\tpostprocessResourceTokenForCompletion: postprocessResourceTokenForCompletion,\r\n//\tpreprocessResourceTokenForCompletion: preprocessResourceTokenForCompletion,\r\n//\tshowCompletionNotification: showCompletionNotification,\r\n//\thideCompletionNotification: hideCompletionNotification,\r\n//\tautoComplete: autoComplete,\r\n//\tautocompleteVariables: autocompleteVariables,\r\n//\tfetchFromPrefixCc: fetchFromPrefixCc,\r\n//\tfetchFromLov: fetchFromLov,\r\n////\tstoreBulkCompletions: storeBulkCompletions,\r\n//\tloadBulkCompletions: loadBulkCompletions,\r\n//};\r\n","'use strict';\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\nmodule.exports = function(yasqe, name) {\r\n\treturn {\r\n\t\tisValidCompletionPosition : function(){return module.exports.isValidCompletionPosition(yasqe);},\r\n\t\tget : function(token, callback) {\r\n\t\t\treturn require('./utils').fetchFromLov(yasqe, this, token, callback);\r\n\t\t},\r\n\t\tpreProcessToken: function(token) {return module.exports.preProcessToken(yasqe, token)},\r\n\t\tpostProcessToken: function(token, suggestedString) {return module.exports.postProcessToken(yasqe, token, suggestedString);},\r\n\t\tasync : true,\r\n\t\tbulk : false,\r\n\t\tautoShow : false,\r\n\t\tpersistent : name,\r\n\t\tcallbacks : {\r\n\t\t\tvalidPosition : yasqe.autocompleters.notifications.show,\r\n\t\t\tinvalidPosition : yasqe.autocompleters.notifications.hide,\r\n\t\t}\r\n\t}\r\n};\r\n\r\nmodule.exports.isValidCompletionPosition = function(yasqe) {\r\n\tvar token = yasqe.getCompleteToken();\r\n\tif (token.string.indexOf(\"?\") == 0)\r\n\t\treturn false;\r\n\tvar cur = yasqe.getCursor();\r\n\tvar previousToken = yasqe.getPreviousNonWsToken(cur.line, token);\r\n\tif (previousToken.string == \"a\")\r\n\t\treturn true;\r\n\tif (previousToken.string == \"rdf:type\")\r\n\t\treturn true;\r\n\tif (previousToken.string == \"rdfs:domain\")\r\n\t\treturn true;\r\n\tif (previousToken.string == \"rdfs:range\")\r\n\t\treturn true;\r\n\treturn false;\r\n};\r\nmodule.exports.preProcessToken = function(yasqe, token) {\r\n\treturn require('./utils.js').preprocessResourceTokenForCompletion(yasqe, token);\r\n};\r\nmodule.exports.postProcessToken = function(yasqe, token, suggestedString) {\r\n\treturn require('./utils.js').postprocessResourceTokenForCompletion(yasqe, token, suggestedString)\r\n};","'use strict';\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\nmodule.exports = function(yasqe, name) {\r\n\treturn {\r\n\t\tisValidCompletionPosition : function(){return module.exports.isValidCompletionPosition(yasqe);},\r\n\t\tget : function(token, callback) {\r\n\t\t\treturn require('./utils').fetchFromLov(yasqe, this, token, callback);\r\n\t\t},\r\n\t\tpreProcessToken: function(token) {return module.exports.preProcessToken(yasqe, token)},\r\n\t\tpostProcessToken: function(token, suggestedString) {return module.exports.postProcessToken(yasqe, token, suggestedString);},\r\n\t\tasync : true,\r\n\t\tbulk : false,\r\n\t\tautoShow : false,\r\n\t\tpersistent : name,\r\n\t\tcallbacks : {\r\n\t\t\tvalidPosition : yasqe.autocompleters.notifications.show,\r\n\t\t\tinvalidPosition : yasqe.autocompleters.notifications.hide,\r\n\t\t}\r\n\t}\r\n};\r\n\r\nmodule.exports.isValidCompletionPosition = function(yasqe) {\r\n\tvar token = yasqe.getCompleteToken();\r\n\tif (token.string.length == 0) \r\n\t\treturn false; //we want -something- to autocomplete\r\n\tif (token.string.indexOf(\"?\") == 0)\r\n\t\treturn false; // we are typing a var\r\n\tif ($.inArray(\"a\", token.state.possibleCurrent) >= 0)\r\n\t\treturn true;// predicate pos\r\n\tvar cur = yasqe.getCursor();\r\n\tvar previousToken = yasqe.getPreviousNonWsToken(cur.line, token);\r\n\tif (previousToken.string == \"rdfs:subPropertyOf\")\r\n\t\treturn true;\r\n\r\n\t// hmm, we would like -better- checks here, e.g. checking whether we are\r\n\t// in a subject, and whether next item is a rdfs:subpropertyof.\r\n\t// difficult though... the grammar we use is unreliable when the query\r\n\t// is invalid (i.e. during typing), and often the predicate is not typed\r\n\t// yet, when we are busy writing the subject...\r\n\treturn false;\r\n};\r\nmodule.exports.preProcessToken = function(yasqe, token) {\r\n\treturn require('./utils.js').preprocessResourceTokenForCompletion(yasqe, token);\r\n};\r\nmodule.exports.postProcessToken = function(yasqe, token, suggestedString) {\r\n\treturn require('./utils.js').postprocessResourceTokenForCompletion(yasqe, token, suggestedString)\r\n};","'use strict';\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\n//this is a mapping from the class names (generic ones, for compatability with codemirror themes), to what they -actually- represent\r\nvar tokenTypes = {\r\n\t\"string-2\" : \"prefixed\",\r\n\t\"atom\": \"var\"\r\n};\r\n\r\nmodule.exports = function(yasqe, completerName) {\r\n\t//this autocompleter also fires on-change!\r\n\tyasqe.on(\"change\", function() {\r\n\t\tmodule.exports.appendPrefixIfNeeded(yasqe, completerName);\r\n\t});\r\n\t\r\n\t\r\n\treturn {\r\n\t\tisValidCompletionPosition : function(){return module.exports.isValidCompletionPosition(yasqe);},\r\n\t\tget : function(token, callback) {\r\n\t\t\tif (backendRepositoryID != '') {\r\n\t\t\t\t$.get('repositories/' + backendRepositoryID + '/namespaces', function(data) {\r\n\t\t\t\t\t\tif (data.results) {\r\n\t\t\t\t\t\t\tvar prefixArray = data.results.bindings.map(function(namespace) {\r\n\t\t\t\t\t\t\t\treturn namespace.prefix.value + \": <\" + namespace.namespace.value + \">\";\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tprefixArray.sort();\r\n\t\t\t\t\t\t\tcallback(prefixArray);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//TODO: What to do on error here\r\n\t\t\t\t\t},\r\n\t\t\t\t\t'json'\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t},\r\n\t\tpreProcessToken: function(token) {return module.exports.preprocessPrefixTokenForCompletion(yasqe, token)},\r\n\t\tasync : true,\r\n\t\tbulk : true,\r\n\t\tautoShow: true,\r\n\t\tpersistent : null,\r\n\t};\r\n};\r\nmodule.exports.isValidCompletionPosition = function(yasqe) {\r\n\tvar cur = yasqe.getCursor(), token = yasqe.getTokenAt(cur);\r\n\r\n\t// not at end of line\r\n\tif (yasqe.getLine(cur.line).length > cur.ch)\r\n\t\treturn false;\r\n\r\n\tif (token.type != \"ws\") {\r\n\t\t// we want to complete token, e.g. when the prefix starts with an a\r\n\t\t// (treated as a token in itself..)\r\n\t\t// but we to avoid including the PREFIX tag. So when we have just\r\n\t\t// typed a space after the prefix tag, don't get the complete token\r\n\t\ttoken = yasqe.getCompleteToken();\r\n\t}\r\n\r\n\t// we shouldnt be at the uri part the prefix declaration\r\n\t// also check whether current token isnt 'a' (that makes codemirror\r\n\t// thing a namespace is a possiblecurrent\r\n\tif (!token.string.indexOf(\"a\") == 0\r\n\t\t\t&& $.inArray(\"PNAME_NS\", token.state.possibleCurrent) == -1)\r\n\t\treturn false;\r\n\r\n\t// First token of line needs to be PREFIX,\r\n\t// there should be no trailing text (otherwise, text is wrongly inserted\r\n\t// in between)\r\n\tvar previousToken = yasqe.getPreviousNonWsToken(cur.line, token);\r\n\tif (!previousToken || previousToken.string.toUpperCase() != \"PREFIX\") return false;\r\n\treturn true;\r\n};\r\nmodule.exports.preprocessPrefixTokenForCompletion = function(yasqe, token) {\r\n\tvar previousToken = yasqe.getPreviousNonWsToken(yasqe.getCursor().line, token);\r\n\tif (previousToken && previousToken.string && previousToken.string.slice(-1) == \":\") {\r\n\t\t//combine both tokens! In this case we have the cursor at the end of line \"PREFIX bla: <\".\r\n\t\t//we want the token to be \"bla: <\", en not \"<\"\r\n\t\ttoken = {\r\n\t\t\tstart: previousToken.start,\r\n\t\t\tend: token.end,\r\n\t\t\tstring: previousToken.string + \" \" + token.string,\r\n\t\t\tstate: token.state\r\n\t\t};\r\n\t}\r\n\treturn token;\r\n};\r\n/**\r\n * Check whether typed prefix is declared. If not, automatically add declaration\r\n * using list from prefix.cc\r\n * \r\n * @param yasqe\r\n */\r\nmodule.exports.appendPrefixIfNeeded = function(yasqe, completerName) {\r\n\tif (!yasqe.autocompleters.getTrie(completerName))\r\n\t\treturn;// no prefixed defined. just stop\r\n\tif (!yasqe.options.autocompleters || yasqe.options.autocompleters.indexOf(completerName) == -1) return;//this autocompleter is disabled\r\n\tvar cur = yasqe.getCursor();\r\n\r\n\tvar token = yasqe.getTokenAt(cur);\r\n\tif (tokenTypes[token.type] == \"prefixed\") {\r\n\t\tvar colonIndex = token.string.indexOf(\":\");\r\n\t\tif (colonIndex !== -1) {\r\n\t\t\t// check previous token isnt PREFIX, or a '<'(which would mean we are in a uri)\r\n//\t\t\tvar firstTokenString = yasqe.getNextNonWsToken(cur.line).string.toUpperCase();\r\n\t\t\tvar lastNonWsTokenString = yasqe.getPreviousNonWsToken(cur.line, token).string.toUpperCase();\r\n\t\t\tvar previousToken = yasqe.getTokenAt({\r\n\t\t\t\tline : cur.line,\r\n\t\t\t\tch : token.start\r\n\t\t\t});// needs to be null (beginning of line), or whitespace\r\n\t\t\tif (lastNonWsTokenString != \"PREFIX\"\r\n\t\t\t\t\t&& (previousToken.type == \"ws\" || previousToken.type == null)) {\r\n\t\t\t\t// check whether it isnt defined already (saves us from looping\r\n\t\t\t\t// through the array)\r\n\t\t\t\tvar currentPrefix = token.string.substring(0, colonIndex + 1);\r\n\t\t\t\tvar queryPrefixes = yasqe.getPrefixesFromQuery();\r\n\t\t\t\tif (queryPrefixes[currentPrefix.slice(0,-1)] == null) {\r\n\t\t\t\t\t// ok, so it isnt added yet!\r\n\t\t\t\t\tvar completions = yasqe.autocompleters.getTrie(completerName).autoComplete(currentPrefix);\r\n\t\t\t\t\tif (completions.length > 0) {\r\n\t\t\t\t\t\tyasqe.addPrefixes(completions[0]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\n","/**\r\n * Auto completes standard sparql functions\r\n */\r\nmodule.exports = function(yasqe, completerName) {\r\n    return {\r\n        /**\r\n         * Check whether the cursor is in a proper position for this autocompletion.\r\n         * \r\n         * @property autocompletions.variableNames.isValidCompletionPosition\r\n         * @type function\r\n         * @param yasqe {doc}\r\n         * @return boolean\r\n         */\r\n        isValidCompletionPosition : function() {\r\n            var token = yasqe.getTokenAt(yasqe.getCursor());\r\n            if (token.type != \"ws\") {\r\n                token = yasqe.getCompleteToken();\r\n                if (token.string.length > 1) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        /**\r\n         * Get the autocompletions. Either a function which returns an\r\n         * array, or an actual array. The array should be in the form [\"http://...\",....]\r\n         * \r\n         * @property autocompletions.variableNames.get\r\n         * @type function|array\r\n         * @param doc {YASQE}\r\n         * @param token {object|string} When bulk is disabled, use this token to autocomplete\r\n         * @param completionType {string} what type of autocompletion we try to attempt. Classes, properties, or prefixes)\r\n         * @param callback {function} In case async is enabled, use this callback\r\n         * @default function (YASQE.autocompleteVariables)\r\n         */\r\n        get : function(token, callback) {\r\n            //Taken from http://www.w3.org/TR/sparql11-query/#grammar BuiltInCall\r\n            var functions = [ 'COUNT', 'SUM', 'MIN', 'MAX', 'AVG', 'SAMPLE', 'STR', 'LANG', 'LANGMATCHES', 'DATATYPE', 'BOUND', 'IRI', 'URI',\r\n                'BNODE', 'RAND', 'ABS', 'CEIL', 'FLOOR', 'ROUND', 'CONCAT', 'SUBSTR', 'STRLEN', 'REPLACE', 'UCASE', 'LCASE', 'ENCODE_FOR_URI',\r\n                'CONTAINS', 'STRSTARTS', 'STRENDS', 'STRBEFORE', 'STRAFTER', 'YEAR', 'MONTH', 'DAY', 'HOURS', 'MINUTES', 'SECONDS', 'TIMEZONE',\r\n                'TZ', 'NOW', 'UUID', 'STRUUID', 'MD5', 'SHA1', 'SHA256', 'SHA384', 'SHA512', 'COALESCE', 'IF', 'STRLANG', 'STRDT', 'sameTerm',\r\n                'isIRI', 'isURI', 'isBLANK', 'isLITERAL', 'isNUMERIC', 'REGEX', 'EXISTS', 'FILTER'\r\n            ];\r\n\r\n            var result = [];\r\n            for (var i = 0; i < functions.length; i++) {\r\n                var f = functions[i];\r\n                var lowercasedF = f.toLowerCase();\r\n                var lowercasedToken = token.toLowerCase();\r\n                if (lowercasedF.indexOf(lowercasedToken) !== 0) {\r\n                    continue;\r\n                }\r\n                result.push(f + '(');\r\n            }\r\n            result.sort();\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Preprocesses the codemirror token before matching it with our autocompletions list.\r\n         * Use this for e.g. autocompleting prefixed resources when your autocompletion list contains only full-length URIs\r\n         * I.e., foaf:name -> http://xmlns.com/foaf/0.1/name\r\n         * \r\n         * @property autocompletions.variableNames.preProcessToken\r\n         * @type function\r\n         * @param doc {YASQE}\r\n         * @param token {object} The CodeMirror token, including the position of this token in the query, as well as the actual string\r\n         * @return token {object} Return the same token (possibly with more data added to it, which you can use in the postProcessing step)\r\n         * @default null\r\n         */\r\n        preProcessToken: null,\r\n        /**\r\n         * Postprocesses the autocompletion suggestion.\r\n         * Use this for e.g. returning a prefixed URI based on a full-length URI suggestion\r\n         * I.e., http://xmlns.com/foaf/0.1/name -> foaf:name\r\n         * \r\n         * @property autocompletions.variableNames.postProcessToken\r\n         * @type function\r\n         * @param doc {YASQE}\r\n         * @param token {object} The CodeMirror token, including the position of this token in the query, as well as the actual string\r\n         * @param suggestion {string} The suggestion which you are post processing\r\n         * @return post-processed suggestion {string}\r\n         * @default null\r\n         */\r\n        postProcessToken: null,\r\n        /**\r\n         * The get function is asynchronous\r\n         * \r\n         * @property autocompletions.variableNames.async\r\n         * @type boolean\r\n         * @default false\r\n         */\r\n        async : false,\r\n        /**\r\n         * Use bulk loading of variableNames: all variable names are retrieved\r\n         * onLoad using the get() function. Alternatively, disable bulk\r\n         * loading, to call the get() function whenever a token needs\r\n         * autocompletion (in this case, the completion token is passed on\r\n         * to the get() function) whenever you have an autocompletion list that is static, and \r\n         * that easily fits in memory, we advice you to enable bulk for\r\n         * performance reasons (especially as we store the autocompletions\r\n         * in a trie)\r\n         * \r\n         * @property autocompletions.variableNames.bulk\r\n         * @type boolean\r\n         * @default false\r\n         */\r\n        bulk : false,\r\n        /**\r\n         * Auto-show the autocompletion dialog. Disabling this requires the\r\n         * user to press [ctrl|cmd]-space to summon the dialog. Note: this\r\n         * only works when completions are not fetched asynchronously\r\n         * \r\n         * @property autocompletions.variableNames.autoShow\r\n         * @type boolean\r\n         * @default false\r\n         */\r\n        autoShow : true,\r\n        /**\r\n         * Automatically store autocompletions in localstorage. This is\r\n         * particularly useful when the get() function is an expensive ajax\r\n         * call. Autocompletions are stored for a period of a month. Set\r\n         * this property to null (or remove it), to disable the use of\r\n         * localstorage. Otherwise, set a string value (or a function\r\n         * returning a string val), returning the key in which to store the\r\n         * data Note: this feature only works combined with completions\r\n         * loaded in memory (i.e. bulk: true)\r\n         * \r\n         * @property autocompletions.variableNames.persistent\r\n         * @type string|function\r\n         * @default null\r\n         */\r\n        persistent : null,\r\n        /**\r\n         * A set of handlers. Most, taken from the CodeMirror showhint\r\n         * plugin: http://codemirror.net/doc/manual.html#addon_show-hint\r\n         * \r\n         * @property autocompletions.variableNames.handlers\r\n         * @type object\r\n         */\r\n        handlers : {\r\n            /**\r\n             * Fires when a codemirror change occurs in a position where we\r\n             * can show this particular type of autocompletion\r\n             * \r\n             * @property autocompletions.variableNames.handlers.validPosition\r\n             * @type function\r\n             * @default null\r\n             */\r\n            validPosition : null,\r\n            /**\r\n             * Fires when a codemirror change occurs in a position where we\r\n             * can -not- show this particular type of autocompletion\r\n             * \r\n             * @property autocompletions.variableNames.handlers.invalidPosition\r\n             * @type function\r\n             * @default null\r\n             */\r\n            invalidPosition : null,\r\n            /**\r\n             * See http://codemirror.net/doc/manual.html#addon_show-hint\r\n             * \r\n             * @property autocompletions.variableNames.handlers.shown\r\n             * @type function\r\n             * @default null\r\n             */\r\n            shown : null,\r\n            /**\r\n             * See http://codemirror.net/doc/manual.html#addon_show-hint\r\n             * \r\n             * @property autocompletions.variableNames.handlers.select\r\n             * @type function\r\n             * @default null\r\n             */\r\n            select : null,\r\n            /**\r\n             * See http://codemirror.net/doc/manual.html#addon_show-hint\r\n             * \r\n             * @property autocompletions.variableNames.handlers.pick\r\n             * @type function\r\n             * @default null\r\n             */\r\n            pick : null,\r\n            /**\r\n             * See http://codemirror.net/doc/manual.html#addon_show-hint\r\n             * \r\n             * @property autocompletions.variableNames.handlers.close\r\n             * @type function\r\n             * @default null\r\n             */\r\n            close : null,\r\n        }\r\n    };\r\n};\r\n","'use strict';\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\r\n\tutils = require('./utils.js'),\r\n\tyutils = require('yasgui-utils');\r\n/**\r\n * Where the base class only contains functionality related to -all- completions, this class contains some utils used here and there in our autocompletions\r\n */\r\n\r\n\r\n\r\n/**\r\n * Converts rdf:type to http://.../type and converts <http://...> to http://...\r\n * Stores additional info such as the used namespace and prefix in the token object\r\n */\r\nvar preprocessResourceTokenForCompletion = function(yasqe, token) {\r\n\tvar queryPrefixes = yasqe.getPrefixesFromQuery();\r\n\tif (!token.string.indexOf(\"<\") == 0) {\r\n\t\ttoken.tokenPrefix = token.string.substring(0,\ttoken.string.indexOf(\":\") + 1);\r\n\r\n\t\tif (queryPrefixes[token.tokenPrefix.slice(0,-1)] != null) {\r\n\t\t\ttoken.tokenPrefixUri = queryPrefixes[token.tokenPrefix.slice(0,-1)];\r\n\t\t}\r\n\t}\r\n\r\n\ttoken.autocompletionString = token.string.trim();\r\n\tif (!token.string.indexOf(\"<\") == 0 && token.string.indexOf(\":\") > -1) {\r\n\t\t// hmm, the token is prefixed. We still need the complete uri for autocompletions. generate this!\r\n\t\tfor (var prefix in queryPrefixes) {\r\n\t\t\tif (token.string.indexOf(prefix) == 0) {\r\n\t\t\t\ttoken.autocompletionString = queryPrefixes[prefix];\r\n\t\t\t\ttoken.autocompletionString += token.string.substring(prefix.length + 1);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tif (token.autocompletionString.indexOf(\"<\") == 0)\ttoken.autocompletionString = token.autocompletionString.substring(1);\r\n\tif (token.autocompletionString.indexOf(\">\", token.length - 1) !== -1) token.autocompletionString = token.autocompletionString.substring(0,\ttoken.autocompletionString.length - 1);\r\n\treturn token;\r\n};\r\n\r\nvar postprocessResourceTokenForCompletion = function(yasqe, token, suggestedString) {\r\n\tif (token.tokenPrefix && token.autocompletionString && token.tokenPrefixUri) {\r\n\t\t// we need to get the suggested string back to prefixed form\r\n\t\tsuggestedString = token.tokenPrefix + suggestedString.substring(token.tokenPrefixUri.length);\r\n\t} else {\r\n\t\t// it is a regular uri. add '<' and '>' to string\r\n\t\tsuggestedString = \"<\" + suggestedString + \">\";\r\n\t}\r\n\treturn suggestedString;\r\n};\r\n\r\nvar fetchFromLov = function(yasqe, completer, token, callback) {\r\n\tif (!token || !token.string || token.string.trim().length == 0) {\r\n\t\tyasqe.autocompleters.notifications.getEl(completer)\r\n\t\t\t.empty()\r\n\t\t\t.append(\"Nothing to autocomplete yet!\");\r\n\t\treturn false;\r\n\t}\r\n\tvar maxResults = 50;\r\n\r\n\tvar args = {\r\n\t\tq : token.autocompletionString,\r\n\t\tpage : 1\r\n\t};\r\n\tif (completer.name == \"classes\") {\r\n\t\targs.type = \"class\";\r\n\t} else {\r\n\t\targs.type = \"property\";\r\n\t}\r\n\tvar results = [];\r\n\tvar url = \"\";\r\n\tvar updateUrl = function() {\r\n\t\turl = \"http://lov.okfn.org/dataset/lov/api/v2/autocomplete/terms?\"\r\n\t\t\t\t+ $.param(args);\r\n\t};\r\n\tupdateUrl();\r\n\tvar increasePage = function() {\r\n\t\targs.page++;\r\n\t\tupdateUrl();\r\n\t};\r\n\tvar doRequests = function() {\r\n\t\t$.get(\r\n\t\t\t\turl,\r\n\t\t\t\tfunction(data) {\r\n\t\t\t\t\tfor (var i = 0; i < data.results.length; i++) {\r\n\t\t\t\t\t\tif ($.isArray(data.results[i].uri) && data.results[i].uri.length > 0) {\r\n\t\t\t\t\t\t\tresults.push(data.results[i].uri[0]);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tresults.push(data.results[i].uri);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (results.length < data.total_results\r\n\t\t\t\t\t\t\t&& results.length < maxResults) {\r\n\t\t\t\t\t\tincreasePage();\r\n\t\t\t\t\t\tdoRequests();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t//if notification bar is there, show feedback, or close\r\n\t\t\t\t\t\tif (results.length > 0) {\r\n\t\t\t\t\t\t\tyasqe.autocompleters.notifications.hide(yasqe, completer)\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tyasqe.autocompleters.notifications.getEl(completer).text(\"0 matches found...\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcallback(results);\r\n\t\t\t\t\t\t// requests done! Don't call this function again\r\n\t\t\t\t\t}\r\n\t\t\t\t}).fail(function(jqXHR, textStatus, errorThrown) {\r\n\t\t\t\t\tyasqe.autocompleters.notifications.getEl(completer)\r\n\t\t\t\t\t\t.empty()\r\n\t\t\t\t\t\t.append(\"Failed fetching suggestions..\");\r\n\t\t\t\t\t\r\n\t\t});\r\n\t};\r\n\t//if notification bar is there, show a loader\r\n\tyasqe.autocompleters.notifications.getEl(completer)\r\n\t\t.empty()\r\n\t\t.append($(\"<span>Fetchting autocompletions &nbsp;</span>\"))\r\n\t\t.append($(yutils.svg.getElement(require('../imgs.js').loader)).addClass(\"notificationLoader\"));\r\n\tdoRequests();\r\n};\r\n\r\n\r\n\r\nmodule.exports = {\r\n\tfetchFromLov: fetchFromLov,\r\n\tpreprocessResourceTokenForCompletion: preprocessResourceTokenForCompletion,\r\n\tpostprocessResourceTokenForCompletion: postprocessResourceTokenForCompletion,\r\n};","'use strict';\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\nmodule.exports = function(yasqe) {\r\n\treturn {\r\n\t\tisValidCompletionPosition : function() {\r\n\t\t\tvar token = yasqe.getTokenAt(yasqe.getCursor());\r\n\t\t\tif (token.type != \"ws\") {\r\n\t\t\t\ttoken = yasqe.getCompleteToken(token);\r\n\t\t\t\tif (token && token.string.indexOf(\"?\") == 0) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t},\r\n\t\tget : function(token) {\r\n\t\t\tif (token.trim().length == 0) return [];//nothing to autocomplete\r\n\t\t\tvar distinctVars = {};\r\n\t\t\t//do this outside of codemirror. I expect jquery to be faster here (just finding dom elements with classnames)\r\n\t\t\t$(yasqe.getWrapperElement()).find(\".cm-atom\").each(function() {\r\n\t\t\t\tvar variable = this.innerHTML;\r\n\t\t\t\tif (variable.indexOf(\"?\") == 0) {\r\n\t\t\t\t\t//ok, lets check if the next element in the div is an atom as well. In that case, they belong together (may happen sometimes when query is not syntactically valid)\r\n\t\t\t\t\tvar nextEl = $(this).next();\r\n\t\t\t\t\tvar nextElClass = nextEl.attr('class');\r\n\t\t\t\t\tif (nextElClass && nextEl.attr('class').indexOf(\"cm-atom\") >= 0) {\r\n\t\t\t\t\t\tvariable += nextEl.text();\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t//skip single questionmarks\r\n\t\t\t\t\tif (variable.length <= 1) return;\r\n\t\t\t\t\t\r\n\t\t\t\t\t//it should match our token ofcourse\r\n\t\t\t\t\tif (variable.indexOf(token) !== 0) return;\r\n\t\t\t\t\t\r\n\t\t\t\t\t//skip exact matches\r\n\t\t\t\t\tif (variable == token) return;\r\n\t\t\t\t\t\r\n\t\t\t\t\t//store in map so we have a unique list \r\n\t\t\t\t\tdistinctVars[variable] = true;\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tvar variables = [];\r\n\t\t\tfor (var variable in distinctVars) {\r\n\t\t\t\tvariables.push(variable);\r\n\t\t\t}\r\n\t\t\tvariables.sort();\r\n\t\t\treturn variables;\r\n\t\t},\r\n\t\tasync : false,\r\n\t\tbulk : false,\r\n\t\tautoShow : true,\r\n\t}\r\n};\r\n","/**\r\n * The default options of YASQE (check the CodeMirror documentation for even\r\n * more options, such as disabling line numbers, or changing keyboard shortcut\r\n * keys). Either change the default options by setting YASQE.defaults, or by\r\n * passing your own options as second argument to the YASQE constructor\r\n */\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\r\n\tYASQE = require('./main.js');\r\nYASQE.defaults = $.extend(true, {}, YASQE.defaults, {\r\n\t\tmode : \"sparql11\",\r\n\t\t/**\r\n\t\t * Query string\r\n\t\t */\r\n\t\tvalue : \"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\\nSELECT * WHERE {\\n  ?sub ?pred ?obj .\\n} \\nLIMIT 10\",\r\n\t\thighlightSelectionMatches : {\r\n\t\t\tshowToken : /\\w/\r\n\t\t},\r\n\t\ttabMode : \"indent\",\r\n        autoCloseBrackets: true,\r\n\t\tlineNumbers : true,\r\n\t    lineWrapping: true,\r\n\t    \r\n\t    foldGutter: {rangeFinder:YASQE.fold.brace },\r\n\t    gutters: [ \"gutterErrorBar\", \"CodeMirror-linenumbers\", \"CodeMirror-foldgutter\"],\r\n//\t\t\t    cell.code_mirror.setOption('foldGutter',{rangeFinder: new CodeMirror.fold.combine(CodeMirror.fold.firstline, CodeMirror.fold.brace) }); \r\n\t\tmatchBrackets : true,\r\n\t\tfixedGutter : true,\r\n\t\tsyntaxErrorCheck: true,\r\n\t\t/**\r\n\t\t * Extra shortcut keys. Check the CodeMirror manual on how to add your own\r\n\t\t * \r\n\t\t * @property extraKeys\r\n\t\t * @type object\r\n\t\t */\r\n\t\textraKeys : {\r\n//\t\t\t\t\t\"Ctrl-Space\" : function(yasqe) {\r\n//\t\t\t\t\t\tYASQE.autoComplete(yasqe);\r\n//\t\t\t\t\t},\r\n\t\t\t\"Ctrl-Space\" : YASQE.autoComplete,\r\n\t\t\t\r\n\t\t\t\"Cmd-Space\" : YASQE.autoComplete,\r\n\t\t\t\"Ctrl-D\" : YASQE.deleteLine,\r\n\t\t\t\"Ctrl-K\" : YASQE.deleteLine,\r\n\t\t\t\"Cmd-D\" : YASQE.deleteLine,\r\n\t\t\t\"Cmd-K\" : YASQE.deleteLine,\r\n\t\t\t\"Ctrl-/\" : YASQE.commentLines,\r\n\t\t\t\"Cmd-/\" : YASQE.commentLines,\r\n\t\t\t\"Ctrl-Alt-Down\" : YASQE.copyLineDown,\r\n\t\t\t\"Ctrl-Alt-Up\" : YASQE.copyLineUp,\r\n\t\t\t\"Cmd-Alt-Down\" : YASQE.copyLineDown,\r\n\t\t\t\"Cmd-Alt-Up\" : YASQE.copyLineUp,\r\n\t\t\t\"Shift-Ctrl-F\" : YASQE.doAutoFormat,\r\n\t\t\t\"Shift-Cmd-F\" : YASQE.doAutoFormat,\r\n\t\t\t\"Ctrl-]\" : YASQE.indentMore,\r\n\t\t\t\"Cmd-]\" : YASQE.indentMore,\r\n\t\t\t\"Ctrl-[\" : YASQE.indentLess,\r\n\t\t\t\"Cmd-[\" : YASQE.indentLess,\r\n\t\t\t\"Ctrl-S\" : YASQE.storeQuery,\r\n\t\t\t\"Cmd-S\" : YASQE.storeQuery,\r\n\t\t\t\"Ctrl-Enter\" : YASQE.executeQuery,\r\n\t\t\t\"Cmd-Enter\" : YASQE.executeQuery,\r\n\t\t\t\"F11\": function(yasqe) {\r\n\t\t          yasqe.setOption(\"fullScreen\", !yasqe.getOption(\"fullScreen\"));\r\n\t        },\r\n\t        \"Esc\": function(yasqe) {\r\n\t          if (yasqe.getOption(\"fullScreen\")) yasqe.setOption(\"fullScreen\", false);\r\n\t        }\r\n\t\t},\r\n\t\tcursorHeight : 0.9,\r\n\r\n\t\t\r\n\t\t/**\r\n\t\t * Show a button with which users can create a link to this query. Set this value to null to disable this functionality.\r\n\t\t * By default, this feature is enabled, and the only the query value is appended to the link.\r\n\t\t * ps. This function should return an object which is parseable by jQuery.param (http://api.jquery.com/jQuery.param/)\r\n\t\t */\r\n\t\tcreateShareLink: YASQE.createShareLink,\r\n\t\t\r\n\t\t/**\r\n\t\t * Consume links shared by others, by checking the url for arguments coming from a query link. Defaults by only checking the 'query=' argument in the url\r\n\t\t */\r\n\t\tconsumeShareLink: YASQE.consumeShareLink,\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * Change persistency settings for the YASQE query value. Setting the values\r\n\t\t * to null, will disable persistancy: nothing is stored between browser\r\n\t\t * sessions Setting the values to a string (or a function which returns a\r\n\t\t * string), will store the query in localstorage using the specified string.\r\n\t\t * By default, the ID is dynamically generated using the closest dom ID, to avoid collissions when using multiple YASQE items on one\r\n\t\t * page\r\n\t\t * \r\n\t\t * @type function|string\r\n\t\t */\r\n\t\tpersistent : function(yasqe) {\r\n\t\t\treturn \"yasqe_\" + $(yasqe.getWrapperElement()).closest('[id]').attr('id') + \"_queryVal\";\r\n\t\t},\r\n\r\n\t\t\r\n\t\t/**\r\n\t\t * Settings for querying sparql endpoints\r\n\t\t */\r\n\t\tsparql : {\r\n\t\t\tshowQueryButton: false,\r\n\t\t\t\r\n\t\t\t/**f\r\n\t\t\t * Endpoint to query\r\n\t\t\t * \r\n\t\t\t * @property sparql.endpoint\r\n\t\t\t * @type String|function\r\n\t\t\t */\r\n\t\t\tendpoint : \"http://dbpedia.org/sparql\",\r\n\t\t\t/**\r\n\t\t\t * Request method via which to access SPARQL endpoint\r\n\t\t\t * \r\n\t\t\t * @property sparql.requestMethod\r\n\t\t\t * @type String|function\r\n\t\t\t */\r\n\t\t\trequestMethod : \"POST\",\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * @type String|function\r\n\t\t\t */\r\n\t\t\tacceptHeaderGraph: \"text/turtle,*/*;q=0.9\",\r\n\t\t\t/**\r\n\t\t\t * @type String|function\r\n\t\t\t */\r\n\t\t\tacceptHeaderSelect: \"application/sparql-results+json,*/*;q=0.9\",\r\n\t\t\t/**\r\n\t\t\t * @type String|function\r\n\t\t\t */\r\n\t\t\tacceptHeaderUpdate: \"text/plain,*/*;q=0.9\",\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Named graphs to query.\r\n\t\t\t */\r\n\t\t\tnamedGraphs : [],\r\n\t\t\t/**\r\n\t\t\t * Default graphs to query.\r\n\t\t\t */\r\n\t\t\tdefaultGraphs : [],\r\n\r\n\t\t\t/**\r\n\t\t\t * Additional request arguments. Add them in the form: {name: \"name\", value: \"value\"}\r\n\t\t\t */\r\n\t\t\targs : [],\r\n\r\n\t\t\t/**\r\n\t\t\t * Additional request headers\r\n\t\t\t */\r\n\t\t\theaders : {},\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Set of ajax callbacks\r\n\t\t\t */\r\n\t\t\tcallbacks : {\r\n\t\t\t\tbeforeSend : null,\r\n\t\t\t\tcomplete : null,\r\n\t\t\t\terror : null,\r\n\t\t\t\tsuccess : null\r\n\t\t\t},\r\n\t\t\thandlers: {}//keep here for backwards compatability\r\n\t\t},\r\n\t});\r\n","'use strict';\r\nmodule.exports = {\r\n\tloader: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\" width=\"100%\" height=\"100%\" fill=\"black\">  <circle cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(45 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.125s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(90 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.25s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(135 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.375s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(180 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.5s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(225 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.625s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(270 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.75s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(315 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.875s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(180 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.5s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle></svg>',\r\n\tquery: '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" x=\"0px\" y=\"0px\" width=\"100%\" height=\"100%\" viewBox=\"0 0 80 80\" enable-background=\"new 0 0 80 80\" xml:space=\"preserve\"><g ></g><g >\t<path d=\"M64.622,2.411H14.995c-6.627,0-12,5.373-12,12v49.897c0,6.627,5.373,12,12,12h49.627c6.627,0,12-5.373,12-12V14.411   C76.622,7.783,71.249,2.411,64.622,2.411z M24.125,63.906V15.093L61,39.168L24.125,63.906z\"/></g></svg>',\r\n\tqueryInvalid: '<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"   x=\"0px\"   y=\"0px\"   width=\"100%\"   height=\"100%\"   viewBox=\"0 0 73.627 73.897\"   enable-background=\"new 0 0 80 80\"   xml:space=\"preserve\"      inkscape:version=\"0.48.4 r9939\"   sodipodi:docname=\"warning.svg\"><metadata     ><rdf:RDF><cc:Work         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /></cc:Work></rdf:RDF></metadata><defs      /><sodipodi:namedview     pagecolor=\"#ffffff\"     bordercolor=\"#666666\"     borderopacity=\"1\"     objecttolerance=\"10\"     gridtolerance=\"10\"     guidetolerance=\"10\"     inkscape:pageopacity=\"0\"     inkscape:pageshadow=\"2\"     inkscape:window-width=\"1855\"     inkscape:window-height=\"1056\"          showgrid=\"false\"     inkscape:zoom=\"3.1936344\"     inkscape:cx=\"36.8135\"     inkscape:cy=\"36.9485\"     inkscape:window-x=\"2625\"     inkscape:window-y=\"24\"     inkscape:window-maximized=\"1\"     inkscape:current-layer=\"svg2\" /><g     transform=\"translate(-2.995,-2.411)\"      /><g     transform=\"translate(-2.995,-2.411)\"     ><path       d=\"M 64.622,2.411 H 14.995 c -6.627,0 -12,5.373 -12,12 v 49.897 c 0,6.627 5.373,12 12,12 h 49.627 c 6.627,0 12,-5.373 12,-12 V 14.411 c 0,-6.628 -5.373,-12 -12,-12 z M 24.125,63.906 V 15.093 L 61,39.168 24.125,63.906 z\"       inkscape:connector-curvature=\"0\"        /></g><path     d=\"M 66.129381,65.903784 H 49.769875 c -1.64721,0 -2.889385,-0.581146 -3.498678,-1.63595 -0.609293,-1.055608 -0.491079,-2.422161 0.332391,-3.848223 l 8.179753,-14.167069 c 0.822934,-1.42633 1.9477,-2.211737 3.166018,-2.211737 1.218319,0 2.343086,0.785407 3.166019,2.211737 l 8.179751,14.167069 c 0.823472,1.426062 0.941686,2.792615 0.33239,3.848223 -0.609023,1.054804 -1.851197,1.63595 -3.498138,1.63595 z M 59.618815,60.91766 c 0,-0.850276 -0.68944,-1.539719 -1.539717,-1.539719 -0.850276,0 -1.539718,0.689443 -1.539718,1.539719 0,0.850277 0.689442,1.539718 1.539718,1.539718 0.850277,0 1.539717,-0.689441 1.539717,-1.539718 z m 0.04155,-9.265919 c 0,-0.873061 -0.707939,-1.580998 -1.580999,-1.580998 -0.873061,0 -1.580999,0.707937 -1.580999,1.580998 l 0.373403,5.610965 h 0.0051 c 0.05415,0.619747 0.568548,1.10761 1.202504,1.10761 0.586239,0 1.075443,-0.415756 1.188563,-0.968489 0.0092,-0.04476 0.0099,-0.09248 0.01392,-0.138854 h 0.01072 l 0.367776,-5.611232 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#aa8800\" /></svg>',\r\n\tdownload: '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" baseProfile=\"tiny\" x=\"0px\" y=\"0px\" width=\"100%\" height=\"100%\" viewBox=\"0 0 100 100\" xml:space=\"preserve\"><g ></g><g >\t<path fill-rule=\"evenodd\" fill=\"#000000\" d=\"M88,84v-2c0-2.961-0.859-4-4-4H16c-2.961,0-4,0.98-4,4v2c0,3.102,1.039,4,4,4h68   C87.02,88,88,87.039,88,84z M58,12H42c-5,0-6,0.941-6,6v22H16l34,34l34-34H64V18C64,12.941,62.939,12,58,12z\"/></g></svg>',\r\n\tshare: '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\"  x=\"0px\" y=\"0px\" width=\"100%\" height=\"100%\" viewBox=\"0 0 100 100\" style=\"enable-background:new 0 0 100 100;\" xml:space=\"preserve\"><path d=\"M36.764,50c0,0.308-0.07,0.598-0.088,0.905l32.247,16.119c2.76-2.338,6.293-3.797,10.195-3.797  C87.89,63.228,95,70.338,95,79.109C95,87.89,87.89,95,79.118,95c-8.78,0-15.882-7.11-15.882-15.891c0-0.316,0.07-0.598,0.088-0.905  L31.077,62.085c-2.769,2.329-6.293,3.788-10.195,3.788C12.11,65.873,5,58.771,5,50c0-8.78,7.11-15.891,15.882-15.891  c3.902,0,7.427,1.468,10.195,3.797l32.247-16.119c-0.018-0.308-0.088-0.598-0.088-0.914C63.236,12.11,70.338,5,79.118,5  C87.89,5,95,12.11,95,20.873c0,8.78-7.11,15.891-15.882,15.891c-3.911,0-7.436-1.468-10.195-3.806L36.676,49.086  C36.693,49.394,36.764,49.684,36.764,50z\"/></svg>',\r\n\twarning: '<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"   x=\"0px\"   y=\"0px\"   viewBox=\"0 0 66.399998 66.399998\"   enable-background=\"new 0 0 69.3 69.3\"   xml:space=\"preserve\"   height=\"100%\"   width=\"100%\"   inkscape:version=\"0.48.4 r9939\"   ><g      transform=\"translate(-1.5,-1.5)\"     style=\"fill:#ff0000\"><path       d=\"M 34.7,1.5 C 16.4,1.5 1.5,16.4 1.5,34.7 1.5,53 16.4,67.9 34.7,67.9 53,67.9 67.9,53 67.9,34.7 67.9,16.4 53,1.5 34.7,1.5 z m 0,59.4 C 20.2,60.9 8.5,49.1 8.5,34.7 8.5,20.2 20.3,8.5 34.7,8.5 c 14.4,0 26.2,11.8 26.2,26.2 0,14.4 -11.8,26.2 -26.2,26.2 z\"      inkscape:connector-curvature=\"0\"       style=\"fill:#ff0000\" /><path       d=\"m 34.6,47.1 c -1.4,0 -2.5,0.5 -3.5,1.5 -0.9,1 -1.4,2.2 -1.4,3.6 0,1.6 0.5,2.8 1.5,3.8 1,0.9 2.1,1.3 3.4,1.3 1.3,0 2.4,-0.5 3.4,-1.4 1,-0.9 1.5,-2.2 1.5,-3.7 0,-1.4 -0.5,-2.6 -1.4,-3.6 -0.9,-1 -2.1,-1.5 -3.5,-1.5 z\"       inkscape:connector-curvature=\"0\"       style=\"fill:#ff0000\" /><path       d=\"m 34.8,13.9 c -1.5,0 -2.8,0.5 -3.7,1.6 -0.9,1 -1.4,2.4 -1.4,4.2 0,1.1 0.1,2.9 0.2,5.6 l 0.8,13.1 c 0.2,1.8 0.4,3.2 0.9,4.1 0.5,1.2 1.5,1.8 2.9,1.8 1.3,0 2.3,-0.7 2.9,-1.9 0.5,-1 0.7,-2.3 0.9,-4 L 39.4,25 c 0.1,-1.3 0.2,-2.5 0.2,-3.8 0,-2.2 -0.3,-3.9 -0.8,-5.1 -0.5,-1 -1.6,-2.2 -4,-2.2 z\"       inkscape:connector-curvature=\"0\"       style=\"fill:#ff0000\" /></g></svg>',\r\n\tfullscreen: '<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"      x=\"0px\"   y=\"0px\"   width=\"100%\"   height=\"100%\"   viewBox=\"5 -10 74.074074 100\"   enable-background=\"new 0 0 100 100\"   xml:space=\"preserve\"   inkscape:version=\"0.48.4 r9939\"   sodipodi:docname=\"noun_2186_cc.svg\"><metadata     ><rdf:RDF><cc:Work         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /></cc:Work></rdf:RDF></metadata><defs      /><sodipodi:namedview     pagecolor=\"#ffffff\"     bordercolor=\"#666666\"     borderopacity=\"1\"     objecttolerance=\"10\"     gridtolerance=\"10\"     guidetolerance=\"10\"     inkscape:pageopacity=\"0\"     inkscape:pageshadow=\"2\"     inkscape:window-width=\"640\"     inkscape:window-height=\"480\"          showgrid=\"false\"     fit-margin-top=\"0\"     fit-margin-left=\"0\"     fit-margin-right=\"0\"     fit-margin-bottom=\"0\"     inkscape:zoom=\"2.36\"     inkscape:cx=\"44.101509\"     inkscape:cy=\"31.481481\"     inkscape:window-x=\"65\"     inkscape:window-y=\"24\"     inkscape:window-maximized=\"0\"     inkscape:current-layer=\"Layer_1\" /><path     d=\"m -7.962963,-10 v 38.889 l 16.667,-16.667 16.667,16.667 5.555,-5.555 -16.667,-16.667 16.667,-16.667 h -38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 92.037037,-10 v 38.889 l -16.667,-16.667 -16.666,16.667 -5.556,-5.555 16.666,-16.667 -16.666,-16.667 h 38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"M -7.962963,90 V 51.111 l 16.667,16.666 16.667,-16.666 5.555,5.556 -16.667,16.666 16.667,16.667 h -38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"M 92.037037,90 V 51.111 l -16.667,16.666 -16.666,-16.666 -5.556,5.556 16.666,16.666 -16.666,16.667 h 38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /></svg>',\r\n\tsmallscreen: '<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"      x=\"0px\"   y=\"0px\"   width=\"100%\"   height=\"100%\"   viewBox=\"5 -10 74.074074 100\"   enable-background=\"new 0 0 100 100\"   xml:space=\"preserve\"   inkscape:version=\"0.48.4 r9939\"   sodipodi:docname=\"noun_2186_cc.svg\"><metadata     ><rdf:RDF><cc:Work         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /></cc:Work></rdf:RDF></metadata><defs      /><sodipodi:namedview     pagecolor=\"#ffffff\"     bordercolor=\"#666666\"     borderopacity=\"1\"     objecttolerance=\"10\"     gridtolerance=\"10\"     guidetolerance=\"10\"     inkscape:pageopacity=\"0\"     inkscape:pageshadow=\"2\"     inkscape:window-width=\"1855\"     inkscape:window-height=\"1056\"          showgrid=\"false\"     fit-margin-top=\"0\"     fit-margin-left=\"0\"     fit-margin-right=\"0\"     fit-margin-bottom=\"0\"     inkscape:zoom=\"2.36\"     inkscape:cx=\"44.101509\"     inkscape:cy=\"31.481481\"     inkscape:window-x=\"65\"     inkscape:window-y=\"24\"     inkscape:window-maximized=\"1\"     inkscape:current-layer=\"Layer_1\" /><path     d=\"m 30.926037,28.889 0,-38.889 -16.667,16.667 -16.667,-16.667 -5.555,5.555 16.667,16.667 -16.667,16.667 38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 53.148037,28.889 0,-38.889 16.667,16.667 16.666,-16.667 5.556,5.555 -16.666,16.667 16.666,16.667 -38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 30.926037,51.111 0,38.889 -16.667,-16.666 -16.667,16.666 -5.555,-5.556 16.667,-16.666 -16.667,-16.667 38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 53.148037,51.111 0,38.889 16.667,-16.666 16.666,16.666 5.556,-5.556 -16.666,-16.666 16.666,-16.667 -38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /></svg>',\r\n};","'use strict';\r\n//make sure any console statements\r\nwindow.console = window.console || {\"log\":function(){}};\r\n\r\n/**\r\n * Load libraries\r\n */\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\r\n\tCodeMirror = (function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})(),\r\n\tutils = require('./utils.js'),\r\n\tyutils = require('yasgui-utils'),\r\n\timgs = require('./imgs.js');\r\n\r\nrequire(\"../lib/deparam.js\");\r\nrequire('codemirror/addon/fold/foldcode.js');\r\nrequire('codemirror/addon/fold/foldgutter.js');\r\nrequire('codemirror/addon/fold/xml-fold.js');\r\nrequire('codemirror/addon/fold/brace-fold.js');\r\nrequire('codemirror/addon/hint/show-hint.js');\r\nrequire('codemirror/addon/search/searchcursor.js');\r\nrequire('./addon/edit/closebrackets.js')\r\nrequire('codemirror/addon/edit/matchbrackets.js');\r\nrequire('codemirror/addon/runmode/runmode.js');\r\nrequire('codemirror/addon/display/fullscreen.js');\r\nrequire('../lib/flint.js');\r\n\r\n\r\n\r\n/**\r\n * Main YASQE constructor. Pass a DOM element as argument to append the editor to, and (optionally) pass along config settings (see the YASQE.defaults object below, as well as the regular CodeMirror documentation, for more information on configurability)\r\n * \r\n * @constructor\r\n * @param {DOM-Element} parent element to append editor to.\r\n * @param {object} settings\r\n * @class YASQE\r\n * @return {doc} YASQE document\r\n */\r\nvar root = module.exports = function(parent, config) {\r\n\tvar rootEl = $(\"<div>\", {class:'yasqe'}).appendTo($(parent));\r\n\tconfig = extendConfig(config);\r\n\tvar yasqe = extendCmInstance(CodeMirror(rootEl[0], config));\r\n\tpostProcessCmElement(yasqe);\r\n\treturn yasqe;\r\n};\r\n\r\n/**\r\n * Extend config object, which we will pass on to the CM constructor later on.\r\n * Need this, to make sure our own 'onBlur' etc events do not get overwritten by\r\n * people who add their own onblur events to the config Additionally, need this\r\n * to include the CM defaults ourselves. CodeMirror has a method for including\r\n * defaults, but we can't rely on that one: it assumes flat config object, where\r\n * we have nested objects (e.g. the persistency option)\r\n * \r\n * @private\r\n */\r\nvar extendConfig = function(config) {\r\n\tvar extendedConfig = $.extend(true, {}, root.defaults, config);\r\n\t// I know, codemirror deals with  default options as well. \r\n\t//However, it does not do this recursively (i.e. the persistency option)\r\n\t\r\n\treturn extendedConfig;\r\n};\r\n/**\r\n * Add extra functions to the CM document (i.e. the codemirror instantiated\r\n * object)\r\n * \r\n * @private\r\n */\r\nvar extendCmInstance = function(yasqe) {\r\n\t//instantiate autocompleters\r\n\tyasqe.autocompleters = require('./autocompleters/autocompleterBase.js')(root, yasqe);\r\n\tif (yasqe.options.autocompleters) {\r\n\t\tyasqe.options.autocompleters.forEach(function(name) {\r\n\t\t\tif (root.Autocompleters[name]) yasqe.autocompleters.init(name,root.Autocompleters[name]);\r\n\t\t})\r\n\t}\r\n\t\r\n\tyasqe.getCompleteToken = function(token, cur) {\r\n\t\treturn require('./tokenUtils.js').getCompleteToken(yasqe, token, cur);\r\n\t};\r\n\tyasqe.getPreviousNonWsToken = function(line, token) {\r\n\t\treturn require('./tokenUtils.js').getPreviousNonWsToken(yasqe, line, token);\r\n\t};\r\n\tyasqe.getNextNonWsToken = function(lineNumber, charNumber) {\r\n\t\treturn require('./tokenUtils.js').getNextNonWsToken(yasqe, lineNumber, charNumber);\r\n\t};\r\n\r\n\t/**\r\n\t * Execute query. Pass a callback function, or a configuration object (see\r\n\t * default settings below for possible values) I.e., you can change the\r\n\t * query configuration by either changing the default settings, changing the\r\n\t * settings of this document, or by passing query settings to this function\r\n\t * \r\n\t * @method doc.query\r\n\t * @param function|object\r\n\t */\r\n\tyasqe.query = function(callbackOrConfig) {\r\n\t\troot.executeQuery(yasqe, callbackOrConfig);\r\n\t};\r\n\t\r\n\tyasqe.getUrlArguments = function(config) {\r\n\t\treturn root.getUrlArguments(yasqe, config);\r\n\t};\r\n\t\r\n\t/**\r\n\t * Fetch defined prefixes from query string\r\n\t * \r\n\t * @method doc.getPrefixesFromQuery\r\n\t * @return object\r\n\t */\r\n\tyasqe.getPrefixesFromQuery = function() {\r\n\t\treturn require('./prefixUtils.js').getPrefixesFromQuery(yasqe);\r\n\t};\r\n\t\r\n\tyasqe.addPrefixes = function(prefixes) {\r\n\t\treturn require('./prefixUtils.js').addPrefixes(yasqe, prefixes);\r\n\t};\r\n\tyasqe.removePrefixes = function(prefixes) {\r\n\t\treturn require('./prefixUtils.js').removePrefixes(yasqe, prefixes);\r\n\t};\r\n\t\r\n\tyasqe.getValueWithoutComments = function() {\r\n\t\tvar cleanedQuery = \"\";\r\n\t\troot.runMode(yasqe.getValue(), \"sparql11\", function(stringVal, className) {\r\n\t\t\tif (className != \"comment\") {\r\n\t\t\t\tcleanedQuery += stringVal;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn cleanedQuery;\r\n\t};\r\n\t/**\r\n\t * Fetch the query type (e.g., SELECT||DESCRIBE||INSERT||DELETE||ASK||CONSTRUCT)\r\n\t * \r\n\t * @method doc.getQueryType\r\n\t * @return string\r\n\t * \r\n\t */\r\n\t yasqe.getQueryType = function() {\r\n\t\t return yasqe.queryType;\r\n\t };\r\n\t/**\r\n\t * Fetch the query mode: 'query' or 'update'\r\n\t * \r\n\t * @method doc.getQueryMode\r\n\t * @return string\r\n\t * \r\n\t */\r\n\t yasqe.getQueryMode = function() {\r\n\t\t var type = yasqe.getQueryType();\r\n\t\t if (type==\"INSERT\" || type==\"DELETE\" || type==\"LOAD\" || type==\"CLEAR\" || type==\"CREATE\" || type==\"DROP\" || type==\"COPY\" || type==\"MOVE\" || type==\"ADD\") {\r\n\t\t\t return \"update\";\r\n\t\t } else {\r\n\t\t\t return \"query\";\r\n\t\t }\r\n\t\t\t\t\r\n\t };\r\n\t\r\n\tyasqe.setCheckSyntaxErrors = function(isEnabled) {\r\n\t\tyasqe.options.syntaxErrorCheck = isEnabled;\r\n\t\tcheckSyntax(yasqe);\r\n\t};\r\n\t\r\n\tyasqe.enableCompleter = function(name) {\r\n\t\taddCompleterToSettings(yasqe.options, name);\r\n\t\tif (root.Autocompleters[name]) yasqe.autocompleters.init(name,root.Autocompleters[name]);\r\n\t};\r\n\tyasqe.disableCompleter = function(name) {\r\n\t\tremoveCompleterFromSettings(yasqe.options, name);\r\n\t};\r\n\treturn yasqe;\r\n};\r\n\r\nvar addCompleterToSettings = function(settings, name) {\r\n\tif (!settings.autocompleters) settings.autocompleters = [];\r\n\tsettings.autocompleters.push(name);\r\n};\r\nvar removeCompleterFromSettings = function(settings, name) {\r\n\tif (typeof settings.autocompleters == \"object\") {\r\n\t\tvar index = $.inArray(name, settings.autocompleters);\r\n\t\tif (index>=0) {\r\n\t\t\tsettings.autocompleters.splice(index, 1);\r\n\t\t\tremoveCompleterFromSettings(settings, name);//just in case. suppose 1 completer is listed twice\r\n\t\t}\r\n\t}\r\n};\r\nvar postProcessCmElement = function(yasqe) {\r\n\t/**\r\n\t * Set doc value\r\n\t */\r\n\tvar storageId = utils.getPersistencyId(yasqe, yasqe.options.persistent);\r\n\tif (storageId) {\r\n\t\tvar valueFromStorage = yutils.storage.get(storageId);\r\n\t\tif (valueFromStorage)\r\n\t\t\tyasqe.setValue(valueFromStorage);\r\n\t}\r\n\t\r\n\troot.drawButtons(yasqe);\r\n\r\n\t/**\r\n\t * Add event handlers\r\n\t */\r\n\tyasqe.on('blur', function(yasqe, eventInfo) {\r\n\t\troot.storeQuery(yasqe);\r\n\t});\r\n\tyasqe.on('change', function(yasqe, eventInfo) {\r\n\t\tcheckSyntax(yasqe);\r\n\t\troot.updateQueryButton(yasqe);\r\n\t\troot.positionButtons(yasqe);\r\n\t});\r\n\tyasqe.on('changes', function() {\r\n\t\t//e.g. on paste\r\n\t\tcheckSyntax(yasqe);\r\n\t\troot.updateQueryButton(yasqe);\r\n\t\troot.positionButtons(yasqe);\r\n\t});\r\n\t\r\n\tyasqe.on('cursorActivity', function(yasqe, eventInfo) {\r\n\t\tupdateButtonsTransparency(yasqe);\r\n\t});\r\n\tyasqe.prevQueryValid = false;\r\n\tcheckSyntax(yasqe);// on first load, check as well (our stored or default query might be incorrect)\r\n\troot.positionButtons(yasqe);\r\n\t\r\n\t/**\r\n\t * check url args and modify yasqe settings if needed\r\n\t */\r\n\tif (yasqe.options.consumeShareLink) {\r\n\t\tvar urlParams = $.deparam(window.location.search.substring(1));\r\n\t\tyasqe.options.consumeShareLink(yasqe, urlParams);\r\n\t}\r\n};\r\n\r\n\r\n\r\n\r\n/**\r\n * Update transparency of buttons. Increase transparency when cursor is below buttons\r\n */\r\n\r\nvar updateButtonsTransparency = function(yasqe) {\r\n\tyasqe.cursor = $(\".CodeMirror-cursor\");\r\n\tif (yasqe.buttons && yasqe.buttons.is(\":visible\") && yasqe.cursor.length > 0) {\r\n\t\tif (utils.elementsOverlap(yasqe.cursor, yasqe.buttons)) {\r\n\t\t\tyasqe.buttons.find(\"svg\").attr(\"opacity\", \"0.2\");\r\n\t\t} else {\r\n\t\t\tyasqe.buttons.find(\"svg\").attr(\"opacity\", \"1.0\");\r\n\t\t}\r\n\t}\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar clearError = null;\r\nvar checkSyntax = function(yasqe, deepcheck) {\r\n\t\r\n\tyasqe.queryValid = true;\r\n\r\n\tyasqe.clearGutter(\"gutterErrorBar\");\r\n\t\r\n\tvar state = null;\r\n\tfor (var l = 0; l < yasqe.lineCount(); ++l) {\r\n\t\tvar precise = false;\r\n\t\tif (!yasqe.prevQueryValid) {\r\n\t\t\t// we don't want cached information in this case, otherwise the\r\n\t\t\t// previous error sign might still show up,\r\n\t\t\t// even though the syntax error might be gone already\r\n\t\t\tprecise = true;\r\n\t\t}\r\n\t\t\r\n\t\tvar token = yasqe.getTokenAt({\r\n\t\t\tline : l,\r\n\t\t\tch : yasqe.getLine(l).length\r\n\t\t}, precise);\r\n\t\tvar state = token.state;\r\n\t\tyasqe.queryType = state.queryType;\r\n\t\tif (state.OK == false) {\r\n\t\t\tif (!yasqe.options.syntaxErrorCheck) {\r\n\t\t\t\t//the library we use already marks everything as being an error. Overwrite this class attribute.\r\n\t\t\t\t$(yasqe.getWrapperElement).find(\".sp-error\").css(\"color\", \"black\");\r\n\t\t\t\t//we don't want to gutter error, so return\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar warningEl = yutils.svg.getElement(imgs.warning);\r\n\t\t\tif (state.possibleCurrent && state.possibleCurrent.length > 0) {\r\n//\t\t\t\twarningEl.style.zIndex = \"99999999\";\r\n\t\t\t\trequire('./tooltip')(yasqe, warningEl, function() {\r\n\t\t\t\t\tvar expectedEncoded = [];\r\n\t\t\t\t\tstate.possibleCurrent.forEach(function(expected){\r\n\t\t\t\t\t\texpectedEncoded.push(\"<strong style='text-decoration:underline'>\" + $(\"<div/>\").text(expected).html() + \"</strong>\");\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn \"This line is invalid. Expected: \" + expectedEncoded.join(\", \");\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\twarningEl.style.marginTop = \"2px\";\r\n\t\t\twarningEl.style.marginLeft = \"2px\";\r\n\t\t\twarningEl.className = 'parseErrorIcon';\r\n\t\t\tyasqe.setGutterMarker(l, \"gutterErrorBar\", warningEl);\r\n\t\t\t\r\n\t\t\tyasqe.queryValid = false;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tyasqe.prevQueryValid = yasqe.queryValid;\r\n\tif (deepcheck) {\r\n\t\tif (state != null && state.stack != undefined) {\r\n\t\t\tvar stack = state.stack, len = state.stack.length;\r\n\t\t\t// Because incremental parser doesn't receive end-of-input\r\n\t\t\t// it can't clear stack, so we have to check that whatever\r\n\t\t\t// is left on the stack is nillable\r\n\t\t\tif (len > 1)\r\n\t\t\t\tyasqe.queryValid = false;\r\n\t\t\telse if (len == 1) {\r\n\t\t\t\tif (stack[0] != \"solutionModifier\"\r\n\t\t\t\t\t\t&& stack[0] != \"?limitOffsetClauses\"\r\n\t\t\t\t\t\t&& stack[0] != \"?offsetClause\")\r\n\t\t\t\t\tyasqe.queryValid = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n/**\r\n * Static Utils\r\n */\r\n// first take all CodeMirror references and store them in the YASQE object\r\n$.extend(root, CodeMirror);\r\n\r\n\r\n//add registrar for autocompleters\r\nroot.Autocompleters = {};\r\nroot.registerAutocompleter = function(name, constructor) {\r\n\troot.Autocompleters[name] = constructor;\r\n\taddCompleterToSettings(root.defaults, name);\r\n}\r\n\r\nroot.autoComplete = function(yasqe) {\r\n\t//this function gets called when pressing the keyboard shortcut. I.e., autoShow = false\r\n\tyasqe.autocompleters.autoComplete(false);\r\n};\r\n//include the autocompleters we provide out-of-the-box\r\n//root.registerAutocompleter(\"prefixes\", require(\"./autocompleters/prefixes.js\"));\r\nroot.registerAutocompleter(\"sesame-prefixes\", require(\"./autocompleters/sesame-prefixes.js\"));\r\nroot.registerAutocompleter(\"properties\", require(\"./autocompleters/properties.js\"));\r\nroot.registerAutocompleter(\"classes\", require(\"./autocompleters/classes.js\"));\r\nroot.registerAutocompleter(\"standard\", require(\"./autocompleters/standard.js\"));\r\nroot.registerAutocompleter(\"variables\", require(\"./autocompleters/variables.js\"));\r\n\r\n\r\nroot.positionButtons = function(yasqe) {\r\n\tvar scrollBar = $(yasqe.getWrapperElement()).find(\".CodeMirror-vscrollbar\");\r\n\tvar offset = 0;\r\n\tif (scrollBar.is(\":visible\")) {\r\n\t\toffset = scrollBar.outerWidth();\r\n\t}\r\n\tif (yasqe.buttons.is(\":visible\")) yasqe.buttons.css(\"right\", offset + 6);\r\n};\r\n\r\n/**\r\n * Create a share link\r\n * \r\n * @method YASQE.createShareLink\r\n * @param {doc} YASQE document\r\n * @default {query: doc.getValue()}\r\n * @return object\r\n */\r\nroot.createShareLink = function(yasqe) {\r\n\t//extend existing link, so first fetch current arguments\r\n\tvar urlParams = $.deparam(window.location.search.substring(1));\r\n\turlParams['query'] = yasqe.getValue();\r\n\treturn urlParams;\r\n};\r\n\r\n/**\r\n * Consume the share link, by parsing the document URL for possible yasqe arguments, and setting the appropriate values in the YASQE doc\r\n * \r\n * @method YASQE.consumeShareLink\r\n * @param {doc} YASQE document\r\n */\r\nroot.consumeShareLink = function(yasqe, urlParams) {\r\n\tif (urlParams.query) {\r\n\t\tyasqe.setValue(urlParams.query);\r\n\t}\r\n};\r\nroot.drawButtons = function(yasqe) {\r\n\tyasqe.buttons = $(\"<div class='yasqe_buttons'></div>\").appendTo($(yasqe.getWrapperElement()));\r\n\t\r\n\t/**\r\n\t * draw share link button\r\n\t */\r\n\tif (yasqe.options.createShareLink) {\r\n\t\t\r\n\t\tvar svgShare = $(yutils.svg.getElement(imgs.share));\r\n\t\tsvgShare.click(function(event){\r\n\t\t\tevent.stopPropagation();\r\n\t\t\tvar popup = $(\"<div class='yasqe_sharePopup'></div>\").appendTo(yasqe.buttons);\r\n\t\t\t$('html').click(function() {\r\n\t\t\t\tif (popup) popup.remove();\r\n\t\t\t});\r\n\r\n\t\t\tpopup.click(function(event) {\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t});\r\n\t\t\tvar textAreaLink = $(\"<textarea></textarea>\").val(location.protocol + '//' + location.host + location.pathname + \"?\" + $.param(yasqe.options.createShareLink(yasqe)));\r\n\t\t\t\r\n\t\t\ttextAreaLink.focus(function() {\r\n\t\t\t    var $this = $(this);\r\n\t\t\t    $this.select();\r\n\r\n\t\t\t    // Work around Chrome's little problem\r\n\t\t\t    $this.mouseup(function() {\r\n\t\t\t        // Prevent further mouseup intervention\r\n\t\t\t        $this.unbind(\"mouseup\");\r\n\t\t\t        return false;\r\n\t\t\t    });\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tpopup.empty().append(textAreaLink);\r\n\t\t\tvar positions = svgShare.position();\r\n\t\t\tpopup.css(\"top\", (positions.top + svgShare.outerHeight()) + \"px\").css(\"left\", ((positions.left + svgShare.outerWidth()) - popup.outerWidth()) + \"px\");\r\n\t\t})\r\n\t\t.addClass(\"yasqe_share\")\r\n\t\t.attr(\"title\", \"Share your query\")\r\n\t\t.appendTo(yasqe.buttons);\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\t/**\r\n\t * draw fullscreen button\r\n\t */\r\n\t\r\n\tvar toggleFullscreen = $('<div>', {class: 'fullscreenToggleBtns'})\r\n\t\t.append($(yutils.svg.getElement(imgs.fullscreen))\r\n\t\t\t.addClass(\"yasqe_fullscreenBtn\")\r\n\t\t\t.attr(\"title\", \"Set editor full screen\")\r\n\t\t\t.click(function() {\r\n\t\t\t\tyasqe.setOption(\"fullScreen\", true);\r\n\t\t\t}))\r\n\t\t.append($(yutils.svg.getElement(imgs.smallscreen))\r\n\t\t\t.addClass(\"yasqe_smallscreenBtn\")\r\n\t\t\t.attr(\"title\", \"Set editor to normale size\")\r\n\t\t\t.click(function() {\r\n\t\t\t\tyasqe.setOption(\"fullScreen\", false);\r\n\t\t\t}))\r\n\tyasqe.buttons.append(toggleFullscreen);\r\n\t\r\n\t\r\n\tif (yasqe.options.sparql.showQueryButton) {\r\n\t\t$(\"<div>\", {class:'yasqe_queryButton'})\r\n\t\t \t.click(function(){\r\n\t\t \t\tif ($(this).hasClass(\"query_busy\")) {\r\n\t\t \t\t\tif (yasqe.xhr) yasqe.xhr.abort();\r\n\t\t \t\t\troot.updateQueryButton(yasqe);\r\n\t\t \t\t} else {\r\n\t\t \t\t\tyasqe.query();\r\n\t\t \t\t}\r\n\t\t \t})\r\n\t\t \t.appendTo(yasqe.buttons);\r\n\t\troot.updateQueryButton(yasqe);\r\n\t}\r\n\t\r\n};\r\n\r\n\r\nvar queryButtonIds = {\r\n\t\"busy\": \"loader\",\r\n\t\"valid\": \"query\",\r\n\t\"error\": \"queryInvalid\"\r\n};\r\n\r\n/**\r\n * Update the query button depending on current query status. If no query status is passed via the parameter, it auto-detects the current query status\r\n * \r\n * @param {doc} YASQE document\r\n * @param status {string|null, \"busy\"|\"valid\"|\"error\"}\r\n */\r\nroot.updateQueryButton = function(yasqe, status) {\r\n\tvar queryButton = $(yasqe.getWrapperElement()).find(\".yasqe_queryButton\");\r\n\tif (queryButton.length == 0) return;//no query button drawn\r\n\t\r\n\t//detect status\r\n\tif (!status) {\r\n\t\tstatus = \"valid\";\r\n\t\tif (yasqe.queryValid === false) status = \"error\";\r\n\t}\r\n\tif (status != yasqe.queryStatus && (status == \"busy\" || status==\"valid\" || status == \"error\")) {\r\n\t\tqueryButton\r\n\t\t\t.empty()\r\n\t\t\t.removeClass (function (index, classNames) {\r\n\t\t\t\treturn classNames.split(\" \").filter(function(c) {\r\n\t\t\t\t\t//remove classname from previous status\r\n\t\t\t\t    return c.indexOf(\"query_\") == 0;\r\n\t\t\t\t}).join(\" \");\r\n\t\t\t})\r\n\t\t\t.addClass(\"query_\" + status);\r\n\t\tyutils.svg.draw(queryButton, imgs[queryButtonIds[status]]);\r\n\t\tyasqe.queryStatus = status;\r\n\t}\r\n};\r\n/**\r\n * Initialize YASQE from an existing text area (see http://codemirror.net/doc/manual.html#fromTextArea for more info)\r\n * \r\n * @method YASQE.fromTextArea\r\n * @param textArea {DOM element}\r\n * @param config {object}\r\n * @returns {doc} YASQE document\r\n */\r\nroot.fromTextArea = function(textAreaEl, config) {\r\n\tconfig = extendConfig(config);\r\n\t//add yasqe div as parent (needed for styles to be manageable and scoped). \r\n\t//In this case, I -also- put it as parent el of the text area. This is wrapped in a div now\r\n\tvar rootEl = $(\"<div>\", {class:'yasqe'}).insertBefore($(textAreaEl)).append($(textAreaEl));\r\n\tvar yasqe = extendCmInstance(CodeMirror.fromTextArea(textAreaEl, config));\r\n\tpostProcessCmElement(yasqe);\r\n\treturn yasqe;\r\n};\r\n\r\n\r\nroot.storeQuery = function(yasqe) {\r\n\tvar storageId = utils.getPersistencyId(yasqe, yasqe.options.persistent);\r\n\tif (storageId) {\r\n\t\tyutils.storage.set(storageId, yasqe.getValue(), \"month\");\r\n\t}\r\n};\r\nroot.commentLines = function(yasqe) {\r\n\tvar startLine = yasqe.getCursor(true).line;\r\n\tvar endLine = yasqe.getCursor(false).line;\r\n\tvar min = Math.min(startLine, endLine);\r\n\tvar max = Math.max(startLine, endLine);\r\n\t\r\n\t// if all lines start with #, remove this char. Otherwise add this char\r\n\tvar linesAreCommented = true;\r\n\tfor (var i = min; i <= max; i++) {\r\n\t\tvar line = yasqe.getLine(i);\r\n\t\tif (line.length == 0 || line.substring(0, 1) != \"#\") {\r\n\t\t\tlinesAreCommented = false;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tfor (var i = min; i <= max; i++) {\r\n\t\tif (linesAreCommented) {\r\n\t\t\t// lines are commented, so remove comments\r\n\t\t\tyasqe.replaceRange(\"\", {\r\n\t\t\t\tline : i,\r\n\t\t\t\tch : 0\r\n\t\t\t}, {\r\n\t\t\t\tline : i,\r\n\t\t\t\tch : 1\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\t// Not all lines are commented, so add comments\r\n\t\t\tyasqe.replaceRange(\"#\", {\r\n\t\t\t\tline : i,\r\n\t\t\t\tch : 0\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t}\r\n};\r\n\r\nroot.copyLineUp = function(yasqe) {\r\n\tvar cursor = yasqe.getCursor();\r\n\tvar lineCount = yasqe.lineCount();\r\n\t// First create new empty line at end of text\r\n\tyasqe.replaceRange(\"\\n\", {\r\n\t\tline : lineCount - 1,\r\n\t\tch : yasqe.getLine(lineCount - 1).length\r\n\t});\r\n\t// Copy all lines to their next line\r\n\tfor (var i = lineCount; i > cursor.line; i--) {\r\n\t\tvar line = yasqe.getLine(i - 1);\r\n\t\tyasqe.replaceRange(line, {\r\n\t\t\tline : i,\r\n\t\t\tch : 0\r\n\t\t}, {\r\n\t\t\tline : i,\r\n\t\t\tch : yasqe.getLine(i).length\r\n\t\t});\r\n\t}\r\n};\r\nroot.copyLineDown = function(yasqe) {\r\n\troot.copyLineUp(yasqe);\r\n\t// Make sure cursor goes one down (we are copying downwards)\r\n\tvar cursor = yasqe.getCursor();\r\n\tcursor.line++;\r\n\tyasqe.setCursor(cursor);\r\n};\r\nroot.doAutoFormat = function(yasqe) {\r\n\tif (yasqe.somethingSelected()) {\r\n\t\tvar to = {\r\n\t\t\tline : yasqe.getCursor(false).line,\r\n\t\t\tch : yasqe.getSelection().length\r\n\t\t};\r\n\t\tautoFormatRange(yasqe, yasqe.getCursor(true), to);\r\n\t} else {\r\n\t\tvar totalLines = yasqe.lineCount();\r\n\t\tvar totalChars = yasqe.getTextArea().value.length;\r\n\t\tautoFormatRange(yasqe, {\r\n\t\t\tline : 0,\r\n\t\t\tch : 0\r\n\t\t}, {\r\n\t\t\tline : totalLines,\r\n\t\t\tch : totalChars\r\n\t\t});\r\n\t}\r\n\r\n};\r\n\r\n\r\nvar autoFormatRange = function(yasqe, from, to) {\r\n\tvar absStart = yasqe.indexFromPos(from);\r\n\tvar absEnd = yasqe.indexFromPos(to);\r\n\t// Insert additional line breaks where necessary according to the\r\n\t// mode's syntax\r\n\tvar res = autoFormatLineBreaks(yasqe.getValue(), absStart, absEnd);\r\n\r\n\t// Replace and auto-indent the range\r\n\tyasqe.operation(function() {\r\n\t\tyasqe.replaceRange(res, from, to);\r\n\t\tvar startLine = yasqe.posFromIndex(absStart).line;\r\n\t\tvar endLine = yasqe.posFromIndex(absStart + res.length).line;\r\n\t\tfor (var i = startLine; i <= endLine; i++) {\r\n\t\t\tyasqe.indentLine(i, \"smart\");\r\n\t\t}\r\n\t});\r\n};\r\n\r\nvar autoFormatLineBreaks = function(text, start, end) {\r\n\ttext = text.substring(start, end);\r\n\tvar breakAfterArray = [ [ \"keyword\", \"ws\", \"prefixed\", \"ws\", \"uri\" ], // i.e. prefix declaration\r\n\t[ \"keyword\", \"ws\", \"uri\" ] // i.e. base\r\n\t];\r\n\tvar breakAfterCharacters = [ \"{\", \".\", \";\" ];\r\n\tvar breakBeforeCharacters = [ \"}\" ];\r\n\tvar getBreakType = function(stringVal, type) {\r\n\t\tfor (var i = 0; i < breakAfterArray.length; i++) {\r\n\t\t\tif (stackTrace.valueOf().toString() == breakAfterArray[i].valueOf()\r\n\t\t\t\t\t.toString()) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (var i = 0; i < breakAfterCharacters.length; i++) {\r\n\t\t\tif (stringVal == breakAfterCharacters[i]) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (var i = 0; i < breakBeforeCharacters.length; i++) {\r\n\t\t\t// don't want to issue 'breakbefore' AND 'breakafter', so check\r\n\t\t\t// current line\r\n\t\t\tif ($.trim(currentLine) != ''\r\n\t\t\t\t\t&& stringVal == breakBeforeCharacters[i]) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn 0;\r\n\t};\r\n\tvar formattedQuery = \"\";\r\n\tvar currentLine = \"\";\r\n\tvar stackTrace = [];\r\n\tCodeMirror.runMode(text, \"sparql11\", function(stringVal, type) {\r\n\t\tstackTrace.push(type);\r\n\t\tvar breakType = getBreakType(stringVal, type);\r\n\t\tif (breakType != 0) {\r\n\t\t\tif (breakType == 1) {\r\n\t\t\t\tformattedQuery += stringVal + \"\\n\";\r\n\t\t\t\tcurrentLine = \"\";\r\n\t\t\t} else {// (-1)\r\n\t\t\t\tformattedQuery += \"\\n\" + stringVal;\r\n\t\t\t\tcurrentLine = stringVal;\r\n\t\t\t}\r\n\t\t\tstackTrace = [];\r\n\t\t} else {\r\n\t\t\tcurrentLine += stringVal;\r\n\t\t\tformattedQuery += stringVal;\r\n\t\t}\r\n\t\tif (stackTrace.length == 1 && stackTrace[0] == \"sp-ws\")\r\n\t\t\tstackTrace = [];\r\n\t});\r\n\treturn $.trim(formattedQuery.replace(/\\n\\s*\\n/g, '\\n'));\r\n};\r\n\r\nrequire('./sparql.js'),\r\nrequire('./defaults.js');\r\n\r\nroot.version = {\r\n\t\"CodeMirror\" : CodeMirror.version,\r\n\t\"YASQE\" : require(\"../package.json\").version,\r\n\t\"jquery\": $.fn.jquery,\r\n\t\"yasgui-utils\": yutils.version\r\n};\r\n","'use strict';\r\n/**\r\n * Append prefix declaration to list of prefixes in query window.\r\n * \r\n * @param yasqe\r\n * @param prefix\r\n */\r\nvar addPrefixes = function(yasqe, prefixes) {\r\n\tvar existingPrefixes = yasqe.getPrefixesFromQuery();\r\n\t//for backwards compatability, we stil support prefixes value as string (e.g. 'rdf: <http://fbfgfgf>'\r\n\tif (typeof prefixes == \"string\") {\r\n\t\taddPrefixAsString(yasqe, prefixes);\r\n\t} else {\r\n\t\tfor (var pref in prefixes) {\r\n\t\t\tif (!(pref in existingPrefixes))\r\n\t\t\taddPrefixAsString(yasqe, pref + \": <\" + prefixes[pref] + \">\");\r\n\t\t}\r\n\t}\r\n};\r\n\r\nvar addPrefixAsString = function(yasqe, prefixString) {\r\n\tvar lastPrefix = null;\r\n\tvar lastPrefixLine = 0;\r\n\tvar numLines = yasqe.lineCount();\r\n\tfor (var i = 0; i < numLines; i++) {\r\n\t\tvar firstToken = yasqe.getNextNonWsToken(i);\r\n\t\tif (firstToken != null\r\n\t\t\t\t&& (firstToken.string == \"PREFIX\" || firstToken.string == \"BASE\")) {\r\n\t\t\tlastPrefix = firstToken;\r\n\t\t\tlastPrefixLine = i;\r\n\t\t}\r\n\t}\r\n\r\n\tif (lastPrefix == null) {\r\n\t\tyasqe.replaceRange(\"PREFIX \" + prefixString + \"\\n\", {\r\n\t\t\tline : 0,\r\n\t\t\tch : 0\r\n\t\t});\r\n\t} else {\r\n\t\tvar previousIndent = getIndentFromLine(yasqe, lastPrefixLine);\r\n\t\tyasqe.replaceRange(\"\\n\" + previousIndent + \"PREFIX \" + prefixString, {\r\n\t\t\tline : lastPrefixLine\r\n\t\t});\r\n\t}\r\n};\r\nvar removePrefixes = function(yasqe, prefixes) {\r\n\tvar escapeRegex = function(string) {\r\n\t\t//taken from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript/3561711#3561711\r\n\t\treturn string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\r\n\t}\r\n\tfor (var pref in prefixes) {\r\n\t\tyasqe.setValue(yasqe.getValue().replace(new RegExp(\"PREFIX\\\\s*\" + pref + \":\\\\s*\" + escapeRegex(\"<\" + prefixes[pref] + \">\") + \"\\\\s*\", \"ig\"), ''));\r\n\t}\r\n\t\r\n};\r\n\r\n/**\r\n * Get defined prefixes from query as array, in format {\"prefix:\" \"uri\"}\r\n * \r\n * @param cm\r\n * @returns {Array}\r\n */\r\nvar getPrefixesFromQuery = function(yasqe) {\r\n\tvar queryPrefixes = {};\r\n\tvar shouldContinue = true;\r\n\tvar getPrefixesFromLine = function(lineOffset, colOffset) {\r\n\t\tif (!shouldContinue) return;\r\n\t\tif (!colOffset) colOffset = 1;\r\n\t\tvar token = yasqe.getNextNonWsToken(i, colOffset);\r\n\t\tif (token) {\r\n\t\t\tif (token.state.possibleCurrent.indexOf(\"PREFIX\") == -1 && token.state.possibleNext.indexOf(\"PREFIX\") == -1) shouldContinue = false;//we are beyond the place in the query where we can enter prefixes\r\n\t\t\tif (token.string.toUpperCase() == \"PREFIX\") {\r\n\t\t\t\tvar prefix = yasqe.getNextNonWsToken(i, token.end + 1);\r\n\t\t\t\tif (prefix) {\r\n\t\t\t\t\tvar uri = yasqe.getNextNonWsToken(i, prefix.end + 1);\r\n\t\t\t\t\tif (uri) {\r\n\t\t\t\t\t\tvar uriString = uri.string;\r\n\t\t\t\t\t\tif (uriString.indexOf(\"<\") == 0)\r\n\t\t\t\t\t\t\turiString = uriString.substring(1);\r\n\t\t\t\t\t\tif (uriString.slice(-1) == \">\")\r\n\t\t\t\t\t\t\turiString = uriString\r\n\t\t\t\t\t\t\t\t\t.substring(0, uriString.length - 1);\r\n\t\t\t\t\t\tqueryPrefixes[prefix.string.slice(0,-1)] = uriString;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tgetPrefixesFromLine(lineOffset, uri.end+1);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tgetPrefixesFromLine(lineOffset, prefix.end+1);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\tgetPrefixesFromLine(lineOffset, token.end+1);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tgetPrefixesFromLine(lineOffset, token.end+1);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t\r\n\t\r\n\tvar numLines = yasqe.lineCount();\r\n\tfor (var i = 0; i < numLines; i++) {\r\n\t\tif (!shouldContinue) break;\r\n\t\tgetPrefixesFromLine(i);\r\n\t\t\r\n\t}\r\n\treturn queryPrefixes;\r\n};\r\n\r\n/**\r\n * Get the used indentation for a certain line\r\n * \r\n * @param yasqe\r\n * @param line\r\n * @param charNumber\r\n * @returns\r\n */\r\nvar getIndentFromLine = function(yasqe, line, charNumber) {\r\n\tif (charNumber == undefined)\r\n\t\tcharNumber = 1;\r\n\tvar token = yasqe.getTokenAt({\r\n\t\tline : line,\r\n\t\tch : charNumber\r\n\t});\r\n\tif (token == null || token == undefined || token.type != \"ws\") {\r\n\t\treturn \"\";\r\n\t} else {\r\n\t\treturn token.string + getIndentFromLine(yasqe, line, token.end + 1);\r\n\t}\r\n\t;\r\n};\r\n\r\nmodule.exports = {\r\n\taddPrefixes: addPrefixes,\r\n\tgetPrefixesFromQuery: getPrefixesFromQuery,\r\n\tremovePrefixes: removePrefixes\r\n};\r\n","'use strict';\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\r\n\tYASQE = require('./main.js');\r\n\r\n\r\n\r\nfunction getCookie(cname) {\r\n\tvar name = cname + \"=\";\r\n\tvar ca = document.cookie.split(';');\r\n\tfor(var i=0; i<ca.length; i++) {\r\n\t\tvar c = ca[i];\r\n\t\twhile (c.charAt(0)==' ') c = c.substring(1);\r\n\t\tif (c.indexOf(name) == 0) return decodeURIComponent(c.substring(name.length,c.length));\r\n\t}\r\n\treturn \"\";\r\n}\r\nvar graphDBAuth = getCookie('com.ontotext.graphdb.auth');\r\nif (graphDBAuth != '') {\r\n\t$.ajaxSetup({headers: {\r\n\t\t'X-AUTH-TOKEN': graphDBAuth\r\n\t}});\r\n}\r\n\r\n\r\nYASQE.executeQuery = function(yasqe, callbackOrConfig) {\r\n\tvar callback = (typeof callbackOrConfig == \"function\" ? callbackOrConfig: null);\r\n\tvar config = (typeof callbackOrConfig == \"object\" ? callbackOrConfig : {});\r\n\t\r\n\tif (yasqe.options.sparql)\r\n\t\tconfig = $.extend({}, yasqe.options.sparql, config);\r\n\t\r\n\t//for backwards compatability, make sure we copy sparql handlers to sparql callbacks\r\n\tif (config.handlers) \r\n\t\t$.extend(true, config.callbacks, config.handlers);\r\n\t\r\n\t\r\n\tif (!config.endpoint || config.endpoint.length == 0)\r\n\t\treturn;// nothing to query!\r\n\r\n\t/**\r\n\t * initialize ajax config\r\n\t */\r\n\tvar ajaxConfig = {\r\n\t\turl : (typeof config.endpoint == \"function\"? config.endpoint(yasqe): config.endpoint),\r\n\t\ttype : (typeof config.requestMethod == \"function\"? config.requestMethod(yasqe): config.requestMethod),\r\n\t\theaders : {\r\n\t\t\tAccept : getAcceptHeader(yasqe, config),\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * add complete, beforesend, etc callbacks (if specified)\r\n\t */\r\n\tvar handlerDefined = false;\r\n\tif (config.callbacks) {\r\n\t\tfor ( var handler in config.callbacks) {\r\n\t\t\tif (config.callbacks[handler]) {\r\n\t\t\t\thandlerDefined = true;\r\n\t\t\t\tajaxConfig[handler] = config.callbacks[handler];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * merge additional request headers\r\n\t */\r\n\tif (config.headers && !$.isEmptyObject(config.headers))\r\n\t\t$.extend(ajaxConfig.headers, config.headers);\r\n\r\n\t\r\n\tajaxConfig.data = yasqe.getUrlArguments(config);\r\n\tif (window.editor.getQueryMode() != \"update\") {\r\n\t\t\tvar countAjaxConfig = {};\r\n\t\t\t$.extend(true, countAjaxConfig, ajaxConfig);\r\n\t\t\tif (config.callbacks.countCallback && (typeof config.callbacks.countCallback == \"function\")) {\r\n\t\t\t\tcountAjaxConfig.data.push({name: 'default-graph-uri', value: 'http://www.ontotext.com/count'});\r\n\t\t\t\tcountAjaxConfig.complete = config.callbacks.countCallback;\r\n\t\t\t}\r\n\t}\r\n\r\n\r\n\t\r\n\tif (config.setQueryLimit && (typeof config.setQueryLimit == \"function\")) {\r\n\t\tajaxConfig.data.forEach(function(o) {\r\n\t\t\tif (o.name == \"query\") {\r\n\t\t\t\to.value = config.setQueryLimit(o.value);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tif (!handlerDefined && !callback)\r\n\t\treturn; // ok, we can query, but have no callbacks. just stop now\r\n\t\r\n\t// if only callback is passed as arg, add that on as 'onComplete' callback\r\n\tif (callback)\r\n\t\tajaxConfig.complete = callback;\r\n\r\n\tYASQE.updateQueryButton(yasqe, \"busy\");\r\n\t\r\n\tvar updateQueryButton = function() {\r\n\t\tYASQE.updateQueryButton(yasqe);\r\n\t};\r\n\t//Make sure the query button is updated again on complete\r\n\tif (ajaxConfig.complete) {\r\n\t\tajaxConfig.complete = [updateQueryButton, ajaxConfig.complete];\r\n\t} else {\r\n\t\tajaxConfig.complete = updateQueryButton;\r\n\t}\r\n\r\n\tif (config.callbacks.resetResults && (typeof config.callbacks.resetResults == \"function\")) {\r\n\t\tconfig.callbacks.resetResults();\r\n\t}\r\n\r\n\tyasqe.xhr = $.ajax(ajaxConfig);\r\n\tif (countAjaxConfig) {\r\n\t\t$.ajax(countAjaxConfig);\r\n\t}\r\n\t\r\n};\r\n\r\n\r\nYASQE.getUrlArguments = function(yasqe, config) {\r\n\tvar queryMode = yasqe.getQueryMode();\r\n\tvar data = [{\r\n\t\tname : yasqe.getQueryMode(),//either 'update' or 'query'\r\n\t\tvalue : yasqe.getValue()\r\n\t}];\r\n\t\r\n\t/**\r\n\t * add named graphs to ajax config\r\n\t */\r\n\tif (config.namedGraphs && config.namedGraphs.length > 0) {\r\n\t\tvar argName = (queryMode == \"query\" ? \"named-graph-uri\": \"using-named-graph-uri \");\r\n\t\tfor (var i = 0; i < config.namedGraphs.length; i++)\r\n\t\t\tdata.push({\r\n\t\t\t\tname : argName,\r\n\t\t\t\tvalue : config.namedGraphs[i]\r\n\t\t\t});\r\n\t}\r\n\t/**\r\n\t * add default graphs to ajax config\r\n\t */\r\n\tif (config.defaultGraphs && config.defaultGraphs.length > 0) {\r\n\t\tvar argName = (queryMode == \"query\" ? \"default-graph-uri\": \"using-graph-uri \");\r\n\t\tfor (var i = 0; i < config.defaultGraphs.length; i++)\r\n\t\t\tdata.push({\r\n\t\t\t\tname : argName,\r\n\t\t\t\tvalue : config.defaultGraphs[i]\r\n\t\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * add additional request args\r\n\t */\r\n\tif (config.args && config.args.length > 0) $.merge(data, config.args);\r\n\t\r\n\treturn data;\r\n}\r\nvar getAcceptHeader = function(yasqe, config) {\r\n\tvar acceptHeader = null;\r\n\tif (config.acceptHeader && !config.acceptHeaderGraph && !config.acceptHeaderSelect && !config.acceptHeaderUpdate) {\r\n\t\t//this is the old config. For backwards compatability, keep supporting it\r\n\t\tif (typeof config.acceptHeader == \"function\") {\r\n\t\t\tacceptHeader = config.acceptHeader(yasqe);\r\n\t\t} else {\r\n\t\t\tacceptHeader = config.acceptHeader;\r\n\t\t}\r\n\t} else {\r\n\t\tif (yasqe.getQueryMode() == \"update\") {\r\n\t\t\tacceptHeader = (typeof config.acceptHeader == \"function\"? config.acceptHeaderUpdate(yasqe): config.acceptHeaderUpdate);\r\n\t\t} else {\r\n\t\t\tvar qType = yasqe.getQueryType();\r\n\t\t\tif (qType == \"DESCRIBE\" || qType == \"CONSTRUCT\") {\r\n\t\t\t\tacceptHeader = (typeof config.acceptHeaderGraph == \"function\"? config.acceptHeaderGraph(yasqe): config.acceptHeaderGraph);\r\n\t\t\t} else {\r\n\t\t\t\tacceptHeader = (typeof config.acceptHeaderSelect == \"function\" ? config.acceptHeaderSelect(yasqe): config.acceptHeaderSelect);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn acceptHeader;\r\n};\r\n","'use strict';\r\n/**\r\n * When typing a query, this query is sometimes syntactically invalid, causing\r\n * the current tokens to be incorrect This causes problem for autocompletion.\r\n * http://bla might result in two tokens: http:// and bla. We'll want to combine\r\n * these\r\n * \r\n * @param yasqe {doc}\r\n * @param token {object}\r\n * @param cursor {object}\r\n * @return token {object}\r\n * @method YASQE.getCompleteToken\r\n */\r\nvar getCompleteToken = function(yasqe, token, cur) {\r\n\tif (!cur) {\r\n\t\tcur = yasqe.getCursor();\r\n\t}\r\n\tif (!token) {\r\n\t\ttoken = yasqe.getTokenAt(cur);\r\n\t}\r\n\tvar prevToken = yasqe.getTokenAt({\r\n\t\tline : cur.line,\r\n\t\tch : token.start\r\n\t});\r\n\t// not start of line, and not whitespace\r\n\tif (\r\n\t\t\tprevToken.type != null && prevToken.type != \"ws\"\r\n\t\t\t&& token.type != null && token.type != \"ws\"\r\n\t\t) {\r\n\t\ttoken.start = prevToken.start;\r\n\t\ttoken.string = prevToken.string + token.string;\r\n\t\treturn getCompleteToken(yasqe, token, {\r\n\t\t\tline : cur.line,\r\n\t\t\tch : prevToken.start\r\n\t\t});// recursively, might have multiple tokens which it should include\r\n\t} else if (token.type != null && token.type == \"ws\") {\r\n\t\t//always keep 1 char of whitespace between tokens. Otherwise, autocompletions might end up next to the previous node, without whitespace between them\r\n\t\ttoken.start = token.start + 1;\r\n\t\ttoken.string = token.string.substring(1);\r\n\t\treturn token;\r\n\t} else {\r\n\t\treturn token;\r\n\t}\r\n};\r\nvar getPreviousNonWsToken = function(yasqe, line, token) {\r\n\tvar previousToken = yasqe.getTokenAt({\r\n\t\tline : line,\r\n\t\tch : token.start\r\n\t});\r\n\tif (previousToken != null && previousToken.type == \"ws\") {\r\n\t\tpreviousToken = getPreviousNonWsToken(yasqe, line, previousToken);\r\n\t}\r\n\treturn previousToken;\r\n}\r\nvar getNextNonWsToken = function(yasqe, lineNumber, charNumber) {\r\n\tif (charNumber == undefined)\r\n\t\tcharNumber = 1;\r\n\tvar token = yasqe.getTokenAt({\r\n\t\tline : lineNumber,\r\n\t\tch : charNumber\r\n\t});\r\n\tif (token == null || token == undefined || token.end < charNumber) {\r\n\t\treturn null;\r\n\t}\r\n\tif (token.type == \"ws\") {\r\n\t\treturn getNextNonWsToken(yasqe, lineNumber, token.end + 1);\r\n\t}\r\n\treturn token;\r\n};\r\n\r\nmodule.exports = {\r\n\tgetPreviousNonWsToken: getPreviousNonWsToken,\r\n\tgetCompleteToken: getCompleteToken,\r\n\tgetNextNonWsToken: getNextNonWsToken,\r\n};\r\n\r\n","'use strict';\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\r\n\tutils = require('./utils.js');\r\n\r\n/**\r\n * Write our own tooltip, to avoid loading another library for just this functionality. For now, we only use tooltip for showing parse errors, so this is quite a tailored solution\r\n * Requirements: \r\n * \t\tposition tooltip within codemirror frame as much as possible, to avoid z-index issues with external things on page\r\n * \t\tuse html as content\r\n */\r\nmodule.exports = function(yasqe, parent, html) {\r\n\tvar parent = $(parent);\r\n\tvar tooltip;\r\n\tparent.hover(function() {\r\n\t\tif (typeof html == \"function\") html = html();\r\n\t\ttooltip = $(\"<div>\").addClass('yasqe_tooltip').html(html).appendTo(parent);\r\n\t\trepositionTooltip();\r\n\t},\r\n\tfunction() {\r\n\t\t$(\".yasqe_tooltip\").remove();\r\n\t});\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * only need to take into account top and bottom offset for this usecase\r\n\t */\r\n\tvar repositionTooltip = function() {\r\n\t\tif ($(yasqe.getWrapperElement()).offset().top >= tooltip.offset().top) {\r\n\t\t\t//shit, move the tooltip down. The tooltip now hovers over the top edge of the yasqe instance\r\n\t\t\ttooltip.css('bottom', 'auto');\r\n\t\t\ttooltip.css('top', '26px');\r\n\t\t}\r\n\t};\r\n};\r\n\r\n","'use strict';\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\n\r\nvar keyExists = function(objectToTest, key) {\r\n\tvar exists = false;\r\n\ttry {\r\n\t\tif (objectToTest[key] !== undefined)\r\n\t\t\texists = true;\r\n\t} catch (e) {\r\n\t}\r\n\treturn exists;\r\n};\r\n\r\nvar getPersistencyId = function(yasqe, persistentIdCreator) {\r\n\tvar persistencyId = null;\r\n\r\n\tif (persistentIdCreator) {\r\n\t\tif (typeof persistentIdCreator == \"string\") {\r\n\t\t\tpersistencyId = persistentIdCreator;\r\n\t\t} else {\r\n\t\t\tpersistencyId = persistentIdCreator(yasqe);\r\n\t\t}\r\n\t}\r\n\treturn persistencyId;\r\n};\r\n\r\nvar elementsOverlap = (function () {\r\n    function getPositions( elem ) {\r\n        var pos, width, height;\r\n        pos = $( elem ).offset();\r\n        width = $( elem ).width();\r\n        height = $( elem ).height();\r\n        return [ [ pos.left, pos.left + width ], [ pos.top, pos.top + height ] ];\r\n    }\r\n\r\n    function comparePositions( p1, p2 ) {\r\n        var r1, r2;\r\n        r1 = p1[0] < p2[0] ? p1 : p2;\r\n        r2 = p1[0] < p2[0] ? p2 : p1;\r\n        return r1[1] > r2[0] || r1[0] === r2[0];\r\n    }\r\n\r\n    return function ( a, b ) {\r\n        var pos1 = getPositions( a ),\r\n            pos2 = getPositions( b );\r\n        return comparePositions( pos1[0], pos2[0] ) && comparePositions( pos1[1], pos2[1] );\r\n    };\r\n})();\r\n\r\nmodule.exports = {\r\n\tkeyExists: keyExists,\r\n\tgetPersistencyId: getPersistencyId,\r\n\telementsOverlap:elementsOverlap,\r\n};"],"sourceRoot":"/source/"}