{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "lib/deparam.js",
    "lib/grammar/_tokenizer-table.js",
    "lib/grammar/tokenizer.js",
    "lib/trie.js",
    "node_modules/codemirror/addon/display/fullscreen.js",
    "node_modules/codemirror/addon/edit/closebrackets.js",
    "node_modules/codemirror/addon/edit/matchbrackets.js",
    "node_modules/codemirror/addon/fold/brace-fold.js",
    "node_modules/codemirror/addon/fold/foldcode.js",
    "node_modules/codemirror/addon/fold/foldgutter.js",
    "node_modules/codemirror/addon/fold/xml-fold.js",
    "node_modules/codemirror/addon/hint/show-hint.js",
    "node_modules/codemirror/addon/runmode/runmode.js",
    "node_modules/codemirror/addon/search/searchcursor.js",
    "node_modules/store/store.js",
    "node_modules/yasgui-utils/package.json",
    "node_modules/yasgui-utils/src/main.js",
    "node_modules/yasgui-utils/src/storage.js",
    "node_modules/yasgui-utils/src/svg.js",
    "package.json",
    "src/autocompleters/autocompleterBase.js",
    "src/autocompleters/classes.js",
    "src/autocompleters/localNames.js",
    "src/autocompleters/properties.js",
    "src/autocompleters/sesame-prefixes.js",
    "src/autocompleters/standard.js",
    "src/autocompleters/utils.js",
    "src/autocompleters/variables.js",
    "src/curl.js",
    "src/defaults.js",
    "src/entry.js",
    "src/imgs.js",
    "src/main.js",
    "src/prefixFold.js",
    "src/prefixUtils.js",
    "src/sparql.js",
    "src/tokenUtils.js",
    "src/tooltip.js",
    "src/utils.js"
  ],
  "names": [],
  "mappingsjynjlRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACznxztlttbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxlFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACntFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3VA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpzJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACltDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClzzyhxIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "'use strict';\r\n/*\r\n  jQuery deparam is an extraction of the deparam method from Ben Alman's jQuery BBQ\r\n  http://benalman.com/projects/jquery-bbq-plugin/\r\n*/\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\n$.deparam = function (params, coerce) {\r\nvar obj = {},\r\n\tcoerce_types = { 'true': !0, 'false': !1, 'null': null };\r\n  \r\n// Iterate over all name=value pairs.\r\n$.each(params.replace(/\\+/g, ' ').split('&'), function (j,v) {\r\n  var param = v.split('='),\r\n\t  key = decodeURIComponent(param[0]),\r\n\t  val,\r\n\t  cur = obj,\r\n\t  i = 0,\r\n\t\t\r\n\t  // If key is more complex than 'foo', like 'a[]' or 'a[b][c]', split it\r\n\t  // into its component parts.\r\n\t  keys = key.split(']['),\r\n\t  keys_last = keys.length - 1;\r\n\t\r\n  // If the first keys part contains [ and the last ends with ], then []\r\n  // are correctly balanced.\r\n  if (/\\[/.test(keys[0]) && /\\]$/.test(keys[keys_last])) {\r\n\t// Remove the trailing ] from the last keys part.\r\n\tkeys[keys_last] = keys[keys_last].replace(/\\]$/, '');\r\n\t  \r\n\t// Split first keys part into two parts on the [ and add them back onto\r\n\t// the beginning of the keys array.\r\n\tkeys = keys.shift().split('[').concat(keys);\r\n\t  \r\n\tkeys_last = keys.length - 1;\r\n  } else {\r\n\t// Basic 'foo' style key.\r\n\tkeys_last = 0;\r\n  }\r\n\t\r\n  // Are we dealing with a name=value pair, or just a name?\r\n  if (param.length === 2) {\r\n\tval = decodeURIComponent(param[1]);\r\n\t  \r\n\t// Coerce values.\r\n\tif (coerce) {\r\n\t  val = val && !isNaN(val)              ? +val              // number\r\n\t\t  : val === 'undefined'             ? undefined         // undefined\r\n\t\t  : coerce_types[val] !== undefined ? coerce_types[val] // true, false, null\r\n\t\t  : val;                                                // string\r\n\t}\r\n\t  \r\n\tif ( keys_last ) {\r\n\t  // Complex key, build deep object structure based on a few rules:\r\n\t  // * The 'cur' pointer starts at the object top-level.\r\n\t  // * [] = array push (n is set to array length), [n] = array if n is \r\n\t  //   numeric, otherwise object.\r\n\t  // * If at the last keys part, set the value.\r\n\t  // * For each keys part, if the current level is undefined create an\r\n\t  //   object or array based on the type of the next keys part.\r\n\t  // * Move the 'cur' pointer to the next level.\r\n\t  // * Rinse & repeat.\r\n\t  for (; i <= keys_last; i++) {\r\n\t\tkey = keys[i] === '' ? cur.length : keys[i];\r\n\t\tcur = cur[key] = i < keys_last\r\n\t\t  ? cur[key] || (keys[i+1] && isNaN(keys[i+1]) ? {} : [])\r\n\t\t  : val;\r\n\t  }\r\n\t\t\r\n\t} else {\r\n\t  // Simple key, even simpler rules, since only scalars and shallow\r\n\t  // arrays are allowed.\r\n\t\t\r\n\t  if ($.isArray(obj[key])) {\r\n\t\t// val is already an array, so push on the next value.\r\n\t\tobj[key].push( val );\r\n\t\t  \r\n\t  } else if (obj[key] !== undefined) {\r\n\t\t// val isn't an array, but since a second value has been specified,\r\n\t\t// convert val into an array.\r\n\t\tobj[key] = [obj[key], val];\r\n\t\t  \r\n\t  } else {\r\n\t\t// val is a scalar.\r\n\t\tobj[key] = val;\r\n\t  }\r\n\t}\r\n\t  \r\n  } else if (key) {\r\n\t// No value was defined, so set something meaningful.\r\n\tobj[key] = coerce\r\n\t  ? undefined\r\n\t  : '';\r\n  }\r\n});\r\n  \r\nreturn obj;\r\n};\r\n",
    "module.exports = {table:\r\n{\r\n  \"*[&&,valueLogical]\" : {\r\n     \"&&\": [\"[&&,valueLogical]\",\"*[&&,valueLogical]\"], \r\n     \"AS\": [], \r\n     \")\": [], \r\n     \",\": [], \r\n     \"||\": [], \r\n     \";\": []}, \r\n  \"*[,,expression]\" : {\r\n     \",\": [\"[,,expression]\",\"*[,,expression]\"], \r\n     \")\": []}, \r\n  \"*[,,objectPath]\" : {\r\n     \",\": [\"[,,objectPath]\",\"*[,,objectPath]\"], \r\n     \".\": [], \r\n     \";\": [], \r\n     \"]\": [], \r\n     \"{\": [], \r\n     \"OPTIONAL\": [], \r\n     \"MINUS\": [], \r\n     \"GRAPH\": [], \r\n     \"SERVICE\": [], \r\n     \"FILTER\": [], \r\n     \"BIND\": [], \r\n     \"VALUES\": [], \r\n     \"}\": []}, \r\n  \"*[,,object]\" : {\r\n     \",\": [\"[,,object]\",\"*[,,object]\"], \r\n     \".\": [], \r\n     \";\": [], \r\n     \"]\": [], \r\n     \"}\": [], \r\n     \"GRAPH\": [], \r\n     \"{\": [], \r\n     \"OPTIONAL\": [], \r\n     \"MINUS\": [], \r\n     \"SERVICE\": [], \r\n     \"FILTER\": [], \r\n     \"BIND\": [], \r\n     \"VALUES\": []}, \r\n  \"*[/,pathEltOrInverse]\" : {\r\n     \"/\": [\"[/,pathEltOrInverse]\",\"*[/,pathEltOrInverse]\"], \r\n     \"|\": [], \r\n     \")\": [], \r\n     \"(\": [], \r\n     \"[\": [], \r\n     \"VAR1\": [], \r\n     \"VAR2\": [], \r\n     \"NIL\": [], \r\n     \"IRI_REF\": [], \r\n     \"TRUE\": [], \r\n     \"FALSE\": [], \r\n     \"BLANK_NODE_LABEL\": [], \r\n     \"ANON\": [], \r\n     \"PNAME_LN\": [], \r\n     \"PNAME_NS\": [], \r\n     \"STRING_LITERAL1\": [], \r\n     \"STRING_LITERAL2\": [], \r\n     \"STRING_LITERAL_LONG1\": [], \r\n     \"STRING_LITERAL_LONG2\": [], \r\n     \"INTEGER\": [], \r\n     \"DECIMAL\": [], \r\n     \"DOUBLE\": [], \r\n     \"INTEGER_POSITIVE\": [], \r\n     \"DECIMAL_POSITIVE\": [], \r\n     \"DOUBLE_POSITIVE\": [], \r\n     \"INTEGER_NEGATIVE\": [], \r\n     \"DECIMAL_NEGATIVE\": [], \r\n     \"DOUBLE_NEGATIVE\": []}, \r\n  \"*[;,?[or([verbPath,verbSimple]),objectList]]\" : {\r\n     \";\": [\"[;,?[or([verbPath,verbSimple]),objectList]]\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \r\n     \".\": [], \r\n     \"]\": [], \r\n     \"{\": [], \r\n     \"OPTIONAL\": [], \r\n     \"MINUS\": [], \r\n     \"GRAPH\": [], \r\n     \"SERVICE\": [], \r\n     \"FILTER\": [], \r\n     \"BIND\": [], \r\n     \"VALUES\": [], \r\n     \"}\": []}, \r\n  \"*[;,?[verb,objectList]]\" : {\r\n     \";\": [\"[;,?[verb,objectList]]\",\"*[;,?[verb,objectList]]\"], \r\n     \".\": [], \r\n     \"]\": [], \r\n     \"}\": [], \r\n     \"GRAPH\": [], \r\n     \"{\": [], \r\n     \"OPTIONAL\": [], \r\n     \"MINUS\": [], \r\n     \"SERVICE\": [], \r\n     \"FILTER\": [], \r\n     \"BIND\": [], \r\n     \"VALUES\": []}, \r\n  \"*[UNION,groupGraphPattern]\" : {\r\n     \"UNION\": [\"[UNION,groupGraphPattern]\",\"*[UNION,groupGraphPattern]\"], \r\n     \"VAR1\": [], \r\n     \"VAR2\": [], \r\n     \"NIL\": [], \r\n     \"(\": [], \r\n     \"[\": [], \r\n     \"IRI_REF\": [], \r\n     \"TRUE\": [], \r\n     \"FALSE\": [], \r\n     \"BLANK_NODE_LABEL\": [], \r\n     \"ANON\": [], \r\n     \"PNAME_LN\": [], \r\n     \"PNAME_NS\": [], \r\n     \"STRING_LITERAL1\": [], \r\n     \"STRING_LITERAL2\": [], \r\n     \"STRING_LITERAL_LONG1\": [], \r\n     \"STRING_LITERAL_LONG2\": [], \r\n     \"INTEGER\": [], \r\n     \"DECIMAL\": [], \r\n     \"DOUBLE\": [], \r\n     \"INTEGER_POSITIVE\": [], \r\n     \"DECIMAL_POSITIVE\": [], \r\n     \"DOUBLE_POSITIVE\": [], \r\n     \"INTEGER_NEGATIVE\": [], \r\n     \"DECIMAL_NEGATIVE\": [], \r\n     \"DOUBLE_NEGATIVE\": [], \r\n     \".\": [], \r\n     \"{\": [], \r\n     \"OPTIONAL\": [], \r\n     \"MINUS\": [], \r\n     \"GRAPH\": [], \r\n     \"SERVICE\": [], \r\n     \"FILTER\": [], \r\n     \"BIND\": [], \r\n     \"VALUES\": [], \r\n     \"}\": []}, \r\n  \"*[graphPatternNotTriples,?.,?triplesBlock]\" : {\r\n     \"{\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"OPTIONAL\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"MINUS\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"GRAPH\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"SERVICE\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"FILTER\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"BIND\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"VALUES\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"}\": []}, \r\n  \"*[quadsNotTriples,?.,?triplesTemplate]\" : {\r\n     \"GRAPH\": [\"[quadsNotTriples,?.,?triplesTemplate]\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n     \"}\": []}, \r\n  \"*[|,pathOneInPropertySet]\" : {\r\n     \"|\": [\"[|,pathOneInPropertySet]\",\"*[|,pathOneInPropertySet]\"], \r\n     \")\": []}, \r\n  \"*[|,pathSequence]\" : {\r\n     \"|\": [\"[|,pathSequence]\",\"*[|,pathSequence]\"], \r\n     \")\": [], \r\n     \"(\": [], \r\n     \"[\": [], \r\n     \"VAR1\": [], \r\n     \"VAR2\": [], \r\n     \"NIL\": [], \r\n     \"IRI_REF\": [], \r\n     \"TRUE\": [], \r\n     \"FALSE\": [], \r\n     \"BLANK_NODE_LABEL\": [], \r\n     \"ANON\": [], \r\n     \"PNAME_LN\": [], \r\n     \"PNAME_NS\": [], \r\n     \"STRING_LITERAL1\": [], \r\n     \"STRING_LITERAL2\": [], \r\n     \"STRING_LITERAL_LONG1\": [], \r\n     \"STRING_LITERAL_LONG2\": [], \r\n     \"INTEGER\": [], \r\n     \"DECIMAL\": [], \r\n     \"DOUBLE\": [], \r\n     \"INTEGER_POSITIVE\": [], \r\n     \"DECIMAL_POSITIVE\": [], \r\n     \"DOUBLE_POSITIVE\": [], \r\n     \"INTEGER_NEGATIVE\": [], \r\n     \"DECIMAL_NEGATIVE\": [], \r\n     \"DOUBLE_NEGATIVE\": []}, \r\n  \"*[||,conditionalAndExpression]\" : {\r\n     \"||\": [\"[||,conditionalAndExpression]\",\"*[||,conditionalAndExpression]\"], \r\n     \"AS\": [], \r\n     \")\": [], \r\n     \",\": [], \r\n     \";\": []}, \r\n  \"*dataBlockValue\" : {\r\n     \"UNDEF\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"IRI_REF\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"TRUE\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"FALSE\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"PNAME_LN\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"PNAME_NS\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"STRING_LITERAL1\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"STRING_LITERAL2\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"STRING_LITERAL_LONG1\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"STRING_LITERAL_LONG2\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"INTEGER\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"DECIMAL\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"DOUBLE\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"INTEGER_POSITIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"DECIMAL_POSITIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"DOUBLE_POSITIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"INTEGER_NEGATIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"DECIMAL_NEGATIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"DOUBLE_NEGATIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"}\": [], \r\n     \")\": []}, \r\n  \"*datasetClause\" : {\r\n     \"FROM\": [\"datasetClause\",\"*datasetClause\"], \r\n     \"WHERE\": [], \r\n     \"{\": []}, \r\n  \"*describeDatasetClause\" : {\r\n     \"FROM\": [\"describeDatasetClause\",\"*describeDatasetClause\"], \r\n     \"ORDER\": [], \r\n     \"HAVING\": [], \r\n     \"GROUP\": [], \r\n     \"LIMIT\": [], \r\n     \"OFFSET\": [], \r\n     \"WHERE\": [], \r\n     \"{\": [], \r\n     \"VALUES\": [], \r\n     \"$\": []}, \r\n  \"*graphNode\" : {\r\n     \"(\": [\"graphNode\",\"*graphNode\"], \r\n     \"[\": [\"graphNode\",\"*graphNode\"], \r\n     \"VAR1\": [\"graphNode\",\"*graphNode\"], \r\n     \"VAR2\": [\"graphNode\",\"*graphNode\"], \r\n     \"NIL\": [\"graphNode\",\"*graphNode\"], \r\n     \"IRI_REF\": [\"graphNode\",\"*graphNode\"], \r\n     \"TRUE\": [\"graphNode\",\"*graphNode\"], \r\n     \"FALSE\": [\"graphNode\",\"*graphNode\"], \r\n     \"BLANK_NODE_LABEL\": [\"graphNode\",\"*graphNode\"], \r\n     \"ANON\": [\"graphNode\",\"*graphNode\"], \r\n     \"PNAME_LN\": [\"graphNode\",\"*graphNode\"], \r\n     \"PNAME_NS\": [\"graphNode\",\"*graphNode\"], \r\n     \"STRING_LITERAL1\": [\"graphNode\",\"*graphNode\"], \r\n     \"STRING_LITERAL2\": [\"graphNode\",\"*graphNode\"], \r\n     \"STRING_LITERAL_LONG1\": [\"graphNode\",\"*graphNode\"], \r\n     \"STRING_LITERAL_LONG2\": [\"graphNode\",\"*graphNode\"], \r\n     \"INTEGER\": [\"graphNode\",\"*graphNode\"], \r\n     \"DECIMAL\": [\"graphNode\",\"*graphNode\"], \r\n     \"DOUBLE\": [\"graphNode\",\"*graphNode\"], \r\n     \"INTEGER_POSITIVE\": [\"graphNode\",\"*graphNode\"], \r\n     \"DECIMAL_POSITIVE\": [\"graphNode\",\"*graphNode\"], \r\n     \"DOUBLE_POSITIVE\": [\"graphNode\",\"*graphNode\"], \r\n     \"INTEGER_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \r\n     \"DECIMAL_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \r\n     \"DOUBLE_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \r\n     \")\": []}, \r\n  \"*graphNodePath\" : {\r\n     \"(\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"[\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"VAR1\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"VAR2\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"NIL\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"IRI_REF\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"TRUE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"FALSE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"BLANK_NODE_LABEL\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"ANON\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"PNAME_LN\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"PNAME_NS\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"STRING_LITERAL1\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"STRING_LITERAL2\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"STRING_LITERAL_LONG1\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"STRING_LITERAL_LONG2\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"INTEGER\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"DECIMAL\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"DOUBLE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"INTEGER_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"DECIMAL_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"DOUBLE_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"INTEGER_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"DECIMAL_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"DOUBLE_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \")\": []}, \r\n  \"*groupCondition\" : {\r\n     \"(\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STR\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"LANG\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"LANGMATCHES\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"DATATYPE\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"BOUND\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"IRI\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"URI\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"BNODE\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"RAND\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"ABS\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"CEIL\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"FLOOR\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"ROUND\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"CONCAT\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STRLEN\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"UCASE\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"LCASE\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"ENCODE_FOR_URI\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"CONTAINS\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STRSTARTS\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STRENDS\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STRBEFORE\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STRAFTER\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"YEAR\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"MONTH\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"DAY\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"HOURS\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"MINUTES\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"SECONDS\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"TIMEZONE\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"TZ\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"NOW\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"UUID\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STRUUID\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"MD5\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"SHA1\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"SHA256\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"SHA384\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"SHA512\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"COALESCE\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"IF\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STRLANG\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STRDT\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"SAMETERM\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"ISIRI\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"ISURI\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"ISBLANK\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"ISLITERAL\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"ISNUMERIC\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"VAR1\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"VAR2\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"SUBSTR\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"REPLACE\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"REGEX\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"EXISTS\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"NOT\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"IRI_REF\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"PNAME_LN\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"PNAME_NS\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"VALUES\": [], \r\n     \"LIMIT\": [], \r\n     \"OFFSET\": [], \r\n     \"ORDER\": [], \r\n     \"HAVING\": [], \r\n     \"$\": [], \r\n     \"}\": []}, \r\n  \"*havingCondition\" : {\r\n     \"(\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STR\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"LANG\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"LANGMATCHES\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"DATATYPE\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"BOUND\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"IRI\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"URI\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"BNODE\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"RAND\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"ABS\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"CEIL\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"FLOOR\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"ROUND\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"CONCAT\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STRLEN\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"UCASE\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"LCASE\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"ENCODE_FOR_URI\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"CONTAINS\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STRSTARTS\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STRENDS\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STRBEFORE\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STRAFTER\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"YEAR\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"MONTH\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"DAY\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"HOURS\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"MINUTES\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"SECONDS\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"TIMEZONE\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"TZ\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"NOW\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"UUID\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STRUUID\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"MD5\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"SHA1\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"SHA256\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"SHA384\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"SHA512\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"COALESCE\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"IF\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STRLANG\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STRDT\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"SAMETERM\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"ISIRI\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"ISURI\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"ISBLANK\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"ISLITERAL\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"ISNUMERIC\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"SUBSTR\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"REPLACE\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"REGEX\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"EXISTS\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"NOT\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"IRI_REF\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"PNAME_LN\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"PNAME_NS\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"VALUES\": [], \r\n     \"LIMIT\": [], \r\n     \"OFFSET\": [], \r\n     \"ORDER\": [], \r\n     \"$\": [], \r\n     \"}\": []}, \r\n  \"*or([[ (,*dataBlockValue,)],NIL])\" : {\r\n     \"(\": [\"or([[ (,*dataBlockValue,)],NIL])\",\"*or([[ (,*dataBlockValue,)],NIL])\"], \r\n     \"NIL\": [\"or([[ (,*dataBlockValue,)],NIL])\",\"*or([[ (,*dataBlockValue,)],NIL])\"], \r\n     \"}\": []}, \r\n  \"*or([[*,unaryExpression],[/,unaryExpression]])\" : {\r\n     \"*\": [\"or([[*,unaryExpression],[/,unaryExpression]])\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"/\": [\"or([[*,unaryExpression],[/,unaryExpression]])\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"AS\": [], \r\n     \")\": [], \r\n     \",\": [], \r\n     \"||\": [], \r\n     \"&&\": [], \r\n     \"=\": [], \r\n     \"!=\": [], \r\n     \"<\": [], \r\n     \">\": [], \r\n     \"<=\": [], \r\n     \">=\": [], \r\n     \"IN\": [], \r\n     \"NOT\": [], \r\n     \"+\": [], \r\n     \"-\": [], \r\n     \"INTEGER_POSITIVE\": [], \r\n     \"DECIMAL_POSITIVE\": [], \r\n     \"DOUBLE_POSITIVE\": [], \r\n     \"INTEGER_NEGATIVE\": [], \r\n     \"DECIMAL_NEGATIVE\": [], \r\n     \"DOUBLE_NEGATIVE\": [], \r\n     \";\": []}, \r\n  \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\" : {\r\n     \"+\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"-\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"INTEGER_POSITIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"DECIMAL_POSITIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"DOUBLE_POSITIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"INTEGER_NEGATIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"DECIMAL_NEGATIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"DOUBLE_NEGATIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"AS\": [], \r\n     \")\": [], \r\n     \",\": [], \r\n     \"||\": [], \r\n     \"&&\": [], \r\n     \"=\": [], \r\n     \"!=\": [], \r\n     \"<\": [], \r\n     \">\": [], \r\n     \"<=\": [], \r\n     \">=\": [], \r\n     \"IN\": [], \r\n     \"NOT\": [], \r\n     \";\": []}, \r\n  \"*or([baseDecl,prefixDecl])\" : {\r\n     \"BASE\": [\"or([baseDecl,prefixDecl])\",\"*or([baseDecl,prefixDecl])\"], \r\n     \"PREFIX\": [\"or([baseDecl,prefixDecl])\",\"*or([baseDecl,prefixDecl])\"], \r\n     \"$\": [], \r\n     \"CONSTRUCT\": [], \r\n     \"DESCRIBE\": [], \r\n     \"ASK\": [], \r\n     \"INSERT\": [], \r\n     \"DELETE\": [], \r\n     \"SELECT\": [], \r\n     \"LOAD\": [], \r\n     \"CLEAR\": [], \r\n     \"DROP\": [], \r\n     \"ADD\": [], \r\n     \"MOVE\": [], \r\n     \"COPY\": [], \r\n     \"CREATE\": [], \r\n     \"WITH\": []}, \r\n  \"*or([var,[ (,expression,AS,var,)]])\" : {\r\n     \"(\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \r\n     \"VAR1\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \r\n     \"VAR2\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \r\n     \"WHERE\": [], \r\n     \"{\": [], \r\n     \"FROM\": []}, \r\n  \"*orderCondition\" : {\r\n     \"ASC\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"DESC\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"VAR1\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"VAR2\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"(\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STR\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"LANG\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"LANGMATCHES\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"DATATYPE\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"BOUND\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"IRI\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"URI\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"BNODE\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"RAND\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"ABS\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"CEIL\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"FLOOR\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"ROUND\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"CONCAT\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STRLEN\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"UCASE\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"LCASE\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"ENCODE_FOR_URI\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"CONTAINS\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STRSTARTS\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STRENDS\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STRBEFORE\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STRAFTER\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"YEAR\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"MONTH\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"DAY\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"HOURS\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"MINUTES\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"SECONDS\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"TIMEZONE\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"TZ\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"NOW\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"UUID\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STRUUID\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"MD5\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"SHA1\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"SHA256\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"SHA384\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"SHA512\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"COALESCE\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"IF\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STRLANG\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STRDT\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"SAMETERM\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"ISIRI\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"ISURI\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"ISBLANK\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"ISLITERAL\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"ISNUMERIC\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"SUBSTR\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"REPLACE\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"REGEX\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"EXISTS\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"NOT\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"IRI_REF\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"PNAME_LN\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"PNAME_NS\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"VALUES\": [], \r\n     \"LIMIT\": [], \r\n     \"OFFSET\": [], \r\n     \"$\": [], \r\n     \"}\": []}, \r\n  \"*usingClause\" : {\r\n     \"USING\": [\"usingClause\",\"*usingClause\"], \r\n     \"WHERE\": []}, \r\n  \"*var\" : {\r\n     \"VAR1\": [\"var\",\"*var\"], \r\n     \"VAR2\": [\"var\",\"*var\"], \r\n     \")\": []}, \r\n  \"*varOrIRIref\" : {\r\n     \"VAR1\": [\"varOrIRIref\",\"*varOrIRIref\"], \r\n     \"VAR2\": [\"varOrIRIref\",\"*varOrIRIref\"], \r\n     \"IRI_REF\": [\"varOrIRIref\",\"*varOrIRIref\"], \r\n     \"PNAME_LN\": [\"varOrIRIref\",\"*varOrIRIref\"], \r\n     \"PNAME_NS\": [\"varOrIRIref\",\"*varOrIRIref\"], \r\n     \"ORDER\": [], \r\n     \"HAVING\": [], \r\n     \"GROUP\": [], \r\n     \"LIMIT\": [], \r\n     \"OFFSET\": [], \r\n     \"WHERE\": [], \r\n     \"{\": [], \r\n     \"FROM\": [], \r\n     \"VALUES\": [], \r\n     \"$\": []}, \r\n  \"+graphNode\" : {\r\n     \"(\": [\"graphNode\",\"*graphNode\"], \r\n     \"[\": [\"graphNode\",\"*graphNode\"], \r\n     \"VAR1\": [\"graphNode\",\"*graphNode\"], \r\n     \"VAR2\": [\"graphNode\",\"*graphNode\"], \r\n     \"NIL\": [\"graphNode\",\"*graphNode\"], \r\n     \"IRI_REF\": [\"graphNode\",\"*graphNode\"], \r\n     \"TRUE\": [\"graphNode\",\"*graphNode\"], \r\n     \"FALSE\": [\"graphNode\",\"*graphNode\"], \r\n     \"BLANK_NODE_LABEL\": [\"graphNode\",\"*graphNode\"], \r\n     \"ANON\": [\"graphNode\",\"*graphNode\"], \r\n     \"PNAME_LN\": [\"graphNode\",\"*graphNode\"], \r\n     \"PNAME_NS\": [\"graphNode\",\"*graphNode\"], \r\n     \"STRING_LITERAL1\": [\"graphNode\",\"*graphNode\"], \r\n     \"STRING_LITERAL2\": [\"graphNode\",\"*graphNode\"], \r\n     \"STRING_LITERAL_LONG1\": [\"graphNode\",\"*graphNode\"], \r\n     \"STRING_LITERAL_LONG2\": [\"graphNode\",\"*graphNode\"], \r\n     \"INTEGER\": [\"graphNode\",\"*graphNode\"], \r\n     \"DECIMAL\": [\"graphNode\",\"*graphNode\"], \r\n     \"DOUBLE\": [\"graphNode\",\"*graphNode\"], \r\n     \"INTEGER_POSITIVE\": [\"graphNode\",\"*graphNode\"], \r\n     \"DECIMAL_POSITIVE\": [\"graphNode\",\"*graphNode\"], \r\n     \"DOUBLE_POSITIVE\": [\"graphNode\",\"*graphNode\"], \r\n     \"INTEGER_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \r\n     \"DECIMAL_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \r\n     \"DOUBLE_NEGATIVE\": [\"graphNode\",\"*graphNode\"]}, \r\n  \"+graphNodePath\" : {\r\n     \"(\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"[\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"VAR1\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"VAR2\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"NIL\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"IRI_REF\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"TRUE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"FALSE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"BLANK_NODE_LABEL\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"ANON\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"PNAME_LN\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"PNAME_NS\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"STRING_LITERAL1\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"STRING_LITERAL2\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"STRING_LITERAL_LONG1\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"STRING_LITERAL_LONG2\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"INTEGER\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"DECIMAL\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"DOUBLE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"INTEGER_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"DECIMAL_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"DOUBLE_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"INTEGER_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"DECIMAL_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"DOUBLE_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"]}, \r\n  \"+groupCondition\" : {\r\n     \"(\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STR\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"LANG\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"LANGMATCHES\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"DATATYPE\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"BOUND\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"IRI\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"URI\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"BNODE\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"RAND\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"ABS\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"CEIL\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"FLOOR\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"ROUND\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"CONCAT\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STRLEN\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"UCASE\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"LCASE\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"ENCODE_FOR_URI\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"CONTAINS\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STRSTARTS\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STRENDS\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STRBEFORE\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STRAFTER\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"YEAR\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"MONTH\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"DAY\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"HOURS\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"MINUTES\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"SECONDS\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"TIMEZONE\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"TZ\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"NOW\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"UUID\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STRUUID\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"MD5\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"SHA1\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"SHA256\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"SHA384\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"SHA512\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"COALESCE\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"IF\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STRLANG\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STRDT\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"SAMETERM\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"ISIRI\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"ISURI\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"ISBLANK\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"ISLITERAL\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"ISNUMERIC\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"VAR1\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"VAR2\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"SUBSTR\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"REPLACE\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"REGEX\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"EXISTS\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"NOT\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"IRI_REF\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"PNAME_LN\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"PNAME_NS\": [\"groupCondition\",\"*groupCondition\"]}, \r\n  \"+havingCondition\" : {\r\n     \"(\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STR\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"LANG\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"LANGMATCHES\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"DATATYPE\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"BOUND\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"IRI\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"URI\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"BNODE\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"RAND\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"ABS\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"CEIL\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"FLOOR\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"ROUND\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"CONCAT\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STRLEN\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"UCASE\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"LCASE\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"ENCODE_FOR_URI\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"CONTAINS\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STRSTARTS\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STRENDS\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STRBEFORE\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STRAFTER\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"YEAR\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"MONTH\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"DAY\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"HOURS\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"MINUTES\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"SECONDS\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"TIMEZONE\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"TZ\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"NOW\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"UUID\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STRUUID\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"MD5\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"SHA1\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"SHA256\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"SHA384\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"SHA512\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"COALESCE\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"IF\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STRLANG\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STRDT\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"SAMETERM\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"ISIRI\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"ISURI\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"ISBLANK\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"ISLITERAL\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"ISNUMERIC\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"SUBSTR\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"REPLACE\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"REGEX\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"EXISTS\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"NOT\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"IRI_REF\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"PNAME_LN\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"PNAME_NS\": [\"havingCondition\",\"*havingCondition\"]}, \r\n  \"+or([var,[ (,expression,AS,var,)]])\" : {\r\n     \"(\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \r\n     \"VAR1\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \r\n     \"VAR2\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"]}, \r\n  \"+orderCondition\" : {\r\n     \"ASC\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"DESC\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"VAR1\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"VAR2\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"(\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STR\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"LANG\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"LANGMATCHES\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"DATATYPE\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"BOUND\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"IRI\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"URI\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"BNODE\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"RAND\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"ABS\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"CEIL\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"FLOOR\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"ROUND\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"CONCAT\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STRLEN\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"UCASE\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"LCASE\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"ENCODE_FOR_URI\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"CONTAINS\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STRSTARTS\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STRENDS\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STRBEFORE\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STRAFTER\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"YEAR\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"MONTH\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"DAY\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"HOURS\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"MINUTES\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"SECONDS\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"TIMEZONE\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"TZ\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"NOW\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"UUID\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STRUUID\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"MD5\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"SHA1\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"SHA256\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"SHA384\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"SHA512\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"COALESCE\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"IF\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STRLANG\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STRDT\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"SAMETERM\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"ISIRI\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"ISURI\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"ISBLANK\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"ISLITERAL\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"ISNUMERIC\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"SUBSTR\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"REPLACE\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"REGEX\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"EXISTS\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"NOT\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"IRI_REF\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"PNAME_LN\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"PNAME_NS\": [\"orderCondition\",\"*orderCondition\"]}, \r\n  \"+varOrIRIref\" : {\r\n     \"VAR1\": [\"varOrIRIref\",\"*varOrIRIref\"], \r\n     \"VAR2\": [\"varOrIRIref\",\"*varOrIRIref\"], \r\n     \"IRI_REF\": [\"varOrIRIref\",\"*varOrIRIref\"], \r\n     \"PNAME_LN\": [\"varOrIRIref\",\"*varOrIRIref\"], \r\n     \"PNAME_NS\": [\"varOrIRIref\",\"*varOrIRIref\"]}, \r\n  \"?.\" : {\r\n     \".\": [\".\"], \r\n     \"VAR1\": [], \r\n     \"VAR2\": [], \r\n     \"NIL\": [], \r\n     \"(\": [], \r\n     \"[\": [], \r\n     \"IRI_REF\": [], \r\n     \"TRUE\": [], \r\n     \"FALSE\": [], \r\n     \"BLANK_NODE_LABEL\": [], \r\n     \"ANON\": [], \r\n     \"PNAME_LN\": [], \r\n     \"PNAME_NS\": [], \r\n     \"STRING_LITERAL1\": [], \r\n     \"STRING_LITERAL2\": [], \r\n     \"STRING_LITERAL_LONG1\": [], \r\n     \"STRING_LITERAL_LONG2\": [], \r\n     \"INTEGER\": [], \r\n     \"DECIMAL\": [], \r\n     \"DOUBLE\": [], \r\n     \"INTEGER_POSITIVE\": [], \r\n     \"DECIMAL_POSITIVE\": [], \r\n     \"DOUBLE_POSITIVE\": [], \r\n     \"INTEGER_NEGATIVE\": [], \r\n     \"DECIMAL_NEGATIVE\": [], \r\n     \"DOUBLE_NEGATIVE\": [], \r\n     \"GRAPH\": [], \r\n     \"{\": [], \r\n     \"OPTIONAL\": [], \r\n     \"MINUS\": [], \r\n     \"SERVICE\": [], \r\n     \"FILTER\": [], \r\n     \"BIND\": [], \r\n     \"VALUES\": [], \r\n     \"}\": []}, \r\n  \"?DISTINCT\" : {\r\n     \"DISTINCT\": [\"DISTINCT\"], \r\n     \"!\": [], \r\n     \"+\": [], \r\n     \"-\": [], \r\n     \"VAR1\": [], \r\n     \"VAR2\": [], \r\n     \"(\": [], \r\n     \"STR\": [], \r\n     \"LANG\": [], \r\n     \"LANGMATCHES\": [], \r\n     \"DATATYPE\": [], \r\n     \"BOUND\": [], \r\n     \"IRI\": [], \r\n     \"URI\": [], \r\n     \"BNODE\": [], \r\n     \"RAND\": [], \r\n     \"ABS\": [], \r\n     \"CEIL\": [], \r\n     \"FLOOR\": [], \r\n     \"ROUND\": [], \r\n     \"CONCAT\": [], \r\n     \"STRLEN\": [], \r\n     \"UCASE\": [], \r\n     \"LCASE\": [], \r\n     \"ENCODE_FOR_URI\": [], \r\n     \"CONTAINS\": [], \r\n     \"STRSTARTS\": [], \r\n     \"STRENDS\": [], \r\n     \"STRBEFORE\": [], \r\n     \"STRAFTER\": [], \r\n     \"YEAR\": [], \r\n     \"MONTH\": [], \r\n     \"DAY\": [], \r\n     \"HOURS\": [], \r\n     \"MINUTES\": [], \r\n     \"SECONDS\": [], \r\n     \"TIMEZONE\": [], \r\n     \"TZ\": [], \r\n     \"NOW\": [], \r\n     \"UUID\": [], \r\n     \"STRUUID\": [], \r\n     \"MD5\": [], \r\n     \"SHA1\": [], \r\n     \"SHA256\": [], \r\n     \"SHA384\": [], \r\n     \"SHA512\": [], \r\n     \"COALESCE\": [], \r\n     \"IF\": [], \r\n     \"STRLANG\": [], \r\n     \"STRDT\": [], \r\n     \"SAMETERM\": [], \r\n     \"ISIRI\": [], \r\n     \"ISURI\": [], \r\n     \"ISBLANK\": [], \r\n     \"ISLITERAL\": [], \r\n     \"ISNUMERIC\": [], \r\n     \"TRUE\": [], \r\n     \"FALSE\": [], \r\n     \"COUNT\": [], \r\n     \"SUM\": [], \r\n     \"MIN\": [], \r\n     \"MAX\": [], \r\n     \"AVG\": [], \r\n     \"SAMPLE\": [], \r\n     \"GROUP_CONCAT\": [], \r\n     \"SUBSTR\": [], \r\n     \"REPLACE\": [], \r\n     \"REGEX\": [], \r\n     \"EXISTS\": [], \r\n     \"NOT\": [], \r\n     \"IRI_REF\": [], \r\n     \"STRING_LITERAL1\": [], \r\n     \"STRING_LITERAL2\": [], \r\n     \"STRING_LITERAL_LONG1\": [], \r\n     \"STRING_LITERAL_LONG2\": [], \r\n     \"INTEGER\": [], \r\n     \"DECIMAL\": [], \r\n     \"DOUBLE\": [], \r\n     \"INTEGER_POSITIVE\": [], \r\n     \"DECIMAL_POSITIVE\": [], \r\n     \"DOUBLE_POSITIVE\": [], \r\n     \"INTEGER_NEGATIVE\": [], \r\n     \"DECIMAL_NEGATIVE\": [], \r\n     \"DOUBLE_NEGATIVE\": [], \r\n     \"PNAME_LN\": [], \r\n     \"PNAME_NS\": [], \r\n     \"*\": []}, \r\n  \"?GRAPH\" : {\r\n     \"GRAPH\": [\"GRAPH\"], \r\n     \"IRI_REF\": [], \r\n     \"PNAME_LN\": [], \r\n     \"PNAME_NS\": []}, \r\n  \"?SILENT\" : {\r\n     \"SILENT\": [\"SILENT\"], \r\n     \"VAR1\": [], \r\n     \"VAR2\": [], \r\n     \"IRI_REF\": [], \r\n     \"PNAME_LN\": [], \r\n     \"PNAME_NS\": []}, \r\n  \"?SILENT_1\" : {\r\n     \"SILENT\": [\"SILENT\"], \r\n     \"IRI_REF\": [], \r\n     \"PNAME_LN\": [], \r\n     \"PNAME_NS\": []}, \r\n  \"?SILENT_2\" : {\r\n     \"SILENT\": [\"SILENT\"], \r\n     \"GRAPH\": [], \r\n     \"DEFAULT\": [], \r\n     \"NAMED\": [], \r\n     \"ALL\": []}, \r\n  \"?SILENT_3\" : {\r\n     \"SILENT\": [\"SILENT\"], \r\n     \"GRAPH\": []}, \r\n  \"?SILENT_4\" : {\r\n     \"SILENT\": [\"SILENT\"], \r\n     \"DEFAULT\": [], \r\n     \"GRAPH\": [], \r\n     \"IRI_REF\": [], \r\n     \"PNAME_LN\": [], \r\n     \"PNAME_NS\": []}, \r\n  \"?WHERE\" : {\r\n     \"WHERE\": [\"WHERE\"], \r\n     \"{\": []}, \r\n  \"?[,,expression]\" : {\r\n     \",\": [\"[,,expression]\"], \r\n     \")\": []}, \r\n  \"?[.,?constructTriples]\" : {\r\n     \".\": [\"[.,?constructTriples]\"], \r\n     \"}\": []}, \r\n  \"?[.,?triplesBlock]\" : {\r\n     \".\": [\"[.,?triplesBlock]\"], \r\n     \"{\": [], \r\n     \"OPTIONAL\": [], \r\n     \"MINUS\": [], \r\n     \"GRAPH\": [], \r\n     \"SERVICE\": [], \r\n     \"FILTER\": [], \r\n     \"BIND\": [], \r\n     \"VALUES\": [], \r\n     \"}\": []}, \r\n  \"?[.,?triplesTemplate]\" : {\r\n     \".\": [\"[.,?triplesTemplate]\"], \r\n     \"}\": [], \r\n     \"GRAPH\": []}, \r\n  \"?[;,SEPARATOR,=,string]\" : {\r\n     \";\": [\"[;,SEPARATOR,=,string]\"], \r\n     \")\": []}, \r\n  \"?[;,update]\" : {\r\n     \";\": [\"[;,update]\"], \r\n     \"$\": []}, \r\n  \"?[AS,var]\" : {\r\n     \"AS\": [\"[AS,var]\"], \r\n     \")\": []}, \r\n  \"?[INTO,graphRef]\" : {\r\n     \"INTO\": [\"[INTO,graphRef]\"], \r\n     \";\": [], \r\n     \"$\": []}, \r\n  \"?[or([verbPath,verbSimple]),objectList]\" : {\r\n     \"VAR1\": [\"[or([verbPath,verbSimple]),objectList]\"], \r\n     \"VAR2\": [\"[or([verbPath,verbSimple]),objectList]\"], \r\n     \"^\": [\"[or([verbPath,verbSimple]),objectList]\"], \r\n     \"a\": [\"[or([verbPath,verbSimple]),objectList]\"], \r\n     \"!\": [\"[or([verbPath,verbSimple]),objectList]\"], \r\n     \"(\": [\"[or([verbPath,verbSimple]),objectList]\"], \r\n     \"IRI_REF\": [\"[or([verbPath,verbSimple]),objectList]\"], \r\n     \"PNAME_LN\": [\"[or([verbPath,verbSimple]),objectList]\"], \r\n     \"PNAME_NS\": [\"[or([verbPath,verbSimple]),objectList]\"], \r\n     \";\": [], \r\n     \".\": [], \r\n     \"]\": [], \r\n     \"{\": [], \r\n     \"OPTIONAL\": [], \r\n     \"MINUS\": [], \r\n     \"GRAPH\": [], \r\n     \"SERVICE\": [], \r\n     \"FILTER\": [], \r\n     \"BIND\": [], \r\n     \"VALUES\": [], \r\n     \"}\": []}, \r\n  \"?[pathOneInPropertySet,*[|,pathOneInPropertySet]]\" : {\r\n     \"a\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \r\n     \"^\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \r\n     \"IRI_REF\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \r\n     \"PNAME_LN\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \r\n     \"PNAME_NS\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \r\n     \")\": []}, \r\n  \"?[update1,?[;,update]]\" : {\r\n     \"INSERT\": [\"[update1,?[;,update]]\"], \r\n     \"DELETE\": [\"[update1,?[;,update]]\"], \r\n     \"LOAD\": [\"[update1,?[;,update]]\"], \r\n     \"CLEAR\": [\"[update1,?[;,update]]\"], \r\n     \"DROP\": [\"[update1,?[;,update]]\"], \r\n     \"ADD\": [\"[update1,?[;,update]]\"], \r\n     \"MOVE\": [\"[update1,?[;,update]]\"], \r\n     \"COPY\": [\"[update1,?[;,update]]\"], \r\n     \"CREATE\": [\"[update1,?[;,update]]\"], \r\n     \"WITH\": [\"[update1,?[;,update]]\"], \r\n     \"$\": []}, \r\n  \"?[verb,objectList]\" : {\r\n     \"a\": [\"[verb,objectList]\"], \r\n     \"VAR1\": [\"[verb,objectList]\"], \r\n     \"VAR2\": [\"[verb,objectList]\"], \r\n     \"IRI_REF\": [\"[verb,objectList]\"], \r\n     \"PNAME_LN\": [\"[verb,objectList]\"], \r\n     \"PNAME_NS\": [\"[verb,objectList]\"], \r\n     \";\": [], \r\n     \".\": [], \r\n     \"]\": [], \r\n     \"}\": [], \r\n     \"GRAPH\": [], \r\n     \"{\": [], \r\n     \"OPTIONAL\": [], \r\n     \"MINUS\": [], \r\n     \"SERVICE\": [], \r\n     \"FILTER\": [], \r\n     \"BIND\": [], \r\n     \"VALUES\": []}, \r\n  \"?argList\" : {\r\n     \"NIL\": [\"argList\"], \r\n     \"(\": [\"argList\"], \r\n     \"AS\": [], \r\n     \")\": [], \r\n     \",\": [], \r\n     \"||\": [], \r\n     \"&&\": [], \r\n     \"=\": [], \r\n     \"!=\": [], \r\n     \"<\": [], \r\n     \">\": [], \r\n     \"<=\": [], \r\n     \">=\": [], \r\n     \"IN\": [], \r\n     \"NOT\": [], \r\n     \"+\": [], \r\n     \"-\": [], \r\n     \"INTEGER_POSITIVE\": [], \r\n     \"DECIMAL_POSITIVE\": [], \r\n     \"DOUBLE_POSITIVE\": [], \r\n     \"INTEGER_NEGATIVE\": [], \r\n     \"DECIMAL_NEGATIVE\": [], \r\n     \"DOUBLE_NEGATIVE\": [], \r\n     \"*\": [], \r\n     \"/\": [], \r\n     \";\": []}, \r\n  \"?constructTriples\" : {\r\n     \"VAR1\": [\"constructTriples\"], \r\n     \"VAR2\": [\"constructTriples\"], \r\n     \"NIL\": [\"constructTriples\"], \r\n     \"(\": [\"constructTriples\"], \r\n     \"[\": [\"constructTriples\"], \r\n     \"IRI_REF\": [\"constructTriples\"], \r\n     \"TRUE\": [\"constructTriples\"], \r\n     \"FALSE\": [\"constructTriples\"], \r\n     \"BLANK_NODE_LABEL\": [\"constructTriples\"], \r\n     \"ANON\": [\"constructTriples\"], \r\n     \"PNAME_LN\": [\"constructTriples\"], \r\n     \"PNAME_NS\": [\"constructTriples\"], \r\n     \"STRING_LITERAL1\": [\"constructTriples\"], \r\n     \"STRING_LITERAL2\": [\"constructTriples\"], \r\n     \"STRING_LITERAL_LONG1\": [\"constructTriples\"], \r\n     \"STRING_LITERAL_LONG2\": [\"constructTriples\"], \r\n     \"INTEGER\": [\"constructTriples\"], \r\n     \"DECIMAL\": [\"constructTriples\"], \r\n     \"DOUBLE\": [\"constructTriples\"], \r\n     \"INTEGER_POSITIVE\": [\"constructTriples\"], \r\n     \"DECIMAL_POSITIVE\": [\"constructTriples\"], \r\n     \"DOUBLE_POSITIVE\": [\"constructTriples\"], \r\n     \"INTEGER_NEGATIVE\": [\"constructTriples\"], \r\n     \"DECIMAL_NEGATIVE\": [\"constructTriples\"], \r\n     \"DOUBLE_NEGATIVE\": [\"constructTriples\"], \r\n     \"}\": []}, \r\n  \"?groupClause\" : {\r\n     \"GROUP\": [\"groupClause\"], \r\n     \"VALUES\": [], \r\n     \"LIMIT\": [], \r\n     \"OFFSET\": [], \r\n     \"ORDER\": [], \r\n     \"HAVING\": [], \r\n     \"$\": [], \r\n     \"}\": []}, \r\n  \"?havingClause\" : {\r\n     \"HAVING\": [\"havingClause\"], \r\n     \"VALUES\": [], \r\n     \"LIMIT\": [], \r\n     \"OFFSET\": [], \r\n     \"ORDER\": [], \r\n     \"$\": [], \r\n     \"}\": []}, \r\n  \"?insertClause\" : {\r\n     \"INSERT\": [\"insertClause\"], \r\n     \"WHERE\": [], \r\n     \"USING\": []}, \r\n  \"?limitClause\" : {\r\n     \"LIMIT\": [\"limitClause\"], \r\n     \"VALUES\": [], \r\n     \"$\": [], \r\n     \"}\": []}, \r\n  \"?limitOffsetClauses\" : {\r\n     \"LIMIT\": [\"limitOffsetClauses\"], \r\n     \"OFFSET\": [\"limitOffsetClauses\"], \r\n     \"VALUES\": [], \r\n     \"$\": [], \r\n     \"}\": []}, \r\n  \"?offsetClause\" : {\r\n     \"OFFSET\": [\"offsetClause\"], \r\n     \"VALUES\": [], \r\n     \"$\": [], \r\n     \"}\": []}, \r\n  \"?or([DISTINCT,REDUCED])\" : {\r\n     \"DISTINCT\": [\"or([DISTINCT,REDUCED])\"], \r\n     \"REDUCED\": [\"or([DISTINCT,REDUCED])\"], \r\n     \"*\": [], \r\n     \"(\": [], \r\n     \"VAR1\": [], \r\n     \"VAR2\": []}, \r\n  \"?or([LANGTAG,[^^,iriRef]])\" : {\r\n     \"LANGTAG\": [\"or([LANGTAG,[^^,iriRef]])\"], \r\n     \"^^\": [\"or([LANGTAG,[^^,iriRef]])\"], \r\n     \"UNDEF\": [], \r\n     \"IRI_REF\": [], \r\n     \"TRUE\": [], \r\n     \"FALSE\": [], \r\n     \"PNAME_LN\": [], \r\n     \"PNAME_NS\": [], \r\n     \"STRING_LITERAL1\": [], \r\n     \"STRING_LITERAL2\": [], \r\n     \"STRING_LITERAL_LONG1\": [], \r\n     \"STRING_LITERAL_LONG2\": [], \r\n     \"INTEGER\": [], \r\n     \"DECIMAL\": [], \r\n     \"DOUBLE\": [], \r\n     \"INTEGER_POSITIVE\": [], \r\n     \"DECIMAL_POSITIVE\": [], \r\n     \"DOUBLE_POSITIVE\": [], \r\n     \"INTEGER_NEGATIVE\": [], \r\n     \"DECIMAL_NEGATIVE\": [], \r\n     \"DOUBLE_NEGATIVE\": [], \r\n     \"a\": [], \r\n     \"VAR1\": [], \r\n     \"VAR2\": [], \r\n     \"^\": [], \r\n     \"!\": [], \r\n     \"(\": [], \r\n     \".\": [], \r\n     \";\": [], \r\n     \",\": [], \r\n     \"AS\": [], \r\n     \")\": [], \r\n     \"||\": [], \r\n     \"&&\": [], \r\n     \"=\": [], \r\n     \"!=\": [], \r\n     \"<\": [], \r\n     \">\": [], \r\n     \"<=\": [], \r\n     \">=\": [], \r\n     \"IN\": [], \r\n     \"NOT\": [], \r\n     \"+\": [], \r\n     \"-\": [], \r\n     \"*\": [], \r\n     \"/\": [], \r\n     \"}\": [], \r\n     \"[\": [], \r\n     \"NIL\": [], \r\n     \"BLANK_NODE_LABEL\": [], \r\n     \"ANON\": [], \r\n     \"]\": [], \r\n     \"GRAPH\": [], \r\n     \"{\": [], \r\n     \"OPTIONAL\": [], \r\n     \"MINUS\": [], \r\n     \"SERVICE\": [], \r\n     \"FILTER\": [], \r\n     \"BIND\": [], \r\n     \"VALUES\": []}, \r\n  \"?or([[*,unaryExpression],[/,unaryExpression]])\" : {\r\n     \"*\": [\"or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"/\": [\"or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"+\": [], \r\n     \"-\": [], \r\n     \"INTEGER_POSITIVE\": [], \r\n     \"DECIMAL_POSITIVE\": [], \r\n     \"DOUBLE_POSITIVE\": [], \r\n     \"INTEGER_NEGATIVE\": [], \r\n     \"DECIMAL_NEGATIVE\": [], \r\n     \"DOUBLE_NEGATIVE\": [], \r\n     \"AS\": [], \r\n     \")\": [], \r\n     \",\": [], \r\n     \"||\": [], \r\n     \"&&\": [], \r\n     \"=\": [], \r\n     \"!=\": [], \r\n     \"<\": [], \r\n     \">\": [], \r\n     \"<=\": [], \r\n     \">=\": [], \r\n     \"IN\": [], \r\n     \"NOT\": [], \r\n     \";\": []}, \r\n  \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\" : {\r\n     \"=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"!=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"<\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \">\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"<=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \">=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"IN\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"NOT\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"AS\": [], \r\n     \")\": [], \r\n     \",\": [], \r\n     \"||\": [], \r\n     \"&&\": [], \r\n     \";\": []}, \r\n  \"?orderClause\" : {\r\n     \"ORDER\": [\"orderClause\"], \r\n     \"VALUES\": [], \r\n     \"LIMIT\": [], \r\n     \"OFFSET\": [], \r\n     \"$\": [], \r\n     \"}\": []}, \r\n  \"?pathMod\" : {\r\n     \"*\": [\"pathMod\"], \r\n     \"?\": [\"pathMod\"], \r\n     \"+\": [\"pathMod\"], \r\n     \"{\": [\"pathMod\"], \r\n     \"|\": [], \r\n     \"/\": [], \r\n     \")\": [], \r\n     \"(\": [], \r\n     \"[\": [], \r\n     \"VAR1\": [], \r\n     \"VAR2\": [], \r\n     \"NIL\": [], \r\n     \"IRI_REF\": [], \r\n     \"TRUE\": [], \r\n     \"FALSE\": [], \r\n     \"BLANK_NODE_LABEL\": [], \r\n     \"ANON\": [], \r\n     \"PNAME_LN\": [], \r\n     \"PNAME_NS\": [], \r\n     \"STRING_LITERAL1\": [], \r\n     \"STRING_LITERAL2\": [], \r\n     \"STRING_LITERAL_LONG1\": [], \r\n     \"STRING_LITERAL_LONG2\": [], \r\n     \"INTEGER\": [], \r\n     \"DECIMAL\": [], \r\n     \"DOUBLE\": [], \r\n     \"INTEGER_POSITIVE\": [], \r\n     \"DECIMAL_POSITIVE\": [], \r\n     \"DOUBLE_POSITIVE\": [], \r\n     \"INTEGER_NEGATIVE\": [], \r\n     \"DECIMAL_NEGATIVE\": [], \r\n     \"DOUBLE_NEGATIVE\": []}, \r\n  \"?triplesBlock\" : {\r\n     \"VAR1\": [\"triplesBlock\"], \r\n     \"VAR2\": [\"triplesBlock\"], \r\n     \"NIL\": [\"triplesBlock\"], \r\n     \"(\": [\"triplesBlock\"], \r\n     \"[\": [\"triplesBlock\"], \r\n     \"IRI_REF\": [\"triplesBlock\"], \r\n     \"TRUE\": [\"triplesBlock\"], \r\n     \"FALSE\": [\"triplesBlock\"], \r\n     \"BLANK_NODE_LABEL\": [\"triplesBlock\"], \r\n     \"ANON\": [\"triplesBlock\"], \r\n     \"PNAME_LN\": [\"triplesBlock\"], \r\n     \"PNAME_NS\": [\"triplesBlock\"], \r\n     \"STRING_LITERAL1\": [\"triplesBlock\"], \r\n     \"STRING_LITERAL2\": [\"triplesBlock\"], \r\n     \"STRING_LITERAL_LONG1\": [\"triplesBlock\"], \r\n     \"STRING_LITERAL_LONG2\": [\"triplesBlock\"], \r\n     \"INTEGER\": [\"triplesBlock\"], \r\n     \"DECIMAL\": [\"triplesBlock\"], \r\n     \"DOUBLE\": [\"triplesBlock\"], \r\n     \"INTEGER_POSITIVE\": [\"triplesBlock\"], \r\n     \"DECIMAL_POSITIVE\": [\"triplesBlock\"], \r\n     \"DOUBLE_POSITIVE\": [\"triplesBlock\"], \r\n     \"INTEGER_NEGATIVE\": [\"triplesBlock\"], \r\n     \"DECIMAL_NEGATIVE\": [\"triplesBlock\"], \r\n     \"DOUBLE_NEGATIVE\": [\"triplesBlock\"], \r\n     \"{\": [], \r\n     \"OPTIONAL\": [], \r\n     \"MINUS\": [], \r\n     \"GRAPH\": [], \r\n     \"SERVICE\": [], \r\n     \"FILTER\": [], \r\n     \"BIND\": [], \r\n     \"VALUES\": [], \r\n     \"}\": []}, \r\n  \"?triplesTemplate\" : {\r\n     \"VAR1\": [\"triplesTemplate\"], \r\n     \"VAR2\": [\"triplesTemplate\"], \r\n     \"NIL\": [\"triplesTemplate\"], \r\n     \"(\": [\"triplesTemplate\"], \r\n     \"[\": [\"triplesTemplate\"], \r\n     \"IRI_REF\": [\"triplesTemplate\"], \r\n     \"TRUE\": [\"triplesTemplate\"], \r\n     \"FALSE\": [\"triplesTemplate\"], \r\n     \"BLANK_NODE_LABEL\": [\"triplesTemplate\"], \r\n     \"ANON\": [\"triplesTemplate\"], \r\n     \"PNAME_LN\": [\"triplesTemplate\"], \r\n     \"PNAME_NS\": [\"triplesTemplate\"], \r\n     \"STRING_LITERAL1\": [\"triplesTemplate\"], \r\n     \"STRING_LITERAL2\": [\"triplesTemplate\"], \r\n     \"STRING_LITERAL_LONG1\": [\"triplesTemplate\"], \r\n     \"STRING_LITERAL_LONG2\": [\"triplesTemplate\"], \r\n     \"INTEGER\": [\"triplesTemplate\"], \r\n     \"DECIMAL\": [\"triplesTemplate\"], \r\n     \"DOUBLE\": [\"triplesTemplate\"], \r\n     \"INTEGER_POSITIVE\": [\"triplesTemplate\"], \r\n     \"DECIMAL_POSITIVE\": [\"triplesTemplate\"], \r\n     \"DOUBLE_POSITIVE\": [\"triplesTemplate\"], \r\n     \"INTEGER_NEGATIVE\": [\"triplesTemplate\"], \r\n     \"DECIMAL_NEGATIVE\": [\"triplesTemplate\"], \r\n     \"DOUBLE_NEGATIVE\": [\"triplesTemplate\"], \r\n     \"}\": [], \r\n     \"GRAPH\": []}, \r\n  \"?whereClause\" : {\r\n     \"WHERE\": [\"whereClause\"], \r\n     \"{\": [\"whereClause\"], \r\n     \"ORDER\": [], \r\n     \"HAVING\": [], \r\n     \"GROUP\": [], \r\n     \"LIMIT\": [], \r\n     \"OFFSET\": [], \r\n     \"VALUES\": [], \r\n     \"$\": []}, \r\n  \"[ (,*dataBlockValue,)]\" : {\r\n     \"(\": [\"(\",\"*dataBlockValue\",\")\"]}, \r\n  \"[ (,*var,)]\" : {\r\n     \"(\": [\"(\",\"*var\",\")\"]}, \r\n  \"[ (,expression,)]\" : {\r\n     \"(\": [\"(\",\"expression\",\")\"]}, \r\n  \"[ (,expression,AS,var,)]\" : {\r\n     \"(\": [\"(\",\"expression\",\"AS\",\"var\",\")\"]}, \r\n  \"[!=,numericExpression]\" : {\r\n     \"!=\": [\"!=\",\"numericExpression\"]}, \r\n  \"[&&,valueLogical]\" : {\r\n     \"&&\": [\"&&\",\"valueLogical\"]}, \r\n  \"[*,unaryExpression]\" : {\r\n     \"*\": [\"*\",\"unaryExpression\"]}, \r\n  \"[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]\" : {\r\n     \"WHERE\": [\"*datasetClause\",\"WHERE\",\"{\",\"?triplesTemplate\",\"}\",\"solutionModifier\"], \r\n     \"FROM\": [\"*datasetClause\",\"WHERE\",\"{\",\"?triplesTemplate\",\"}\",\"solutionModifier\"]}, \r\n  \"[+,multiplicativeExpression]\" : {\r\n     \"+\": [\"+\",\"multiplicativeExpression\"]}, \r\n  \"[,,expression]\" : {\r\n     \",\": [\",\",\"expression\"]}, \r\n  \"[,,integer,}]\" : {\r\n     \",\": [\",\",\"integer\",\"}\"]}, \r\n  \"[,,objectPath]\" : {\r\n     \",\": [\",\",\"objectPath\"]}, \r\n  \"[,,object]\" : {\r\n     \",\": [\",\",\"object\"]}, \r\n  \"[,,or([},[integer,}]])]\" : {\r\n     \",\": [\",\",\"or([},[integer,}]])\"]}, \r\n  \"[-,multiplicativeExpression]\" : {\r\n     \"-\": [\"-\",\"multiplicativeExpression\"]}, \r\n  \"[.,?constructTriples]\" : {\r\n     \".\": [\".\",\"?constructTriples\"]}, \r\n  \"[.,?triplesBlock]\" : {\r\n     \".\": [\".\",\"?triplesBlock\"]}, \r\n  \"[.,?triplesTemplate]\" : {\r\n     \".\": [\".\",\"?triplesTemplate\"]}, \r\n  \"[/,pathEltOrInverse]\" : {\r\n     \"/\": [\"/\",\"pathEltOrInverse\"]}, \r\n  \"[/,unaryExpression]\" : {\r\n     \"/\": [\"/\",\"unaryExpression\"]}, \r\n  \"[;,?[or([verbPath,verbSimple]),objectList]]\" : {\r\n     \";\": [\";\",\"?[or([verbPath,verbSimple]),objectList]\"]}, \r\n  \"[;,?[verb,objectList]]\" : {\r\n     \";\": [\";\",\"?[verb,objectList]\"]}, \r\n  \"[;,SEPARATOR,=,string]\" : {\r\n     \";\": [\";\",\"SEPARATOR\",\"=\",\"string\"]}, \r\n  \"[;,update]\" : {\r\n     \";\": [\";\",\"update\"]}, \r\n  \"[<,numericExpression]\" : {\r\n     \"<\": [\"<\",\"numericExpression\"]}, \r\n  \"[<=,numericExpression]\" : {\r\n     \"<=\": [\"<=\",\"numericExpression\"]}, \r\n  \"[=,numericExpression]\" : {\r\n     \"=\": [\"=\",\"numericExpression\"]}, \r\n  \"[>,numericExpression]\" : {\r\n     \">\": [\">\",\"numericExpression\"]}, \r\n  \"[>=,numericExpression]\" : {\r\n     \">=\": [\">=\",\"numericExpression\"]}, \r\n  \"[AS,var]\" : {\r\n     \"AS\": [\"AS\",\"var\"]}, \r\n  \"[IN,expressionList]\" : {\r\n     \"IN\": [\"IN\",\"expressionList\"]}, \r\n  \"[INTO,graphRef]\" : {\r\n     \"INTO\": [\"INTO\",\"graphRef\"]}, \r\n  \"[NAMED,iriRef]\" : {\r\n     \"NAMED\": [\"NAMED\",\"iriRef\"]}, \r\n  \"[NOT,IN,expressionList]\" : {\r\n     \"NOT\": [\"NOT\",\"IN\",\"expressionList\"]}, \r\n  \"[UNION,groupGraphPattern]\" : {\r\n     \"UNION\": [\"UNION\",\"groupGraphPattern\"]}, \r\n  \"[^^,iriRef]\" : {\r\n     \"^^\": [\"^^\",\"iriRef\"]}, \r\n  \"[constructTemplate,*datasetClause,whereClause,solutionModifier]\" : {\r\n     \"{\": [\"constructTemplate\",\"*datasetClause\",\"whereClause\",\"solutionModifier\"]}, \r\n  \"[deleteClause,?insertClause]\" : {\r\n     \"DELETE\": [\"deleteClause\",\"?insertClause\"]}, \r\n  \"[graphPatternNotTriples,?.,?triplesBlock]\" : {\r\n     \"{\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \r\n     \"OPTIONAL\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \r\n     \"MINUS\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \r\n     \"GRAPH\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \r\n     \"SERVICE\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \r\n     \"FILTER\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \r\n     \"BIND\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \r\n     \"VALUES\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"]}, \r\n  \"[integer,or([[,,or([},[integer,}]])],}])]\" : {\r\n     \"INTEGER\": [\"integer\",\"or([[,,or([},[integer,}]])],}])\"]}, \r\n  \"[integer,}]\" : {\r\n     \"INTEGER\": [\"integer\",\"}\"]}, \r\n  \"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\" : {\r\n     \"INTEGER_POSITIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"DECIMAL_POSITIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"DOUBLE_POSITIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"INTEGER_NEGATIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"DECIMAL_NEGATIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"DOUBLE_NEGATIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"]}, \r\n  \"[or([verbPath,verbSimple]),objectList]\" : {\r\n     \"VAR1\": [\"or([verbPath,verbSimple])\",\"objectList\"], \r\n     \"VAR2\": [\"or([verbPath,verbSimple])\",\"objectList\"], \r\n     \"^\": [\"or([verbPath,verbSimple])\",\"objectList\"], \r\n     \"a\": [\"or([verbPath,verbSimple])\",\"objectList\"], \r\n     \"!\": [\"or([verbPath,verbSimple])\",\"objectList\"], \r\n     \"(\": [\"or([verbPath,verbSimple])\",\"objectList\"], \r\n     \"IRI_REF\": [\"or([verbPath,verbSimple])\",\"objectList\"], \r\n     \"PNAME_LN\": [\"or([verbPath,verbSimple])\",\"objectList\"], \r\n     \"PNAME_NS\": [\"or([verbPath,verbSimple])\",\"objectList\"]}, \r\n  \"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\" : {\r\n     \"a\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \r\n     \"^\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \r\n     \"IRI_REF\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \r\n     \"PNAME_LN\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \r\n     \"PNAME_NS\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"]}, \r\n  \"[quadsNotTriples,?.,?triplesTemplate]\" : {\r\n     \"GRAPH\": [\"quadsNotTriples\",\"?.\",\"?triplesTemplate\"]}, \r\n  \"[update1,?[;,update]]\" : {\r\n     \"INSERT\": [\"update1\",\"?[;,update]\"], \r\n     \"DELETE\": [\"update1\",\"?[;,update]\"], \r\n     \"LOAD\": [\"update1\",\"?[;,update]\"], \r\n     \"CLEAR\": [\"update1\",\"?[;,update]\"], \r\n     \"DROP\": [\"update1\",\"?[;,update]\"], \r\n     \"ADD\": [\"update1\",\"?[;,update]\"], \r\n     \"MOVE\": [\"update1\",\"?[;,update]\"], \r\n     \"COPY\": [\"update1\",\"?[;,update]\"], \r\n     \"CREATE\": [\"update1\",\"?[;,update]\"], \r\n     \"WITH\": [\"update1\",\"?[;,update]\"]}, \r\n  \"[verb,objectList]\" : {\r\n     \"a\": [\"verb\",\"objectList\"], \r\n     \"VAR1\": [\"verb\",\"objectList\"], \r\n     \"VAR2\": [\"verb\",\"objectList\"], \r\n     \"IRI_REF\": [\"verb\",\"objectList\"], \r\n     \"PNAME_LN\": [\"verb\",\"objectList\"], \r\n     \"PNAME_NS\": [\"verb\",\"objectList\"]}, \r\n  \"[|,pathOneInPropertySet]\" : {\r\n     \"|\": [\"|\",\"pathOneInPropertySet\"]}, \r\n  \"[|,pathSequence]\" : {\r\n     \"|\": [\"|\",\"pathSequence\"]}, \r\n  \"[||,conditionalAndExpression]\" : {\r\n     \"||\": [\"||\",\"conditionalAndExpression\"]}, \r\n  \"add\" : {\r\n     \"ADD\": [\"ADD\",\"?SILENT_4\",\"graphOrDefault\",\"TO\",\"graphOrDefault\"]}, \r\n  \"additiveExpression\" : {\r\n     \"!\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"+\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"-\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"VAR1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"VAR2\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"(\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"STR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"LANG\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"LANGMATCHES\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"DATATYPE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"BOUND\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"IRI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"URI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"BNODE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"RAND\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"ABS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"CEIL\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"FLOOR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"ROUND\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"CONCAT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"STRLEN\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"UCASE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"LCASE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"ENCODE_FOR_URI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"CONTAINS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"STRSTARTS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"STRENDS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"STRBEFORE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"STRAFTER\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"YEAR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"MONTH\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"DAY\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"HOURS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"MINUTES\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"SECONDS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"TIMEZONE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"TZ\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"NOW\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"UUID\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"STRUUID\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"MD5\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"SHA1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"SHA256\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"SHA384\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"SHA512\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"COALESCE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"IF\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"STRLANG\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"STRDT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"SAMETERM\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"ISIRI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"ISURI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"ISBLANK\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"ISLITERAL\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"ISNUMERIC\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"TRUE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"FALSE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"COUNT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"SUM\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"MIN\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"MAX\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"AVG\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"SAMPLE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"GROUP_CONCAT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"SUBSTR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"REPLACE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"REGEX\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"EXISTS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"NOT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"IRI_REF\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"STRING_LITERAL1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"STRING_LITERAL2\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"STRING_LITERAL_LONG1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"STRING_LITERAL_LONG2\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"INTEGER\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"DECIMAL\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"DOUBLE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"INTEGER_POSITIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"DECIMAL_POSITIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"DOUBLE_POSITIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"INTEGER_NEGATIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"DECIMAL_NEGATIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"DOUBLE_NEGATIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"PNAME_LN\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"PNAME_NS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"]}, \r\n  \"aggregate\" : {\r\n     \"COUNT\": [\"COUNT\",\"(\",\"?DISTINCT\",\"or([*,expression])\",\")\"], \r\n     \"SUM\": [\"SUM\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \r\n     \"MIN\": [\"MIN\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \r\n     \"MAX\": [\"MAX\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \r\n     \"AVG\": [\"AVG\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \r\n     \"SAMPLE\": [\"SAMPLE\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \r\n     \"GROUP_CONCAT\": [\"GROUP_CONCAT\",\"(\",\"?DISTINCT\",\"expression\",\"?[;,SEPARATOR,=,string]\",\")\"]}, \r\n  \"allowBnodes\" : {\r\n     \"}\": []}, \r\n  \"allowVars\" : {\r\n     \"}\": []}, \r\n  \"argList\" : {\r\n     \"NIL\": [\"NIL\"], \r\n     \"(\": [\"(\",\"?DISTINCT\",\"expression\",\"*[,,expression]\",\")\"]}, \r\n  \"askQuery\" : {\r\n     \"ASK\": [\"ASK\",\"*datasetClause\",\"whereClause\",\"solutionModifier\"]}, \r\n  \"baseDecl\" : {\r\n     \"BASE\": [\"BASE\",\"IRI_REF\"]}, \r\n  \"bind\" : {\r\n     \"BIND\": [\"BIND\",\"(\",\"expression\",\"AS\",\"var\",\")\"]}, \r\n  \"blankNode\" : {\r\n     \"BLANK_NODE_LABEL\": [\"BLANK_NODE_LABEL\"], \r\n     \"ANON\": [\"ANON\"]}, \r\n  \"blankNodePropertyList\" : {\r\n     \"[\": [\"[\",\"propertyListNotEmpty\",\"]\"]}, \r\n  \"blankNodePropertyListPath\" : {\r\n     \"[\": [\"[\",\"propertyListPathNotEmpty\",\"]\"]}, \r\n  \"booleanLiteral\" : {\r\n     \"TRUE\": [\"TRUE\"], \r\n     \"FALSE\": [\"FALSE\"]}, \r\n  \"brackettedExpression\" : {\r\n     \"(\": [\"(\",\"expression\",\")\"]}, \r\n  \"builtInCall\" : {\r\n     \"STR\": [\"STR\",\"(\",\"expression\",\")\"], \r\n     \"LANG\": [\"LANG\",\"(\",\"expression\",\")\"], \r\n     \"LANGMATCHES\": [\"LANGMATCHES\",\"(\",\"expression\",\",\",\"expression\",\")\"], \r\n     \"DATATYPE\": [\"DATATYPE\",\"(\",\"expression\",\")\"], \r\n     \"BOUND\": [\"BOUND\",\"(\",\"var\",\")\"], \r\n     \"IRI\": [\"IRI\",\"(\",\"expression\",\")\"], \r\n     \"URI\": [\"URI\",\"(\",\"expression\",\")\"], \r\n     \"BNODE\": [\"BNODE\",\"or([[ (,expression,)],NIL])\"], \r\n     \"RAND\": [\"RAND\",\"NIL\"], \r\n     \"ABS\": [\"ABS\",\"(\",\"expression\",\")\"], \r\n     \"CEIL\": [\"CEIL\",\"(\",\"expression\",\")\"], \r\n     \"FLOOR\": [\"FLOOR\",\"(\",\"expression\",\")\"], \r\n     \"ROUND\": [\"ROUND\",\"(\",\"expression\",\")\"], \r\n     \"CONCAT\": [\"CONCAT\",\"expressionList\"], \r\n     \"SUBSTR\": [\"substringExpression\"], \r\n     \"STRLEN\": [\"STRLEN\",\"(\",\"expression\",\")\"], \r\n     \"REPLACE\": [\"strReplaceExpression\"], \r\n     \"UCASE\": [\"UCASE\",\"(\",\"expression\",\")\"], \r\n     \"LCASE\": [\"LCASE\",\"(\",\"expression\",\")\"], \r\n     \"ENCODE_FOR_URI\": [\"ENCODE_FOR_URI\",\"(\",\"expression\",\")\"], \r\n     \"CONTAINS\": [\"CONTAINS\",\"(\",\"expression\",\",\",\"expression\",\")\"], \r\n     \"STRSTARTS\": [\"STRSTARTS\",\"(\",\"expression\",\",\",\"expression\",\")\"], \r\n     \"STRENDS\": [\"STRENDS\",\"(\",\"expression\",\",\",\"expression\",\")\"], \r\n     \"STRBEFORE\": [\"STRBEFORE\",\"(\",\"expression\",\",\",\"expression\",\")\"], \r\n     \"STRAFTER\": [\"STRAFTER\",\"(\",\"expression\",\",\",\"expression\",\")\"], \r\n     \"YEAR\": [\"YEAR\",\"(\",\"expression\",\")\"], \r\n     \"MONTH\": [\"MONTH\",\"(\",\"expression\",\")\"], \r\n     \"DAY\": [\"DAY\",\"(\",\"expression\",\")\"], \r\n     \"HOURS\": [\"HOURS\",\"(\",\"expression\",\")\"], \r\n     \"MINUTES\": [\"MINUTES\",\"(\",\"expression\",\")\"], \r\n     \"SECONDS\": [\"SECONDS\",\"(\",\"expression\",\")\"], \r\n     \"TIMEZONE\": [\"TIMEZONE\",\"(\",\"expression\",\")\"], \r\n     \"TZ\": [\"TZ\",\"(\",\"expression\",\")\"], \r\n     \"NOW\": [\"NOW\",\"NIL\"], \r\n     \"UUID\": [\"UUID\",\"NIL\"], \r\n     \"STRUUID\": [\"STRUUID\",\"NIL\"], \r\n     \"MD5\": [\"MD5\",\"(\",\"expression\",\")\"], \r\n     \"SHA1\": [\"SHA1\",\"(\",\"expression\",\")\"], \r\n     \"SHA256\": [\"SHA256\",\"(\",\"expression\",\")\"], \r\n     \"SHA384\": [\"SHA384\",\"(\",\"expression\",\")\"], \r\n     \"SHA512\": [\"SHA512\",\"(\",\"expression\",\")\"], \r\n     \"COALESCE\": [\"COALESCE\",\"expressionList\"], \r\n     \"IF\": [\"IF\",\"(\",\"expression\",\",\",\"expression\",\",\",\"expression\",\")\"], \r\n     \"STRLANG\": [\"STRLANG\",\"(\",\"expression\",\",\",\"expression\",\")\"], \r\n     \"STRDT\": [\"STRDT\",\"(\",\"expression\",\",\",\"expression\",\")\"], \r\n     \"SAMETERM\": [\"SAMETERM\",\"(\",\"expression\",\",\",\"expression\",\")\"], \r\n     \"ISIRI\": [\"ISIRI\",\"(\",\"expression\",\")\"], \r\n     \"ISURI\": [\"ISURI\",\"(\",\"expression\",\")\"], \r\n     \"ISBLANK\": [\"ISBLANK\",\"(\",\"expression\",\")\"], \r\n     \"ISLITERAL\": [\"ISLITERAL\",\"(\",\"expression\",\")\"], \r\n     \"ISNUMERIC\": [\"ISNUMERIC\",\"(\",\"expression\",\")\"], \r\n     \"REGEX\": [\"regexExpression\"], \r\n     \"EXISTS\": [\"existsFunc\"], \r\n     \"NOT\": [\"notExistsFunc\"]}, \r\n  \"clear\" : {\r\n     \"CLEAR\": [\"CLEAR\",\"?SILENT_2\",\"graphRefAll\"]}, \r\n  \"collection\" : {\r\n     \"(\": [\"(\",\"+graphNode\",\")\"]}, \r\n  \"collectionPath\" : {\r\n     \"(\": [\"(\",\"+graphNodePath\",\")\"]}, \r\n  \"conditionalAndExpression\" : {\r\n     \"!\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"+\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"-\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"VAR1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"VAR2\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"(\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"STR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"LANG\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"LANGMATCHES\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"DATATYPE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"BOUND\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"IRI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"URI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"BNODE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"RAND\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"ABS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"CEIL\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"FLOOR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"ROUND\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"CONCAT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"STRLEN\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"UCASE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"LCASE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"ENCODE_FOR_URI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"CONTAINS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"STRSTARTS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"STRENDS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"STRBEFORE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"STRAFTER\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"YEAR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"MONTH\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"DAY\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"HOURS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"MINUTES\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"SECONDS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"TIMEZONE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"TZ\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"NOW\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"UUID\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"STRUUID\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"MD5\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"SHA1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"SHA256\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"SHA384\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"SHA512\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"COALESCE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"IF\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"STRLANG\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"STRDT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"SAMETERM\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"ISIRI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"ISURI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"ISBLANK\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"ISLITERAL\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"ISNUMERIC\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"TRUE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"FALSE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"COUNT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"SUM\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"MIN\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"MAX\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"AVG\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"SAMPLE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"GROUP_CONCAT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"SUBSTR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"REPLACE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"REGEX\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"EXISTS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"NOT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"IRI_REF\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"STRING_LITERAL1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"STRING_LITERAL2\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"STRING_LITERAL_LONG1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"STRING_LITERAL_LONG2\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"INTEGER\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"DECIMAL\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"DOUBLE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"INTEGER_POSITIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"DECIMAL_POSITIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"DOUBLE_POSITIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"INTEGER_NEGATIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"DECIMAL_NEGATIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"DOUBLE_NEGATIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"PNAME_LN\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"PNAME_NS\": [\"valueLogical\",\"*[&&,valueLogical]\"]}, \r\n  \"conditionalOrExpression\" : {\r\n     \"!\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"+\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"-\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"VAR1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"VAR2\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"(\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"STR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"LANG\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"LANGMATCHES\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"DATATYPE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"BOUND\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"IRI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"URI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"BNODE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"RAND\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"ABS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"CEIL\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"FLOOR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"ROUND\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"CONCAT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"STRLEN\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"UCASE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"LCASE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"ENCODE_FOR_URI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"CONTAINS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"STRSTARTS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"STRENDS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"STRBEFORE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"STRAFTER\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"YEAR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"MONTH\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"DAY\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"HOURS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"MINUTES\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"SECONDS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"TIMEZONE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"TZ\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"NOW\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"UUID\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"STRUUID\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"MD5\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"SHA1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"SHA256\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"SHA384\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"SHA512\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"COALESCE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"IF\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"STRLANG\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"STRDT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"SAMETERM\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"ISIRI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"ISURI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"ISBLANK\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"ISLITERAL\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"ISNUMERIC\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"TRUE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"FALSE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"COUNT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"SUM\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"MIN\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"MAX\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"AVG\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"SAMPLE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"GROUP_CONCAT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"SUBSTR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"REPLACE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"REGEX\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"EXISTS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"NOT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"IRI_REF\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"STRING_LITERAL1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"STRING_LITERAL2\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"STRING_LITERAL_LONG1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"STRING_LITERAL_LONG2\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"INTEGER\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"DECIMAL\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"DOUBLE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"INTEGER_POSITIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"DECIMAL_POSITIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"DOUBLE_POSITIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"INTEGER_NEGATIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"DECIMAL_NEGATIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"DOUBLE_NEGATIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"PNAME_LN\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"PNAME_NS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"]}, \r\n  \"constraint\" : {\r\n     \"(\": [\"brackettedExpression\"], \r\n     \"STR\": [\"builtInCall\"], \r\n     \"LANG\": [\"builtInCall\"], \r\n     \"LANGMATCHES\": [\"builtInCall\"], \r\n     \"DATATYPE\": [\"builtInCall\"], \r\n     \"BOUND\": [\"builtInCall\"], \r\n     \"IRI\": [\"builtInCall\"], \r\n     \"URI\": [\"builtInCall\"], \r\n     \"BNODE\": [\"builtInCall\"], \r\n     \"RAND\": [\"builtInCall\"], \r\n     \"ABS\": [\"builtInCall\"], \r\n     \"CEIL\": [\"builtInCall\"], \r\n     \"FLOOR\": [\"builtInCall\"], \r\n     \"ROUND\": [\"builtInCall\"], \r\n     \"CONCAT\": [\"builtInCall\"], \r\n     \"STRLEN\": [\"builtInCall\"], \r\n     \"UCASE\": [\"builtInCall\"], \r\n     \"LCASE\": [\"builtInCall\"], \r\n     \"ENCODE_FOR_URI\": [\"builtInCall\"], \r\n     \"CONTAINS\": [\"builtInCall\"], \r\n     \"STRSTARTS\": [\"builtInCall\"], \r\n     \"STRENDS\": [\"builtInCall\"], \r\n     \"STRBEFORE\": [\"builtInCall\"], \r\n     \"STRAFTER\": [\"builtInCall\"], \r\n     \"YEAR\": [\"builtInCall\"], \r\n     \"MONTH\": [\"builtInCall\"], \r\n     \"DAY\": [\"builtInCall\"], \r\n     \"HOURS\": [\"builtInCall\"], \r\n     \"MINUTES\": [\"builtInCall\"], \r\n     \"SECONDS\": [\"builtInCall\"], \r\n     \"TIMEZONE\": [\"builtInCall\"], \r\n     \"TZ\": [\"builtInCall\"], \r\n     \"NOW\": [\"builtInCall\"], \r\n     \"UUID\": [\"builtInCall\"], \r\n     \"STRUUID\": [\"builtInCall\"], \r\n     \"MD5\": [\"builtInCall\"], \r\n     \"SHA1\": [\"builtInCall\"], \r\n     \"SHA256\": [\"builtInCall\"], \r\n     \"SHA384\": [\"builtInCall\"], \r\n     \"SHA512\": [\"builtInCall\"], \r\n     \"COALESCE\": [\"builtInCall\"], \r\n     \"IF\": [\"builtInCall\"], \r\n     \"STRLANG\": [\"builtInCall\"], \r\n     \"STRDT\": [\"builtInCall\"], \r\n     \"SAMETERM\": [\"builtInCall\"], \r\n     \"ISIRI\": [\"builtInCall\"], \r\n     \"ISURI\": [\"builtInCall\"], \r\n     \"ISBLANK\": [\"builtInCall\"], \r\n     \"ISLITERAL\": [\"builtInCall\"], \r\n     \"ISNUMERIC\": [\"builtInCall\"], \r\n     \"SUBSTR\": [\"builtInCall\"], \r\n     \"REPLACE\": [\"builtInCall\"], \r\n     \"REGEX\": [\"builtInCall\"], \r\n     \"EXISTS\": [\"builtInCall\"], \r\n     \"NOT\": [\"builtInCall\"], \r\n     \"IRI_REF\": [\"functionCall\"], \r\n     \"PNAME_LN\": [\"functionCall\"], \r\n     \"PNAME_NS\": [\"functionCall\"]}, \r\n  \"constructQuery\" : {\r\n     \"CONSTRUCT\": [\"CONSTRUCT\",\"or([[constructTemplate,*datasetClause,whereClause,solutionModifier],[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]])\"]}, \r\n  \"constructTemplate\" : {\r\n     \"{\": [\"{\",\"?constructTriples\",\"}\"]}, \r\n  \"constructTriples\" : {\r\n     \"VAR1\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"VAR2\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"NIL\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"(\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"[\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"IRI_REF\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"TRUE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"FALSE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"BLANK_NODE_LABEL\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"ANON\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"PNAME_LN\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"PNAME_NS\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"STRING_LITERAL1\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"STRING_LITERAL2\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"STRING_LITERAL_LONG1\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"STRING_LITERAL_LONG2\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"INTEGER\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"DECIMAL\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"DOUBLE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"INTEGER_POSITIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"DECIMAL_POSITIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"DOUBLE_POSITIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"INTEGER_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"DECIMAL_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"DOUBLE_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"]}, \r\n  \"copy\" : {\r\n     \"COPY\": [\"COPY\",\"?SILENT_4\",\"graphOrDefault\",\"TO\",\"graphOrDefault\"]}, \r\n  \"create\" : {\r\n     \"CREATE\": [\"CREATE\",\"?SILENT_3\",\"graphRef\"]}, \r\n  \"dataBlock\" : {\r\n     \"NIL\": [\"or([inlineDataOneVar,inlineDataFull])\"], \r\n     \"(\": [\"or([inlineDataOneVar,inlineDataFull])\"], \r\n     \"VAR1\": [\"or([inlineDataOneVar,inlineDataFull])\"], \r\n     \"VAR2\": [\"or([inlineDataOneVar,inlineDataFull])\"]}, \r\n  \"dataBlockValue\" : {\r\n     \"IRI_REF\": [\"iriRef\"], \r\n     \"PNAME_LN\": [\"iriRef\"], \r\n     \"PNAME_NS\": [\"iriRef\"], \r\n     \"STRING_LITERAL1\": [\"rdfLiteral\"], \r\n     \"STRING_LITERAL2\": [\"rdfLiteral\"], \r\n     \"STRING_LITERAL_LONG1\": [\"rdfLiteral\"], \r\n     \"STRING_LITERAL_LONG2\": [\"rdfLiteral\"], \r\n     \"INTEGER\": [\"numericLiteral\"], \r\n     \"DECIMAL\": [\"numericLiteral\"], \r\n     \"DOUBLE\": [\"numericLiteral\"], \r\n     \"INTEGER_POSITIVE\": [\"numericLiteral\"], \r\n     \"DECIMAL_POSITIVE\": [\"numericLiteral\"], \r\n     \"DOUBLE_POSITIVE\": [\"numericLiteral\"], \r\n     \"INTEGER_NEGATIVE\": [\"numericLiteral\"], \r\n     \"DECIMAL_NEGATIVE\": [\"numericLiteral\"], \r\n     \"DOUBLE_NEGATIVE\": [\"numericLiteral\"], \r\n     \"TRUE\": [\"booleanLiteral\"], \r\n     \"FALSE\": [\"booleanLiteral\"], \r\n     \"UNDEF\": [\"UNDEF\"]}, \r\n  \"datasetClause\" : {\r\n     \"FROM\": [\"FROM\",\"or([defaultGraphClause,namedGraphClause])\"]}, \r\n  \"defaultGraphClause\" : {\r\n     \"IRI_REF\": [\"sourceSelector\"], \r\n     \"PNAME_LN\": [\"sourceSelector\"], \r\n     \"PNAME_NS\": [\"sourceSelector\"]}, \r\n  \"delete1\" : {\r\n     \"DATA\": [\"DATA\",\"quadDataNoBnodes\"], \r\n     \"WHERE\": [\"WHERE\",\"quadPatternNoBnodes\"], \r\n     \"{\": [\"quadPatternNoBnodes\",\"?insertClause\",\"*usingClause\",\"WHERE\",\"groupGraphPattern\"]}, \r\n  \"deleteClause\" : {\r\n     \"DELETE\": [\"DELETE\",\"quadPattern\"]}, \r\n  \"describeDatasetClause\" : {\r\n     \"FROM\": [\"FROM\",\"or([defaultGraphClause,namedGraphClause])\"]}, \r\n  \"describeQuery\" : {\r\n     \"DESCRIBE\": [\"DESCRIBE\",\"or([+varOrIRIref,*])\",\"*describeDatasetClause\",\"?whereClause\",\"solutionModifier\"]}, \r\n  \"disallowBnodes\" : {\r\n     \"}\": [], \r\n     \"GRAPH\": [], \r\n     \"VAR1\": [], \r\n     \"VAR2\": [], \r\n     \"NIL\": [], \r\n     \"(\": [], \r\n     \"[\": [], \r\n     \"IRI_REF\": [], \r\n     \"TRUE\": [], \r\n     \"FALSE\": [], \r\n     \"BLANK_NODE_LABEL\": [], \r\n     \"ANON\": [], \r\n     \"PNAME_LN\": [], \r\n     \"PNAME_NS\": [], \r\n     \"STRING_LITERAL1\": [], \r\n     \"STRING_LITERAL2\": [], \r\n     \"STRING_LITERAL_LONG1\": [], \r\n     \"STRING_LITERAL_LONG2\": [], \r\n     \"INTEGER\": [], \r\n     \"DECIMAL\": [], \r\n     \"DOUBLE\": [], \r\n     \"INTEGER_POSITIVE\": [], \r\n     \"DECIMAL_POSITIVE\": [], \r\n     \"DOUBLE_POSITIVE\": [], \r\n     \"INTEGER_NEGATIVE\": [], \r\n     \"DECIMAL_NEGATIVE\": [], \r\n     \"DOUBLE_NEGATIVE\": []}, \r\n  \"disallowVars\" : {\r\n     \"}\": [], \r\n     \"GRAPH\": [], \r\n     \"VAR1\": [], \r\n     \"VAR2\": [], \r\n     \"NIL\": [], \r\n     \"(\": [], \r\n     \"[\": [], \r\n     \"IRI_REF\": [], \r\n     \"TRUE\": [], \r\n     \"FALSE\": [], \r\n     \"BLANK_NODE_LABEL\": [], \r\n     \"ANON\": [], \r\n     \"PNAME_LN\": [], \r\n     \"PNAME_NS\": [], \r\n     \"STRING_LITERAL1\": [], \r\n     \"STRING_LITERAL2\": [], \r\n     \"STRING_LITERAL_LONG1\": [], \r\n     \"STRING_LITERAL_LONG2\": [], \r\n     \"INTEGER\": [], \r\n     \"DECIMAL\": [], \r\n     \"DOUBLE\": [], \r\n     \"INTEGER_POSITIVE\": [], \r\n     \"DECIMAL_POSITIVE\": [], \r\n     \"DOUBLE_POSITIVE\": [], \r\n     \"INTEGER_NEGATIVE\": [], \r\n     \"DECIMAL_NEGATIVE\": [], \r\n     \"DOUBLE_NEGATIVE\": []}, \r\n  \"drop\" : {\r\n     \"DROP\": [\"DROP\",\"?SILENT_2\",\"graphRefAll\"]}, \r\n  \"existsFunc\" : {\r\n     \"EXISTS\": [\"EXISTS\",\"groupGraphPattern\"]}, \r\n  \"expression\" : {\r\n     \"!\": [\"conditionalOrExpression\"], \r\n     \"+\": [\"conditionalOrExpression\"], \r\n     \"-\": [\"conditionalOrExpression\"], \r\n     \"VAR1\": [\"conditionalOrExpression\"], \r\n     \"VAR2\": [\"conditionalOrExpression\"], \r\n     \"(\": [\"conditionalOrExpression\"], \r\n     \"STR\": [\"conditionalOrExpression\"], \r\n     \"LANG\": [\"conditionalOrExpression\"], \r\n     \"LANGMATCHES\": [\"conditionalOrExpression\"], \r\n     \"DATATYPE\": [\"conditionalOrExpression\"], \r\n     \"BOUND\": [\"conditionalOrExpression\"], \r\n     \"IRI\": [\"conditionalOrExpression\"], \r\n     \"URI\": [\"conditionalOrExpression\"], \r\n     \"BNODE\": [\"conditionalOrExpression\"], \r\n     \"RAND\": [\"conditionalOrExpression\"], \r\n     \"ABS\": [\"conditionalOrExpression\"], \r\n     \"CEIL\": [\"conditionalOrExpression\"], \r\n     \"FLOOR\": [\"conditionalOrExpression\"], \r\n     \"ROUND\": [\"conditionalOrExpression\"], \r\n     \"CONCAT\": [\"conditionalOrExpression\"], \r\n     \"STRLEN\": [\"conditionalOrExpression\"], \r\n     \"UCASE\": [\"conditionalOrExpression\"], \r\n     \"LCASE\": [\"conditionalOrExpression\"], \r\n     \"ENCODE_FOR_URI\": [\"conditionalOrExpression\"], \r\n     \"CONTAINS\": [\"conditionalOrExpression\"], \r\n     \"STRSTARTS\": [\"conditionalOrExpression\"], \r\n     \"STRENDS\": [\"conditionalOrExpression\"], \r\n     \"STRBEFORE\": [\"conditionalOrExpression\"], \r\n     \"STRAFTER\": [\"conditionalOrExpression\"], \r\n     \"YEAR\": [\"conditionalOrExpression\"], \r\n     \"MONTH\": [\"conditionalOrExpression\"], \r\n     \"DAY\": [\"conditionalOrExpression\"], \r\n     \"HOURS\": [\"conditionalOrExpression\"], \r\n     \"MINUTES\": [\"conditionalOrExpression\"], \r\n     \"SECONDS\": [\"conditionalOrExpression\"], \r\n     \"TIMEZONE\": [\"conditionalOrExpression\"], \r\n     \"TZ\": [\"conditionalOrExpression\"], \r\n     \"NOW\": [\"conditionalOrExpression\"], \r\n     \"UUID\": [\"conditionalOrExpression\"], \r\n     \"STRUUID\": [\"conditionalOrExpression\"], \r\n     \"MD5\": [\"conditionalOrExpression\"], \r\n     \"SHA1\": [\"conditionalOrExpression\"], \r\n     \"SHA256\": [\"conditionalOrExpression\"], \r\n     \"SHA384\": [\"conditionalOrExpression\"], \r\n     \"SHA512\": [\"conditionalOrExpression\"], \r\n     \"COALESCE\": [\"conditionalOrExpression\"], \r\n     \"IF\": [\"conditionalOrExpression\"], \r\n     \"STRLANG\": [\"conditionalOrExpression\"], \r\n     \"STRDT\": [\"conditionalOrExpression\"], \r\n     \"SAMETERM\": [\"conditionalOrExpression\"], \r\n     \"ISIRI\": [\"conditionalOrExpression\"], \r\n     \"ISURI\": [\"conditionalOrExpression\"], \r\n     \"ISBLANK\": [\"conditionalOrExpression\"], \r\n     \"ISLITERAL\": [\"conditionalOrExpression\"], \r\n     \"ISNUMERIC\": [\"conditionalOrExpression\"], \r\n     \"TRUE\": [\"conditionalOrExpression\"], \r\n     \"FALSE\": [\"conditionalOrExpression\"], \r\n     \"COUNT\": [\"conditionalOrExpression\"], \r\n     \"SUM\": [\"conditionalOrExpression\"], \r\n     \"MIN\": [\"conditionalOrExpression\"], \r\n     \"MAX\": [\"conditionalOrExpression\"], \r\n     \"AVG\": [\"conditionalOrExpression\"], \r\n     \"SAMPLE\": [\"conditionalOrExpression\"], \r\n     \"GROUP_CONCAT\": [\"conditionalOrExpression\"], \r\n     \"SUBSTR\": [\"conditionalOrExpression\"], \r\n     \"REPLACE\": [\"conditionalOrExpression\"], \r\n     \"REGEX\": [\"conditionalOrExpression\"], \r\n     \"EXISTS\": [\"conditionalOrExpression\"], \r\n     \"NOT\": [\"conditionalOrExpression\"], \r\n     \"IRI_REF\": [\"conditionalOrExpression\"], \r\n     \"STRING_LITERAL1\": [\"conditionalOrExpression\"], \r\n     \"STRING_LITERAL2\": [\"conditionalOrExpression\"], \r\n     \"STRING_LITERAL_LONG1\": [\"conditionalOrExpression\"], \r\n     \"STRING_LITERAL_LONG2\": [\"conditionalOrExpression\"], \r\n     \"INTEGER\": [\"conditionalOrExpression\"], \r\n     \"DECIMAL\": [\"conditionalOrExpression\"], \r\n     \"DOUBLE\": [\"conditionalOrExpression\"], \r\n     \"INTEGER_POSITIVE\": [\"conditionalOrExpression\"], \r\n     \"DECIMAL_POSITIVE\": [\"conditionalOrExpression\"], \r\n     \"DOUBLE_POSITIVE\": [\"conditionalOrExpression\"], \r\n     \"INTEGER_NEGATIVE\": [\"conditionalOrExpression\"], \r\n     \"DECIMAL_NEGATIVE\": [\"conditionalOrExpression\"], \r\n     \"DOUBLE_NEGATIVE\": [\"conditionalOrExpression\"], \r\n     \"PNAME_LN\": [\"conditionalOrExpression\"], \r\n     \"PNAME_NS\": [\"conditionalOrExpression\"]}, \r\n  \"expressionList\" : {\r\n     \"NIL\": [\"NIL\"], \r\n     \"(\": [\"(\",\"expression\",\"*[,,expression]\",\")\"]}, \r\n  \"filter\" : {\r\n     \"FILTER\": [\"FILTER\",\"constraint\"]}, \r\n  \"functionCall\" : {\r\n     \"IRI_REF\": [\"iriRef\",\"argList\"], \r\n     \"PNAME_LN\": [\"iriRef\",\"argList\"], \r\n     \"PNAME_NS\": [\"iriRef\",\"argList\"]}, \r\n  \"graphGraphPattern\" : {\r\n     \"GRAPH\": [\"GRAPH\",\"varOrIRIref\",\"groupGraphPattern\"]}, \r\n  \"graphNode\" : {\r\n     \"VAR1\": [\"varOrTerm\"], \r\n     \"VAR2\": [\"varOrTerm\"], \r\n     \"NIL\": [\"varOrTerm\"], \r\n     \"IRI_REF\": [\"varOrTerm\"], \r\n     \"TRUE\": [\"varOrTerm\"], \r\n     \"FALSE\": [\"varOrTerm\"], \r\n     \"BLANK_NODE_LABEL\": [\"varOrTerm\"], \r\n     \"ANON\": [\"varOrTerm\"], \r\n     \"PNAME_LN\": [\"varOrTerm\"], \r\n     \"PNAME_NS\": [\"varOrTerm\"], \r\n     \"STRING_LITERAL1\": [\"varOrTerm\"], \r\n     \"STRING_LITERAL2\": [\"varOrTerm\"], \r\n     \"STRING_LITERAL_LONG1\": [\"varOrTerm\"], \r\n     \"STRING_LITERAL_LONG2\": [\"varOrTerm\"], \r\n     \"INTEGER\": [\"varOrTerm\"], \r\n     \"DECIMAL\": [\"varOrTerm\"], \r\n     \"DOUBLE\": [\"varOrTerm\"], \r\n     \"INTEGER_POSITIVE\": [\"varOrTerm\"], \r\n     \"DECIMAL_POSITIVE\": [\"varOrTerm\"], \r\n     \"DOUBLE_POSITIVE\": [\"varOrTerm\"], \r\n     \"INTEGER_NEGATIVE\": [\"varOrTerm\"], \r\n     \"DECIMAL_NEGATIVE\": [\"varOrTerm\"], \r\n     \"DOUBLE_NEGATIVE\": [\"varOrTerm\"], \r\n     \"(\": [\"triplesNode\"], \r\n     \"[\": [\"triplesNode\"]}, \r\n  \"graphNodePath\" : {\r\n     \"VAR1\": [\"varOrTerm\"], \r\n     \"VAR2\": [\"varOrTerm\"], \r\n     \"NIL\": [\"varOrTerm\"], \r\n     \"IRI_REF\": [\"varOrTerm\"], \r\n     \"TRUE\": [\"varOrTerm\"], \r\n     \"FALSE\": [\"varOrTerm\"], \r\n     \"BLANK_NODE_LABEL\": [\"varOrTerm\"], \r\n     \"ANON\": [\"varOrTerm\"], \r\n     \"PNAME_LN\": [\"varOrTerm\"], \r\n     \"PNAME_NS\": [\"varOrTerm\"], \r\n     \"STRING_LITERAL1\": [\"varOrTerm\"], \r\n     \"STRING_LITERAL2\": [\"varOrTerm\"], \r\n     \"STRING_LITERAL_LONG1\": [\"varOrTerm\"], \r\n     \"STRING_LITERAL_LONG2\": [\"varOrTerm\"], \r\n     \"INTEGER\": [\"varOrTerm\"], \r\n     \"DECIMAL\": [\"varOrTerm\"], \r\n     \"DOUBLE\": [\"varOrTerm\"], \r\n     \"INTEGER_POSITIVE\": [\"varOrTerm\"], \r\n     \"DECIMAL_POSITIVE\": [\"varOrTerm\"], \r\n     \"DOUBLE_POSITIVE\": [\"varOrTerm\"], \r\n     \"INTEGER_NEGATIVE\": [\"varOrTerm\"], \r\n     \"DECIMAL_NEGATIVE\": [\"varOrTerm\"], \r\n     \"DOUBLE_NEGATIVE\": [\"varOrTerm\"], \r\n     \"(\": [\"triplesNodePath\"], \r\n     \"[\": [\"triplesNodePath\"]}, \r\n  \"graphOrDefault\" : {\r\n     \"DEFAULT\": [\"DEFAULT\"], \r\n     \"IRI_REF\": [\"?GRAPH\",\"iriRef\"], \r\n     \"PNAME_LN\": [\"?GRAPH\",\"iriRef\"], \r\n     \"PNAME_NS\": [\"?GRAPH\",\"iriRef\"], \r\n     \"GRAPH\": [\"?GRAPH\",\"iriRef\"]}, \r\n  \"graphPatternNotTriples\" : {\r\n     \"{\": [\"groupOrUnionGraphPattern\"], \r\n     \"OPTIONAL\": [\"optionalGraphPattern\"], \r\n     \"MINUS\": [\"minusGraphPattern\"], \r\n     \"GRAPH\": [\"graphGraphPattern\"], \r\n     \"SERVICE\": [\"serviceGraphPattern\"], \r\n     \"FILTER\": [\"filter\"], \r\n     \"BIND\": [\"bind\"], \r\n     \"VALUES\": [\"inlineData\"]}, \r\n  \"graphRef\" : {\r\n     \"GRAPH\": [\"GRAPH\",\"iriRef\"]}, \r\n  \"graphRefAll\" : {\r\n     \"GRAPH\": [\"graphRef\"], \r\n     \"DEFAULT\": [\"DEFAULT\"], \r\n     \"NAMED\": [\"NAMED\"], \r\n     \"ALL\": [\"ALL\"]}, \r\n  \"graphTerm\" : {\r\n     \"IRI_REF\": [\"iriRef\"], \r\n     \"PNAME_LN\": [\"iriRef\"], \r\n     \"PNAME_NS\": [\"iriRef\"], \r\n     \"STRING_LITERAL1\": [\"rdfLiteral\"], \r\n     \"STRING_LITERAL2\": [\"rdfLiteral\"], \r\n     \"STRING_LITERAL_LONG1\": [\"rdfLiteral\"], \r\n     \"STRING_LITERAL_LONG2\": [\"rdfLiteral\"], \r\n     \"INTEGER\": [\"numericLiteral\"], \r\n     \"DECIMAL\": [\"numericLiteral\"], \r\n     \"DOUBLE\": [\"numericLiteral\"], \r\n     \"INTEGER_POSITIVE\": [\"numericLiteral\"], \r\n     \"DECIMAL_POSITIVE\": [\"numericLiteral\"], \r\n     \"DOUBLE_POSITIVE\": [\"numericLiteral\"], \r\n     \"INTEGER_NEGATIVE\": [\"numericLiteral\"], \r\n     \"DECIMAL_NEGATIVE\": [\"numericLiteral\"], \r\n     \"DOUBLE_NEGATIVE\": [\"numericLiteral\"], \r\n     \"TRUE\": [\"booleanLiteral\"], \r\n     \"FALSE\": [\"booleanLiteral\"], \r\n     \"BLANK_NODE_LABEL\": [\"blankNode\"], \r\n     \"ANON\": [\"blankNode\"], \r\n     \"NIL\": [\"NIL\"]}, \r\n  \"groupClause\" : {\r\n     \"GROUP\": [\"GROUP\",\"BY\",\"+groupCondition\"]}, \r\n  \"groupCondition\" : {\r\n     \"STR\": [\"builtInCall\"], \r\n     \"LANG\": [\"builtInCall\"], \r\n     \"LANGMATCHES\": [\"builtInCall\"], \r\n     \"DATATYPE\": [\"builtInCall\"], \r\n     \"BOUND\": [\"builtInCall\"], \r\n     \"IRI\": [\"builtInCall\"], \r\n     \"URI\": [\"builtInCall\"], \r\n     \"BNODE\": [\"builtInCall\"], \r\n     \"RAND\": [\"builtInCall\"], \r\n     \"ABS\": [\"builtInCall\"], \r\n     \"CEIL\": [\"builtInCall\"], \r\n     \"FLOOR\": [\"builtInCall\"], \r\n     \"ROUND\": [\"builtInCall\"], \r\n     \"CONCAT\": [\"builtInCall\"], \r\n     \"STRLEN\": [\"builtInCall\"], \r\n     \"UCASE\": [\"builtInCall\"], \r\n     \"LCASE\": [\"builtInCall\"], \r\n     \"ENCODE_FOR_URI\": [\"builtInCall\"], \r\n     \"CONTAINS\": [\"builtInCall\"], \r\n     \"STRSTARTS\": [\"builtInCall\"], \r\n     \"STRENDS\": [\"builtInCall\"], \r\n     \"STRBEFORE\": [\"builtInCall\"], \r\n     \"STRAFTER\": [\"builtInCall\"], \r\n     \"YEAR\": [\"builtInCall\"], \r\n     \"MONTH\": [\"builtInCall\"], \r\n     \"DAY\": [\"builtInCall\"], \r\n     \"HOURS\": [\"builtInCall\"], \r\n     \"MINUTES\": [\"builtInCall\"], \r\n     \"SECONDS\": [\"builtInCall\"], \r\n     \"TIMEZONE\": [\"builtInCall\"], \r\n     \"TZ\": [\"builtInCall\"], \r\n     \"NOW\": [\"builtInCall\"], \r\n     \"UUID\": [\"builtInCall\"], \r\n     \"STRUUID\": [\"builtInCall\"], \r\n     \"MD5\": [\"builtInCall\"], \r\n     \"SHA1\": [\"builtInCall\"], \r\n     \"SHA256\": [\"builtInCall\"], \r\n     \"SHA384\": [\"builtInCall\"], \r\n     \"SHA512\": [\"builtInCall\"], \r\n     \"COALESCE\": [\"builtInCall\"], \r\n     \"IF\": [\"builtInCall\"], \r\n     \"STRLANG\": [\"builtInCall\"], \r\n     \"STRDT\": [\"builtInCall\"], \r\n     \"SAMETERM\": [\"builtInCall\"], \r\n     \"ISIRI\": [\"builtInCall\"], \r\n     \"ISURI\": [\"builtInCall\"], \r\n     \"ISBLANK\": [\"builtInCall\"], \r\n     \"ISLITERAL\": [\"builtInCall\"], \r\n     \"ISNUMERIC\": [\"builtInCall\"], \r\n     \"SUBSTR\": [\"builtInCall\"], \r\n     \"REPLACE\": [\"builtInCall\"], \r\n     \"REGEX\": [\"builtInCall\"], \r\n     \"EXISTS\": [\"builtInCall\"], \r\n     \"NOT\": [\"builtInCall\"], \r\n     \"IRI_REF\": [\"functionCall\"], \r\n     \"PNAME_LN\": [\"functionCall\"], \r\n     \"PNAME_NS\": [\"functionCall\"], \r\n     \"(\": [\"(\",\"expression\",\"?[AS,var]\",\")\"], \r\n     \"VAR1\": [\"var\"], \r\n     \"VAR2\": [\"var\"]}, \r\n  \"groupGraphPattern\" : {\r\n     \"{\": [\"{\",\"or([subSelect,groupGraphPatternSub])\",\"}\"]}, \r\n  \"groupGraphPatternSub\" : {\r\n     \"{\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"OPTIONAL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"MINUS\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"GRAPH\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"SERVICE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"FILTER\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"BIND\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"VALUES\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"VAR1\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"VAR2\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"NIL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"(\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"[\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"IRI_REF\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"TRUE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"FALSE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"BLANK_NODE_LABEL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"ANON\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"PNAME_LN\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"PNAME_NS\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"STRING_LITERAL1\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"STRING_LITERAL2\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"STRING_LITERAL_LONG1\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"STRING_LITERAL_LONG2\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"INTEGER\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"DECIMAL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"DOUBLE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"INTEGER_POSITIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"DECIMAL_POSITIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"DOUBLE_POSITIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"INTEGER_NEGATIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"DECIMAL_NEGATIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"DOUBLE_NEGATIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"}\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"]}, \r\n  \"groupOrUnionGraphPattern\" : {\r\n     \"{\": [\"groupGraphPattern\",\"*[UNION,groupGraphPattern]\"]}, \r\n  \"havingClause\" : {\r\n     \"HAVING\": [\"HAVING\",\"+havingCondition\"]}, \r\n  \"havingCondition\" : {\r\n     \"(\": [\"constraint\"], \r\n     \"STR\": [\"constraint\"], \r\n     \"LANG\": [\"constraint\"], \r\n     \"LANGMATCHES\": [\"constraint\"], \r\n     \"DATATYPE\": [\"constraint\"], \r\n     \"BOUND\": [\"constraint\"], \r\n     \"IRI\": [\"constraint\"], \r\n     \"URI\": [\"constraint\"], \r\n     \"BNODE\": [\"constraint\"], \r\n     \"RAND\": [\"constraint\"], \r\n     \"ABS\": [\"constraint\"], \r\n     \"CEIL\": [\"constraint\"], \r\n     \"FLOOR\": [\"constraint\"], \r\n     \"ROUND\": [\"constraint\"], \r\n     \"CONCAT\": [\"constraint\"], \r\n     \"STRLEN\": [\"constraint\"], \r\n     \"UCASE\": [\"constraint\"], \r\n     \"LCASE\": [\"constraint\"], \r\n     \"ENCODE_FOR_URI\": [\"constraint\"], \r\n     \"CONTAINS\": [\"constraint\"], \r\n     \"STRSTARTS\": [\"constraint\"], \r\n     \"STRENDS\": [\"constraint\"], \r\n     \"STRBEFORE\": [\"constraint\"], \r\n     \"STRAFTER\": [\"constraint\"], \r\n     \"YEAR\": [\"constraint\"], \r\n     \"MONTH\": [\"constraint\"], \r\n     \"DAY\": [\"constraint\"], \r\n     \"HOURS\": [\"constraint\"], \r\n     \"MINUTES\": [\"constraint\"], \r\n     \"SECONDS\": [\"constraint\"], \r\n     \"TIMEZONE\": [\"constraint\"], \r\n     \"TZ\": [\"constraint\"], \r\n     \"NOW\": [\"constraint\"], \r\n     \"UUID\": [\"constraint\"], \r\n     \"STRUUID\": [\"constraint\"], \r\n     \"MD5\": [\"constraint\"], \r\n     \"SHA1\": [\"constraint\"], \r\n     \"SHA256\": [\"constraint\"], \r\n     \"SHA384\": [\"constraint\"], \r\n     \"SHA512\": [\"constraint\"], \r\n     \"COALESCE\": [\"constraint\"], \r\n     \"IF\": [\"constraint\"], \r\n     \"STRLANG\": [\"constraint\"], \r\n     \"STRDT\": [\"constraint\"], \r\n     \"SAMETERM\": [\"constraint\"], \r\n     \"ISIRI\": [\"constraint\"], \r\n     \"ISURI\": [\"constraint\"], \r\n     \"ISBLANK\": [\"constraint\"], \r\n     \"ISLITERAL\": [\"constraint\"], \r\n     \"ISNUMERIC\": [\"constraint\"], \r\n     \"SUBSTR\": [\"constraint\"], \r\n     \"REPLACE\": [\"constraint\"], \r\n     \"REGEX\": [\"constraint\"], \r\n     \"EXISTS\": [\"constraint\"], \r\n     \"NOT\": [\"constraint\"], \r\n     \"IRI_REF\": [\"constraint\"], \r\n     \"PNAME_LN\": [\"constraint\"], \r\n     \"PNAME_NS\": [\"constraint\"]}, \r\n  \"inlineData\" : {\r\n     \"VALUES\": [\"VALUES\",\"dataBlock\"]}, \r\n  \"inlineDataFull\" : {\r\n     \"NIL\": [\"or([NIL,[ (,*var,)]])\",\"{\",\"*or([[ (,*dataBlockValue,)],NIL])\",\"}\"], \r\n     \"(\": [\"or([NIL,[ (,*var,)]])\",\"{\",\"*or([[ (,*dataBlockValue,)],NIL])\",\"}\"]}, \r\n  \"inlineDataOneVar\" : {\r\n     \"VAR1\": [\"var\",\"{\",\"*dataBlockValue\",\"}\"], \r\n     \"VAR2\": [\"var\",\"{\",\"*dataBlockValue\",\"}\"]}, \r\n  \"insert1\" : {\r\n     \"DATA\": [\"DATA\",\"quadData\"], \r\n     \"{\": [\"quadPattern\",\"*usingClause\",\"WHERE\",\"groupGraphPattern\"]}, \r\n  \"insertClause\" : {\r\n     \"INSERT\": [\"INSERT\",\"quadPattern\"]}, \r\n  \"integer\" : {\r\n     \"INTEGER\": [\"INTEGER\"]}, \r\n  \"iriRef\" : {\r\n     \"IRI_REF\": [\"IRI_REF\"], \r\n     \"PNAME_LN\": [\"prefixedName\"], \r\n     \"PNAME_NS\": [\"prefixedName\"]}, \r\n  \"iriRefOrFunction\" : {\r\n     \"IRI_REF\": [\"iriRef\",\"?argList\"], \r\n     \"PNAME_LN\": [\"iriRef\",\"?argList\"], \r\n     \"PNAME_NS\": [\"iriRef\",\"?argList\"]}, \r\n  \"limitClause\" : {\r\n     \"LIMIT\": [\"LIMIT\",\"INTEGER\"]}, \r\n  \"limitOffsetClauses\" : {\r\n     \"LIMIT\": [\"limitClause\",\"?offsetClause\"], \r\n     \"OFFSET\": [\"offsetClause\",\"?limitClause\"]}, \r\n  \"load\" : {\r\n     \"LOAD\": [\"LOAD\",\"?SILENT_1\",\"iriRef\",\"?[INTO,graphRef]\"]}, \r\n  \"minusGraphPattern\" : {\r\n     \"MINUS\": [\"MINUS\",\"groupGraphPattern\"]}, \r\n  \"modify\" : {\r\n     \"WITH\": [\"WITH\",\"iriRef\",\"or([[deleteClause,?insertClause],insertClause])\",\"*usingClause\",\"WHERE\",\"groupGraphPattern\"]}, \r\n  \"move\" : {\r\n     \"MOVE\": [\"MOVE\",\"?SILENT_4\",\"graphOrDefault\",\"TO\",\"graphOrDefault\"]}, \r\n  \"multiplicativeExpression\" : {\r\n     \"!\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"+\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"-\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"VAR1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"VAR2\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"(\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"STR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"LANG\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"LANGMATCHES\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"DATATYPE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"BOUND\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"IRI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"URI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"BNODE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"RAND\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"ABS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"CEIL\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"FLOOR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"ROUND\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"CONCAT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"STRLEN\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"UCASE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"LCASE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"ENCODE_FOR_URI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"CONTAINS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"STRSTARTS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"STRENDS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"STRBEFORE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"STRAFTER\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"YEAR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"MONTH\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"DAY\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"HOURS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"MINUTES\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"SECONDS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"TIMEZONE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"TZ\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"NOW\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"UUID\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"STRUUID\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"MD5\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"SHA1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"SHA256\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"SHA384\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"SHA512\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"COALESCE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"IF\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"STRLANG\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"STRDT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"SAMETERM\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"ISIRI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"ISURI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"ISBLANK\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"ISLITERAL\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"ISNUMERIC\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"TRUE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"FALSE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"COUNT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"SUM\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"MIN\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"MAX\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"AVG\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"SAMPLE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"GROUP_CONCAT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"SUBSTR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"REPLACE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"REGEX\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"EXISTS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"NOT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"IRI_REF\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"STRING_LITERAL1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"STRING_LITERAL2\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"STRING_LITERAL_LONG1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"STRING_LITERAL_LONG2\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"INTEGER\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"DECIMAL\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"DOUBLE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"INTEGER_POSITIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"DECIMAL_POSITIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"DOUBLE_POSITIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"INTEGER_NEGATIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"DECIMAL_NEGATIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"DOUBLE_NEGATIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"PNAME_LN\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"PNAME_NS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"]}, \r\n  \"namedGraphClause\" : {\r\n     \"NAMED\": [\"NAMED\",\"sourceSelector\"]}, \r\n  \"notExistsFunc\" : {\r\n     \"NOT\": [\"NOT\",\"EXISTS\",\"groupGraphPattern\"]}, \r\n  \"numericExpression\" : {\r\n     \"!\": [\"additiveExpression\"], \r\n     \"+\": [\"additiveExpression\"], \r\n     \"-\": [\"additiveExpression\"], \r\n     \"VAR1\": [\"additiveExpression\"], \r\n     \"VAR2\": [\"additiveExpression\"], \r\n     \"(\": [\"additiveExpression\"], \r\n     \"STR\": [\"additiveExpression\"], \r\n     \"LANG\": [\"additiveExpression\"], \r\n     \"LANGMATCHES\": [\"additiveExpression\"], \r\n     \"DATATYPE\": [\"additiveExpression\"], \r\n     \"BOUND\": [\"additiveExpression\"], \r\n     \"IRI\": [\"additiveExpression\"], \r\n     \"URI\": [\"additiveExpression\"], \r\n     \"BNODE\": [\"additiveExpression\"], \r\n     \"RAND\": [\"additiveExpression\"], \r\n     \"ABS\": [\"additiveExpression\"], \r\n     \"CEIL\": [\"additiveExpression\"], \r\n     \"FLOOR\": [\"additiveExpression\"], \r\n     \"ROUND\": [\"additiveExpression\"], \r\n     \"CONCAT\": [\"additiveExpression\"], \r\n     \"STRLEN\": [\"additiveExpression\"], \r\n     \"UCASE\": [\"additiveExpression\"], \r\n     \"LCASE\": [\"additiveExpression\"], \r\n     \"ENCODE_FOR_URI\": [\"additiveExpression\"], \r\n     \"CONTAINS\": [\"additiveExpression\"], \r\n     \"STRSTARTS\": [\"additiveExpression\"], \r\n     \"STRENDS\": [\"additiveExpression\"], \r\n     \"STRBEFORE\": [\"additiveExpression\"], \r\n     \"STRAFTER\": [\"additiveExpression\"], \r\n     \"YEAR\": [\"additiveExpression\"], \r\n     \"MONTH\": [\"additiveExpression\"], \r\n     \"DAY\": [\"additiveExpression\"], \r\n     \"HOURS\": [\"additiveExpression\"], \r\n     \"MINUTES\": [\"additiveExpression\"], \r\n     \"SECONDS\": [\"additiveExpression\"], \r\n     \"TIMEZONE\": [\"additiveExpression\"], \r\n     \"TZ\": [\"additiveExpression\"], \r\n     \"NOW\": [\"additiveExpression\"], \r\n     \"UUID\": [\"additiveExpression\"], \r\n     \"STRUUID\": [\"additiveExpression\"], \r\n     \"MD5\": [\"additiveExpression\"], \r\n     \"SHA1\": [\"additiveExpression\"], \r\n     \"SHA256\": [\"additiveExpression\"], \r\n     \"SHA384\": [\"additiveExpression\"], \r\n     \"SHA512\": [\"additiveExpression\"], \r\n     \"COALESCE\": [\"additiveExpression\"], \r\n     \"IF\": [\"additiveExpression\"], \r\n     \"STRLANG\": [\"additiveExpression\"], \r\n     \"STRDT\": [\"additiveExpression\"], \r\n     \"SAMETERM\": [\"additiveExpression\"], \r\n     \"ISIRI\": [\"additiveExpression\"], \r\n     \"ISURI\": [\"additiveExpression\"], \r\n     \"ISBLANK\": [\"additiveExpression\"], \r\n     \"ISLITERAL\": [\"additiveExpression\"], \r\n     \"ISNUMERIC\": [\"additiveExpression\"], \r\n     \"TRUE\": [\"additiveExpression\"], \r\n     \"FALSE\": [\"additiveExpression\"], \r\n     \"COUNT\": [\"additiveExpression\"], \r\n     \"SUM\": [\"additiveExpression\"], \r\n     \"MIN\": [\"additiveExpression\"], \r\n     \"MAX\": [\"additiveExpression\"], \r\n     \"AVG\": [\"additiveExpression\"], \r\n     \"SAMPLE\": [\"additiveExpression\"], \r\n     \"GROUP_CONCAT\": [\"additiveExpression\"], \r\n     \"SUBSTR\": [\"additiveExpression\"], \r\n     \"REPLACE\": [\"additiveExpression\"], \r\n     \"REGEX\": [\"additiveExpression\"], \r\n     \"EXISTS\": [\"additiveExpression\"], \r\n     \"NOT\": [\"additiveExpression\"], \r\n     \"IRI_REF\": [\"additiveExpression\"], \r\n     \"STRING_LITERAL1\": [\"additiveExpression\"], \r\n     \"STRING_LITERAL2\": [\"additiveExpression\"], \r\n     \"STRING_LITERAL_LONG1\": [\"additiveExpression\"], \r\n     \"STRING_LITERAL_LONG2\": [\"additiveExpression\"], \r\n     \"INTEGER\": [\"additiveExpression\"], \r\n     \"DECIMAL\": [\"additiveExpression\"], \r\n     \"DOUBLE\": [\"additiveExpression\"], \r\n     \"INTEGER_POSITIVE\": [\"additiveExpression\"], \r\n     \"DECIMAL_POSITIVE\": [\"additiveExpression\"], \r\n     \"DOUBLE_POSITIVE\": [\"additiveExpression\"], \r\n     \"INTEGER_NEGATIVE\": [\"additiveExpression\"], \r\n     \"DECIMAL_NEGATIVE\": [\"additiveExpression\"], \r\n     \"DOUBLE_NEGATIVE\": [\"additiveExpression\"], \r\n     \"PNAME_LN\": [\"additiveExpression\"], \r\n     \"PNAME_NS\": [\"additiveExpression\"]}, \r\n  \"numericLiteral\" : {\r\n     \"INTEGER\": [\"numericLiteralUnsigned\"], \r\n     \"DECIMAL\": [\"numericLiteralUnsigned\"], \r\n     \"DOUBLE\": [\"numericLiteralUnsigned\"], \r\n     \"INTEGER_POSITIVE\": [\"numericLiteralPositive\"], \r\n     \"DECIMAL_POSITIVE\": [\"numericLiteralPositive\"], \r\n     \"DOUBLE_POSITIVE\": [\"numericLiteralPositive\"], \r\n     \"INTEGER_NEGATIVE\": [\"numericLiteralNegative\"], \r\n     \"DECIMAL_NEGATIVE\": [\"numericLiteralNegative\"], \r\n     \"DOUBLE_NEGATIVE\": [\"numericLiteralNegative\"]}, \r\n  \"numericLiteralNegative\" : {\r\n     \"INTEGER_NEGATIVE\": [\"INTEGER_NEGATIVE\"], \r\n     \"DECIMAL_NEGATIVE\": [\"DECIMAL_NEGATIVE\"], \r\n     \"DOUBLE_NEGATIVE\": [\"DOUBLE_NEGATIVE\"]}, \r\n  \"numericLiteralPositive\" : {\r\n     \"INTEGER_POSITIVE\": [\"INTEGER_POSITIVE\"], \r\n     \"DECIMAL_POSITIVE\": [\"DECIMAL_POSITIVE\"], \r\n     \"DOUBLE_POSITIVE\": [\"DOUBLE_POSITIVE\"]}, \r\n  \"numericLiteralUnsigned\" : {\r\n     \"INTEGER\": [\"INTEGER\"], \r\n     \"DECIMAL\": [\"DECIMAL\"], \r\n     \"DOUBLE\": [\"DOUBLE\"]}, \r\n  \"object\" : {\r\n     \"(\": [\"graphNode\"], \r\n     \"[\": [\"graphNode\"], \r\n     \"VAR1\": [\"graphNode\"], \r\n     \"VAR2\": [\"graphNode\"], \r\n     \"NIL\": [\"graphNode\"], \r\n     \"IRI_REF\": [\"graphNode\"], \r\n     \"TRUE\": [\"graphNode\"], \r\n     \"FALSE\": [\"graphNode\"], \r\n     \"BLANK_NODE_LABEL\": [\"graphNode\"], \r\n     \"ANON\": [\"graphNode\"], \r\n     \"PNAME_LN\": [\"graphNode\"], \r\n     \"PNAME_NS\": [\"graphNode\"], \r\n     \"STRING_LITERAL1\": [\"graphNode\"], \r\n     \"STRING_LITERAL2\": [\"graphNode\"], \r\n     \"STRING_LITERAL_LONG1\": [\"graphNode\"], \r\n     \"STRING_LITERAL_LONG2\": [\"graphNode\"], \r\n     \"INTEGER\": [\"graphNode\"], \r\n     \"DECIMAL\": [\"graphNode\"], \r\n     \"DOUBLE\": [\"graphNode\"], \r\n     \"INTEGER_POSITIVE\": [\"graphNode\"], \r\n     \"DECIMAL_POSITIVE\": [\"graphNode\"], \r\n     \"DOUBLE_POSITIVE\": [\"graphNode\"], \r\n     \"INTEGER_NEGATIVE\": [\"graphNode\"], \r\n     \"DECIMAL_NEGATIVE\": [\"graphNode\"], \r\n     \"DOUBLE_NEGATIVE\": [\"graphNode\"]}, \r\n  \"objectList\" : {\r\n     \"(\": [\"object\",\"*[,,object]\"], \r\n     \"[\": [\"object\",\"*[,,object]\"], \r\n     \"VAR1\": [\"object\",\"*[,,object]\"], \r\n     \"VAR2\": [\"object\",\"*[,,object]\"], \r\n     \"NIL\": [\"object\",\"*[,,object]\"], \r\n     \"IRI_REF\": [\"object\",\"*[,,object]\"], \r\n     \"TRUE\": [\"object\",\"*[,,object]\"], \r\n     \"FALSE\": [\"object\",\"*[,,object]\"], \r\n     \"BLANK_NODE_LABEL\": [\"object\",\"*[,,object]\"], \r\n     \"ANON\": [\"object\",\"*[,,object]\"], \r\n     \"PNAME_LN\": [\"object\",\"*[,,object]\"], \r\n     \"PNAME_NS\": [\"object\",\"*[,,object]\"], \r\n     \"STRING_LITERAL1\": [\"object\",\"*[,,object]\"], \r\n     \"STRING_LITERAL2\": [\"object\",\"*[,,object]\"], \r\n     \"STRING_LITERAL_LONG1\": [\"object\",\"*[,,object]\"], \r\n     \"STRING_LITERAL_LONG2\": [\"object\",\"*[,,object]\"], \r\n     \"INTEGER\": [\"object\",\"*[,,object]\"], \r\n     \"DECIMAL\": [\"object\",\"*[,,object]\"], \r\n     \"DOUBLE\": [\"object\",\"*[,,object]\"], \r\n     \"INTEGER_POSITIVE\": [\"object\",\"*[,,object]\"], \r\n     \"DECIMAL_POSITIVE\": [\"object\",\"*[,,object]\"], \r\n     \"DOUBLE_POSITIVE\": [\"object\",\"*[,,object]\"], \r\n     \"INTEGER_NEGATIVE\": [\"object\",\"*[,,object]\"], \r\n     \"DECIMAL_NEGATIVE\": [\"object\",\"*[,,object]\"], \r\n     \"DOUBLE_NEGATIVE\": [\"object\",\"*[,,object]\"]}, \r\n  \"objectListPath\" : {\r\n     \"(\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"[\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"VAR1\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"VAR2\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"NIL\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"IRI_REF\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"TRUE\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"FALSE\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"BLANK_NODE_LABEL\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"ANON\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"PNAME_LN\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"PNAME_NS\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"STRING_LITERAL1\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"STRING_LITERAL2\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"STRING_LITERAL_LONG1\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"STRING_LITERAL_LONG2\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"INTEGER\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"DECIMAL\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"DOUBLE\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"INTEGER_POSITIVE\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"DECIMAL_POSITIVE\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"DOUBLE_POSITIVE\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"INTEGER_NEGATIVE\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"DECIMAL_NEGATIVE\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"DOUBLE_NEGATIVE\": [\"objectPath\",\"*[,,objectPath]\"]}, \r\n  \"objectPath\" : {\r\n     \"(\": [\"graphNodePath\"], \r\n     \"[\": [\"graphNodePath\"], \r\n     \"VAR1\": [\"graphNodePath\"], \r\n     \"VAR2\": [\"graphNodePath\"], \r\n     \"NIL\": [\"graphNodePath\"], \r\n     \"IRI_REF\": [\"graphNodePath\"], \r\n     \"TRUE\": [\"graphNodePath\"], \r\n     \"FALSE\": [\"graphNodePath\"], \r\n     \"BLANK_NODE_LABEL\": [\"graphNodePath\"], \r\n     \"ANON\": [\"graphNodePath\"], \r\n     \"PNAME_LN\": [\"graphNodePath\"], \r\n     \"PNAME_NS\": [\"graphNodePath\"], \r\n     \"STRING_LITERAL1\": [\"graphNodePath\"], \r\n     \"STRING_LITERAL2\": [\"graphNodePath\"], \r\n     \"STRING_LITERAL_LONG1\": [\"graphNodePath\"], \r\n     \"STRING_LITERAL_LONG2\": [\"graphNodePath\"], \r\n     \"INTEGER\": [\"graphNodePath\"], \r\n     \"DECIMAL\": [\"graphNodePath\"], \r\n     \"DOUBLE\": [\"graphNodePath\"], \r\n     \"INTEGER_POSITIVE\": [\"graphNodePath\"], \r\n     \"DECIMAL_POSITIVE\": [\"graphNodePath\"], \r\n     \"DOUBLE_POSITIVE\": [\"graphNodePath\"], \r\n     \"INTEGER_NEGATIVE\": [\"graphNodePath\"], \r\n     \"DECIMAL_NEGATIVE\": [\"graphNodePath\"], \r\n     \"DOUBLE_NEGATIVE\": [\"graphNodePath\"]}, \r\n  \"offsetClause\" : {\r\n     \"OFFSET\": [\"OFFSET\",\"INTEGER\"]}, \r\n  \"optionalGraphPattern\" : {\r\n     \"OPTIONAL\": [\"OPTIONAL\",\"groupGraphPattern\"]}, \r\n  \"or([*,expression])\" : {\r\n     \"*\": [\"*\"], \r\n     \"!\": [\"expression\"], \r\n     \"+\": [\"expression\"], \r\n     \"-\": [\"expression\"], \r\n     \"VAR1\": [\"expression\"], \r\n     \"VAR2\": [\"expression\"], \r\n     \"(\": [\"expression\"], \r\n     \"STR\": [\"expression\"], \r\n     \"LANG\": [\"expression\"], \r\n     \"LANGMATCHES\": [\"expression\"], \r\n     \"DATATYPE\": [\"expression\"], \r\n     \"BOUND\": [\"expression\"], \r\n     \"IRI\": [\"expression\"], \r\n     \"URI\": [\"expression\"], \r\n     \"BNODE\": [\"expression\"], \r\n     \"RAND\": [\"expression\"], \r\n     \"ABS\": [\"expression\"], \r\n     \"CEIL\": [\"expression\"], \r\n     \"FLOOR\": [\"expression\"], \r\n     \"ROUND\": [\"expression\"], \r\n     \"CONCAT\": [\"expression\"], \r\n     \"STRLEN\": [\"expression\"], \r\n     \"UCASE\": [\"expression\"], \r\n     \"LCASE\": [\"expression\"], \r\n     \"ENCODE_FOR_URI\": [\"expression\"], \r\n     \"CONTAINS\": [\"expression\"], \r\n     \"STRSTARTS\": [\"expression\"], \r\n     \"STRENDS\": [\"expression\"], \r\n     \"STRBEFORE\": [\"expression\"], \r\n     \"STRAFTER\": [\"expression\"], \r\n     \"YEAR\": [\"expression\"], \r\n     \"MONTH\": [\"expression\"], \r\n     \"DAY\": [\"expression\"], \r\n     \"HOURS\": [\"expression\"], \r\n     \"MINUTES\": [\"expression\"], \r\n     \"SECONDS\": [\"expression\"], \r\n     \"TIMEZONE\": [\"expression\"], \r\n     \"TZ\": [\"expression\"], \r\n     \"NOW\": [\"expression\"], \r\n     \"UUID\": [\"expression\"], \r\n     \"STRUUID\": [\"expression\"], \r\n     \"MD5\": [\"expression\"], \r\n     \"SHA1\": [\"expression\"], \r\n     \"SHA256\": [\"expression\"], \r\n     \"SHA384\": [\"expression\"], \r\n     \"SHA512\": [\"expression\"], \r\n     \"COALESCE\": [\"expression\"], \r\n     \"IF\": [\"expression\"], \r\n     \"STRLANG\": [\"expression\"], \r\n     \"STRDT\": [\"expression\"], \r\n     \"SAMETERM\": [\"expression\"], \r\n     \"ISIRI\": [\"expression\"], \r\n     \"ISURI\": [\"expression\"], \r\n     \"ISBLANK\": [\"expression\"], \r\n     \"ISLITERAL\": [\"expression\"], \r\n     \"ISNUMERIC\": [\"expression\"], \r\n     \"TRUE\": [\"expression\"], \r\n     \"FALSE\": [\"expression\"], \r\n     \"COUNT\": [\"expression\"], \r\n     \"SUM\": [\"expression\"], \r\n     \"MIN\": [\"expression\"], \r\n     \"MAX\": [\"expression\"], \r\n     \"AVG\": [\"expression\"], \r\n     \"SAMPLE\": [\"expression\"], \r\n     \"GROUP_CONCAT\": [\"expression\"], \r\n     \"SUBSTR\": [\"expression\"], \r\n     \"REPLACE\": [\"expression\"], \r\n     \"REGEX\": [\"expression\"], \r\n     \"EXISTS\": [\"expression\"], \r\n     \"NOT\": [\"expression\"], \r\n     \"IRI_REF\": [\"expression\"], \r\n     \"STRING_LITERAL1\": [\"expression\"], \r\n     \"STRING_LITERAL2\": [\"expression\"], \r\n     \"STRING_LITERAL_LONG1\": [\"expression\"], \r\n     \"STRING_LITERAL_LONG2\": [\"expression\"], \r\n     \"INTEGER\": [\"expression\"], \r\n     \"DECIMAL\": [\"expression\"], \r\n     \"DOUBLE\": [\"expression\"], \r\n     \"INTEGER_POSITIVE\": [\"expression\"], \r\n     \"DECIMAL_POSITIVE\": [\"expression\"], \r\n     \"DOUBLE_POSITIVE\": [\"expression\"], \r\n     \"INTEGER_NEGATIVE\": [\"expression\"], \r\n     \"DECIMAL_NEGATIVE\": [\"expression\"], \r\n     \"DOUBLE_NEGATIVE\": [\"expression\"], \r\n     \"PNAME_LN\": [\"expression\"], \r\n     \"PNAME_NS\": [\"expression\"]}, \r\n  \"or([+or([var,[ (,expression,AS,var,)]]),*])\" : {\r\n     \"(\": [\"+or([var,[ (,expression,AS,var,)]])\"], \r\n     \"VAR1\": [\"+or([var,[ (,expression,AS,var,)]])\"], \r\n     \"VAR2\": [\"+or([var,[ (,expression,AS,var,)]])\"], \r\n     \"*\": [\"*\"]}, \r\n  \"or([+varOrIRIref,*])\" : {\r\n     \"VAR1\": [\"+varOrIRIref\"], \r\n     \"VAR2\": [\"+varOrIRIref\"], \r\n     \"IRI_REF\": [\"+varOrIRIref\"], \r\n     \"PNAME_LN\": [\"+varOrIRIref\"], \r\n     \"PNAME_NS\": [\"+varOrIRIref\"], \r\n     \"*\": [\"*\"]}, \r\n  \"or([ASC,DESC])\" : {\r\n     \"ASC\": [\"ASC\"], \r\n     \"DESC\": [\"DESC\"]}, \r\n  \"or([DISTINCT,REDUCED])\" : {\r\n     \"DISTINCT\": [\"DISTINCT\"], \r\n     \"REDUCED\": [\"REDUCED\"]}, \r\n  \"or([LANGTAG,[^^,iriRef]])\" : {\r\n     \"LANGTAG\": [\"LANGTAG\"], \r\n     \"^^\": [\"[^^,iriRef]\"]}, \r\n  \"or([NIL,[ (,*var,)]])\" : {\r\n     \"NIL\": [\"NIL\"], \r\n     \"(\": [\"[ (,*var,)]\"]}, \r\n  \"or([[ (,*dataBlockValue,)],NIL])\" : {\r\n     \"(\": [\"[ (,*dataBlockValue,)]\"], \r\n     \"NIL\": [\"NIL\"]}, \r\n  \"or([[ (,expression,)],NIL])\" : {\r\n     \"(\": [\"[ (,expression,)]\"], \r\n     \"NIL\": [\"NIL\"]}, \r\n  \"or([[*,unaryExpression],[/,unaryExpression]])\" : {\r\n     \"*\": [\"[*,unaryExpression]\"], \r\n     \"/\": [\"[/,unaryExpression]\"]}, \r\n  \"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\" : {\r\n     \"+\": [\"[+,multiplicativeExpression]\"], \r\n     \"-\": [\"[-,multiplicativeExpression]\"], \r\n     \"INTEGER_POSITIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \r\n     \"DECIMAL_POSITIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \r\n     \"DOUBLE_POSITIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \r\n     \"INTEGER_NEGATIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \r\n     \"DECIMAL_NEGATIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \r\n     \"DOUBLE_NEGATIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"]}, \r\n  \"or([[,,or([},[integer,}]])],}])\" : {\r\n     \",\": [\"[,,or([},[integer,}]])]\"], \r\n     \"}\": [\"}\"]}, \r\n  \"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\" : {\r\n     \"=\": [\"[=,numericExpression]\"], \r\n     \"!=\": [\"[!=,numericExpression]\"], \r\n     \"<\": [\"[<,numericExpression]\"], \r\n     \">\": [\"[>,numericExpression]\"], \r\n     \"<=\": [\"[<=,numericExpression]\"], \r\n     \">=\": [\"[>=,numericExpression]\"], \r\n     \"IN\": [\"[IN,expressionList]\"], \r\n     \"NOT\": [\"[NOT,IN,expressionList]\"]}, \r\n  \"or([[constructTemplate,*datasetClause,whereClause,solutionModifier],[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]])\" : {\r\n     \"{\": [\"[constructTemplate,*datasetClause,whereClause,solutionModifier]\"], \r\n     \"WHERE\": [\"[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]\"], \r\n     \"FROM\": [\"[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]\"]}, \r\n  \"or([[deleteClause,?insertClause],insertClause])\" : {\r\n     \"DELETE\": [\"[deleteClause,?insertClause]\"], \r\n     \"INSERT\": [\"insertClause\"]}, \r\n  \"or([[integer,or([[,,or([},[integer,}]])],}])],[,,integer,}]])\" : {\r\n     \"INTEGER\": [\"[integer,or([[,,or([},[integer,}]])],}])]\"], \r\n     \",\": [\"[,,integer,}]\"]}, \r\n  \"or([baseDecl,prefixDecl])\" : {\r\n     \"BASE\": [\"baseDecl\"], \r\n     \"PREFIX\": [\"prefixDecl\"]}, \r\n  \"or([defaultGraphClause,namedGraphClause])\" : {\r\n     \"IRI_REF\": [\"defaultGraphClause\"], \r\n     \"PNAME_LN\": [\"defaultGraphClause\"], \r\n     \"PNAME_NS\": [\"defaultGraphClause\"], \r\n     \"NAMED\": [\"namedGraphClause\"]}, \r\n  \"or([inlineDataOneVar,inlineDataFull])\" : {\r\n     \"VAR1\": [\"inlineDataOneVar\"], \r\n     \"VAR2\": [\"inlineDataOneVar\"], \r\n     \"NIL\": [\"inlineDataFull\"], \r\n     \"(\": [\"inlineDataFull\"]}, \r\n  \"or([iriRef,[NAMED,iriRef]])\" : {\r\n     \"IRI_REF\": [\"iriRef\"], \r\n     \"PNAME_LN\": [\"iriRef\"], \r\n     \"PNAME_NS\": [\"iriRef\"], \r\n     \"NAMED\": [\"[NAMED,iriRef]\"]}, \r\n  \"or([iriRef,a])\" : {\r\n     \"IRI_REF\": [\"iriRef\"], \r\n     \"PNAME_LN\": [\"iriRef\"], \r\n     \"PNAME_NS\": [\"iriRef\"], \r\n     \"a\": [\"a\"]}, \r\n  \"or([numericLiteralPositive,numericLiteralNegative])\" : {\r\n     \"INTEGER_POSITIVE\": [\"numericLiteralPositive\"], \r\n     \"DECIMAL_POSITIVE\": [\"numericLiteralPositive\"], \r\n     \"DOUBLE_POSITIVE\": [\"numericLiteralPositive\"], \r\n     \"INTEGER_NEGATIVE\": [\"numericLiteralNegative\"], \r\n     \"DECIMAL_NEGATIVE\": [\"numericLiteralNegative\"], \r\n     \"DOUBLE_NEGATIVE\": [\"numericLiteralNegative\"]}, \r\n  \"or([queryAll,updateAll])\" : {\r\n     \"CONSTRUCT\": [\"queryAll\"], \r\n     \"DESCRIBE\": [\"queryAll\"], \r\n     \"ASK\": [\"queryAll\"], \r\n     \"SELECT\": [\"queryAll\"], \r\n     \"INSERT\": [\"updateAll\"], \r\n     \"DELETE\": [\"updateAll\"], \r\n     \"LOAD\": [\"updateAll\"], \r\n     \"CLEAR\": [\"updateAll\"], \r\n     \"DROP\": [\"updateAll\"], \r\n     \"ADD\": [\"updateAll\"], \r\n     \"MOVE\": [\"updateAll\"], \r\n     \"COPY\": [\"updateAll\"], \r\n     \"CREATE\": [\"updateAll\"], \r\n     \"WITH\": [\"updateAll\"], \r\n     \"$\": [\"updateAll\"]}, \r\n  \"or([selectQuery,constructQuery,describeQuery,askQuery])\" : {\r\n     \"SELECT\": [\"selectQuery\"], \r\n     \"CONSTRUCT\": [\"constructQuery\"], \r\n     \"DESCRIBE\": [\"describeQuery\"], \r\n     \"ASK\": [\"askQuery\"]}, \r\n  \"or([subSelect,groupGraphPatternSub])\" : {\r\n     \"SELECT\": [\"subSelect\"], \r\n     \"{\": [\"groupGraphPatternSub\"], \r\n     \"OPTIONAL\": [\"groupGraphPatternSub\"], \r\n     \"MINUS\": [\"groupGraphPatternSub\"], \r\n     \"GRAPH\": [\"groupGraphPatternSub\"], \r\n     \"SERVICE\": [\"groupGraphPatternSub\"], \r\n     \"FILTER\": [\"groupGraphPatternSub\"], \r\n     \"BIND\": [\"groupGraphPatternSub\"], \r\n     \"VALUES\": [\"groupGraphPatternSub\"], \r\n     \"VAR1\": [\"groupGraphPatternSub\"], \r\n     \"VAR2\": [\"groupGraphPatternSub\"], \r\n     \"NIL\": [\"groupGraphPatternSub\"], \r\n     \"(\": [\"groupGraphPatternSub\"], \r\n     \"[\": [\"groupGraphPatternSub\"], \r\n     \"IRI_REF\": [\"groupGraphPatternSub\"], \r\n     \"TRUE\": [\"groupGraphPatternSub\"], \r\n     \"FALSE\": [\"groupGraphPatternSub\"], \r\n     \"BLANK_NODE_LABEL\": [\"groupGraphPatternSub\"], \r\n     \"ANON\": [\"groupGraphPatternSub\"], \r\n     \"PNAME_LN\": [\"groupGraphPatternSub\"], \r\n     \"PNAME_NS\": [\"groupGraphPatternSub\"], \r\n     \"STRING_LITERAL1\": [\"groupGraphPatternSub\"], \r\n     \"STRING_LITERAL2\": [\"groupGraphPatternSub\"], \r\n     \"STRING_LITERAL_LONG1\": [\"groupGraphPatternSub\"], \r\n     \"STRING_LITERAL_LONG2\": [\"groupGraphPatternSub\"], \r\n     \"INTEGER\": [\"groupGraphPatternSub\"], \r\n     \"DECIMAL\": [\"groupGraphPatternSub\"], \r\n     \"DOUBLE\": [\"groupGraphPatternSub\"], \r\n     \"INTEGER_POSITIVE\": [\"groupGraphPatternSub\"], \r\n     \"DECIMAL_POSITIVE\": [\"groupGraphPatternSub\"], \r\n     \"DOUBLE_POSITIVE\": [\"groupGraphPatternSub\"], \r\n     \"INTEGER_NEGATIVE\": [\"groupGraphPatternSub\"], \r\n     \"DECIMAL_NEGATIVE\": [\"groupGraphPatternSub\"], \r\n     \"DOUBLE_NEGATIVE\": [\"groupGraphPatternSub\"], \r\n     \"}\": [\"groupGraphPatternSub\"]}, \r\n  \"or([var,[ (,expression,AS,var,)]])\" : {\r\n     \"VAR1\": [\"var\"], \r\n     \"VAR2\": [\"var\"], \r\n     \"(\": [\"[ (,expression,AS,var,)]\"]}, \r\n  \"or([verbPath,verbSimple])\" : {\r\n     \"^\": [\"verbPath\"], \r\n     \"a\": [\"verbPath\"], \r\n     \"!\": [\"verbPath\"], \r\n     \"(\": [\"verbPath\"], \r\n     \"IRI_REF\": [\"verbPath\"], \r\n     \"PNAME_LN\": [\"verbPath\"], \r\n     \"PNAME_NS\": [\"verbPath\"], \r\n     \"VAR1\": [\"verbSimple\"], \r\n     \"VAR2\": [\"verbSimple\"]}, \r\n  \"or([},[integer,}]])\" : {\r\n     \"}\": [\"}\"], \r\n     \"INTEGER\": [\"[integer,}]\"]}, \r\n  \"orderClause\" : {\r\n     \"ORDER\": [\"ORDER\",\"BY\",\"+orderCondition\"]}, \r\n  \"orderCondition\" : {\r\n     \"ASC\": [\"or([ASC,DESC])\",\"brackettedExpression\"], \r\n     \"DESC\": [\"or([ASC,DESC])\",\"brackettedExpression\"], \r\n     \"(\": [\"constraint\"], \r\n     \"STR\": [\"constraint\"], \r\n     \"LANG\": [\"constraint\"], \r\n     \"LANGMATCHES\": [\"constraint\"], \r\n     \"DATATYPE\": [\"constraint\"], \r\n     \"BOUND\": [\"constraint\"], \r\n     \"IRI\": [\"constraint\"], \r\n     \"URI\": [\"constraint\"], \r\n     \"BNODE\": [\"constraint\"], \r\n     \"RAND\": [\"constraint\"], \r\n     \"ABS\": [\"constraint\"], \r\n     \"CEIL\": [\"constraint\"], \r\n     \"FLOOR\": [\"constraint\"], \r\n     \"ROUND\": [\"constraint\"], \r\n     \"CONCAT\": [\"constraint\"], \r\n     \"STRLEN\": [\"constraint\"], \r\n     \"UCASE\": [\"constraint\"], \r\n     \"LCASE\": [\"constraint\"], \r\n     \"ENCODE_FOR_URI\": [\"constraint\"], \r\n     \"CONTAINS\": [\"constraint\"], \r\n     \"STRSTARTS\": [\"constraint\"], \r\n     \"STRENDS\": [\"constraint\"], \r\n     \"STRBEFORE\": [\"constraint\"], \r\n     \"STRAFTER\": [\"constraint\"], \r\n     \"YEAR\": [\"constraint\"], \r\n     \"MONTH\": [\"constraint\"], \r\n     \"DAY\": [\"constraint\"], \r\n     \"HOURS\": [\"constraint\"], \r\n     \"MINUTES\": [\"constraint\"], \r\n     \"SECONDS\": [\"constraint\"], \r\n     \"TIMEZONE\": [\"constraint\"], \r\n     \"TZ\": [\"constraint\"], \r\n     \"NOW\": [\"constraint\"], \r\n     \"UUID\": [\"constraint\"], \r\n     \"STRUUID\": [\"constraint\"], \r\n     \"MD5\": [\"constraint\"], \r\n     \"SHA1\": [\"constraint\"], \r\n     \"SHA256\": [\"constraint\"], \r\n     \"SHA384\": [\"constraint\"], \r\n     \"SHA512\": [\"constraint\"], \r\n     \"COALESCE\": [\"constraint\"], \r\n     \"IF\": [\"constraint\"], \r\n     \"STRLANG\": [\"constraint\"], \r\n     \"STRDT\": [\"constraint\"], \r\n     \"SAMETERM\": [\"constraint\"], \r\n     \"ISIRI\": [\"constraint\"], \r\n     \"ISURI\": [\"constraint\"], \r\n     \"ISBLANK\": [\"constraint\"], \r\n     \"ISLITERAL\": [\"constraint\"], \r\n     \"ISNUMERIC\": [\"constraint\"], \r\n     \"SUBSTR\": [\"constraint\"], \r\n     \"REPLACE\": [\"constraint\"], \r\n     \"REGEX\": [\"constraint\"], \r\n     \"EXISTS\": [\"constraint\"], \r\n     \"NOT\": [\"constraint\"], \r\n     \"IRI_REF\": [\"constraint\"], \r\n     \"PNAME_LN\": [\"constraint\"], \r\n     \"PNAME_NS\": [\"constraint\"], \r\n     \"VAR1\": [\"var\"], \r\n     \"VAR2\": [\"var\"]}, \r\n  \"path\" : {\r\n     \"^\": [\"pathAlternative\"], \r\n     \"a\": [\"pathAlternative\"], \r\n     \"!\": [\"pathAlternative\"], \r\n     \"(\": [\"pathAlternative\"], \r\n     \"IRI_REF\": [\"pathAlternative\"], \r\n     \"PNAME_LN\": [\"pathAlternative\"], \r\n     \"PNAME_NS\": [\"pathAlternative\"]}, \r\n  \"pathAlternative\" : {\r\n     \"^\": [\"pathSequence\",\"*[|,pathSequence]\"], \r\n     \"a\": [\"pathSequence\",\"*[|,pathSequence]\"], \r\n     \"!\": [\"pathSequence\",\"*[|,pathSequence]\"], \r\n     \"(\": [\"pathSequence\",\"*[|,pathSequence]\"], \r\n     \"IRI_REF\": [\"pathSequence\",\"*[|,pathSequence]\"], \r\n     \"PNAME_LN\": [\"pathSequence\",\"*[|,pathSequence]\"], \r\n     \"PNAME_NS\": [\"pathSequence\",\"*[|,pathSequence]\"]}, \r\n  \"pathElt\" : {\r\n     \"a\": [\"pathPrimary\",\"?pathMod\"], \r\n     \"!\": [\"pathPrimary\",\"?pathMod\"], \r\n     \"(\": [\"pathPrimary\",\"?pathMod\"], \r\n     \"IRI_REF\": [\"pathPrimary\",\"?pathMod\"], \r\n     \"PNAME_LN\": [\"pathPrimary\",\"?pathMod\"], \r\n     \"PNAME_NS\": [\"pathPrimary\",\"?pathMod\"]}, \r\n  \"pathEltOrInverse\" : {\r\n     \"a\": [\"pathElt\"], \r\n     \"!\": [\"pathElt\"], \r\n     \"(\": [\"pathElt\"], \r\n     \"IRI_REF\": [\"pathElt\"], \r\n     \"PNAME_LN\": [\"pathElt\"], \r\n     \"PNAME_NS\": [\"pathElt\"], \r\n     \"^\": [\"^\",\"pathElt\"]}, \r\n  \"pathMod\" : {\r\n     \"*\": [\"*\"], \r\n     \"?\": [\"?\"], \r\n     \"+\": [\"+\"], \r\n     \"{\": [\"{\",\"or([[integer,or([[,,or([},[integer,}]])],}])],[,,integer,}]])\"]}, \r\n  \"pathNegatedPropertySet\" : {\r\n     \"a\": [\"pathOneInPropertySet\"], \r\n     \"^\": [\"pathOneInPropertySet\"], \r\n     \"IRI_REF\": [\"pathOneInPropertySet\"], \r\n     \"PNAME_LN\": [\"pathOneInPropertySet\"], \r\n     \"PNAME_NS\": [\"pathOneInPropertySet\"], \r\n     \"(\": [\"(\",\"?[pathOneInPropertySet,*[|,pathOneInPropertySet]]\",\")\"]}, \r\n  \"pathOneInPropertySet\" : {\r\n     \"IRI_REF\": [\"iriRef\"], \r\n     \"PNAME_LN\": [\"iriRef\"], \r\n     \"PNAME_NS\": [\"iriRef\"], \r\n     \"a\": [\"a\"], \r\n     \"^\": [\"^\",\"or([iriRef,a])\"]}, \r\n  \"pathPrimary\" : {\r\n     \"IRI_REF\": [\"storeProperty\",\"iriRef\"], \r\n     \"PNAME_LN\": [\"storeProperty\",\"iriRef\"], \r\n     \"PNAME_NS\": [\"storeProperty\",\"iriRef\"], \r\n     \"a\": [\"storeProperty\",\"a\"], \r\n     \"!\": [\"!\",\"pathNegatedPropertySet\"], \r\n     \"(\": [\"(\",\"path\",\")\"]}, \r\n  \"pathSequence\" : {\r\n     \"^\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \r\n     \"a\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \r\n     \"!\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \r\n     \"(\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \r\n     \"IRI_REF\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \r\n     \"PNAME_LN\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \r\n     \"PNAME_NS\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"]}, \r\n  \"prefixDecl\" : {\r\n     \"PREFIX\": [\"PREFIX\",\"PNAME_NS\",\"IRI_REF\"]}, \r\n  \"prefixedName\" : {\r\n     \"PNAME_LN\": [\"PNAME_LN\"], \r\n     \"PNAME_NS\": [\"PNAME_NS\"]}, \r\n  \"primaryExpression\" : {\r\n     \"(\": [\"brackettedExpression\"], \r\n     \"STR\": [\"builtInCall\"], \r\n     \"LANG\": [\"builtInCall\"], \r\n     \"LANGMATCHES\": [\"builtInCall\"], \r\n     \"DATATYPE\": [\"builtInCall\"], \r\n     \"BOUND\": [\"builtInCall\"], \r\n     \"IRI\": [\"builtInCall\"], \r\n     \"URI\": [\"builtInCall\"], \r\n     \"BNODE\": [\"builtInCall\"], \r\n     \"RAND\": [\"builtInCall\"], \r\n     \"ABS\": [\"builtInCall\"], \r\n     \"CEIL\": [\"builtInCall\"], \r\n     \"FLOOR\": [\"builtInCall\"], \r\n     \"ROUND\": [\"builtInCall\"], \r\n     \"CONCAT\": [\"builtInCall\"], \r\n     \"STRLEN\": [\"builtInCall\"], \r\n     \"UCASE\": [\"builtInCall\"], \r\n     \"LCASE\": [\"builtInCall\"], \r\n     \"ENCODE_FOR_URI\": [\"builtInCall\"], \r\n     \"CONTAINS\": [\"builtInCall\"], \r\n     \"STRSTARTS\": [\"builtInCall\"], \r\n     \"STRENDS\": [\"builtInCall\"], \r\n     \"STRBEFORE\": [\"builtInCall\"], \r\n     \"STRAFTER\": [\"builtInCall\"], \r\n     \"YEAR\": [\"builtInCall\"], \r\n     \"MONTH\": [\"builtInCall\"], \r\n     \"DAY\": [\"builtInCall\"], \r\n     \"HOURS\": [\"builtInCall\"], \r\n     \"MINUTES\": [\"builtInCall\"], \r\n     \"SECONDS\": [\"builtInCall\"], \r\n     \"TIMEZONE\": [\"builtInCall\"], \r\n     \"TZ\": [\"builtInCall\"], \r\n     \"NOW\": [\"builtInCall\"], \r\n     \"UUID\": [\"builtInCall\"], \r\n     \"STRUUID\": [\"builtInCall\"], \r\n     \"MD5\": [\"builtInCall\"], \r\n     \"SHA1\": [\"builtInCall\"], \r\n     \"SHA256\": [\"builtInCall\"], \r\n     \"SHA384\": [\"builtInCall\"], \r\n     \"SHA512\": [\"builtInCall\"], \r\n     \"COALESCE\": [\"builtInCall\"], \r\n     \"IF\": [\"builtInCall\"], \r\n     \"STRLANG\": [\"builtInCall\"], \r\n     \"STRDT\": [\"builtInCall\"], \r\n     \"SAMETERM\": [\"builtInCall\"], \r\n     \"ISIRI\": [\"builtInCall\"], \r\n     \"ISURI\": [\"builtInCall\"], \r\n     \"ISBLANK\": [\"builtInCall\"], \r\n     \"ISLITERAL\": [\"builtInCall\"], \r\n     \"ISNUMERIC\": [\"builtInCall\"], \r\n     \"SUBSTR\": [\"builtInCall\"], \r\n     \"REPLACE\": [\"builtInCall\"], \r\n     \"REGEX\": [\"builtInCall\"], \r\n     \"EXISTS\": [\"builtInCall\"], \r\n     \"NOT\": [\"builtInCall\"], \r\n     \"IRI_REF\": [\"iriRefOrFunction\"], \r\n     \"PNAME_LN\": [\"iriRefOrFunction\"], \r\n     \"PNAME_NS\": [\"iriRefOrFunction\"], \r\n     \"STRING_LITERAL1\": [\"rdfLiteral\"], \r\n     \"STRING_LITERAL2\": [\"rdfLiteral\"], \r\n     \"STRING_LITERAL_LONG1\": [\"rdfLiteral\"], \r\n     \"STRING_LITERAL_LONG2\": [\"rdfLiteral\"], \r\n     \"INTEGER\": [\"numericLiteral\"], \r\n     \"DECIMAL\": [\"numericLiteral\"], \r\n     \"DOUBLE\": [\"numericLiteral\"], \r\n     \"INTEGER_POSITIVE\": [\"numericLiteral\"], \r\n     \"DECIMAL_POSITIVE\": [\"numericLiteral\"], \r\n     \"DOUBLE_POSITIVE\": [\"numericLiteral\"], \r\n     \"INTEGER_NEGATIVE\": [\"numericLiteral\"], \r\n     \"DECIMAL_NEGATIVE\": [\"numericLiteral\"], \r\n     \"DOUBLE_NEGATIVE\": [\"numericLiteral\"], \r\n     \"TRUE\": [\"booleanLiteral\"], \r\n     \"FALSE\": [\"booleanLiteral\"], \r\n     \"VAR1\": [\"var\"], \r\n     \"VAR2\": [\"var\"], \r\n     \"COUNT\": [\"aggregate\"], \r\n     \"SUM\": [\"aggregate\"], \r\n     \"MIN\": [\"aggregate\"], \r\n     \"MAX\": [\"aggregate\"], \r\n     \"AVG\": [\"aggregate\"], \r\n     \"SAMPLE\": [\"aggregate\"], \r\n     \"GROUP_CONCAT\": [\"aggregate\"]}, \r\n  \"prologue\" : {\r\n     \"BASE\": [\"*or([baseDecl,prefixDecl])\"], \r\n     \"PREFIX\": [\"*or([baseDecl,prefixDecl])\"], \r\n     \"$\": [\"*or([baseDecl,prefixDecl])\"], \r\n     \"CONSTRUCT\": [\"*or([baseDecl,prefixDecl])\"], \r\n     \"DESCRIBE\": [\"*or([baseDecl,prefixDecl])\"], \r\n     \"ASK\": [\"*or([baseDecl,prefixDecl])\"], \r\n     \"INSERT\": [\"*or([baseDecl,prefixDecl])\"], \r\n     \"DELETE\": [\"*or([baseDecl,prefixDecl])\"], \r\n     \"SELECT\": [\"*or([baseDecl,prefixDecl])\"], \r\n     \"LOAD\": [\"*or([baseDecl,prefixDecl])\"], \r\n     \"CLEAR\": [\"*or([baseDecl,prefixDecl])\"], \r\n     \"DROP\": [\"*or([baseDecl,prefixDecl])\"], \r\n     \"ADD\": [\"*or([baseDecl,prefixDecl])\"], \r\n     \"MOVE\": [\"*or([baseDecl,prefixDecl])\"], \r\n     \"COPY\": [\"*or([baseDecl,prefixDecl])\"], \r\n     \"CREATE\": [\"*or([baseDecl,prefixDecl])\"], \r\n     \"WITH\": [\"*or([baseDecl,prefixDecl])\"]}, \r\n  \"propertyList\" : {\r\n     \"a\": [\"propertyListNotEmpty\"], \r\n     \"VAR1\": [\"propertyListNotEmpty\"], \r\n     \"VAR2\": [\"propertyListNotEmpty\"], \r\n     \"IRI_REF\": [\"propertyListNotEmpty\"], \r\n     \"PNAME_LN\": [\"propertyListNotEmpty\"], \r\n     \"PNAME_NS\": [\"propertyListNotEmpty\"], \r\n     \".\": [], \r\n     \"}\": [], \r\n     \"GRAPH\": []}, \r\n  \"propertyListNotEmpty\" : {\r\n     \"a\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"VAR1\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"VAR2\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"IRI_REF\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"PNAME_LN\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"PNAME_NS\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"]}, \r\n  \"propertyListPath\" : {\r\n     \"a\": [\"propertyListNotEmpty\"], \r\n     \"VAR1\": [\"propertyListNotEmpty\"], \r\n     \"VAR2\": [\"propertyListNotEmpty\"], \r\n     \"IRI_REF\": [\"propertyListNotEmpty\"], \r\n     \"PNAME_LN\": [\"propertyListNotEmpty\"], \r\n     \"PNAME_NS\": [\"propertyListNotEmpty\"], \r\n     \".\": [], \r\n     \"{\": [], \r\n     \"OPTIONAL\": [], \r\n     \"MINUS\": [], \r\n     \"GRAPH\": [], \r\n     \"SERVICE\": [], \r\n     \"FILTER\": [], \r\n     \"BIND\": [], \r\n     \"VALUES\": [], \r\n     \"}\": []}, \r\n  \"propertyListPathNotEmpty\" : {\r\n     \"VAR1\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \r\n     \"VAR2\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \r\n     \"^\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \r\n     \"a\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \r\n     \"!\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \r\n     \"(\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \r\n     \"IRI_REF\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \r\n     \"PNAME_LN\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \r\n     \"PNAME_NS\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"]}, \r\n  \"quadData\" : {\r\n     \"{\": [\"{\",\"disallowVars\",\"quads\",\"allowVars\",\"}\"]}, \r\n  \"quadDataNoBnodes\" : {\r\n     \"{\": [\"{\",\"disallowBnodes\",\"disallowVars\",\"quads\",\"allowVars\",\"allowBnodes\",\"}\"]}, \r\n  \"quadPattern\" : {\r\n     \"{\": [\"{\",\"quads\",\"}\"]}, \r\n  \"quadPatternNoBnodes\" : {\r\n     \"{\": [\"{\",\"disallowBnodes\",\"quads\",\"allowBnodes\",\"}\"]}, \r\n  \"quads\" : {\r\n     \"GRAPH\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n     \"VAR1\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n     \"VAR2\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n     \"NIL\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n     \"(\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n     \"[\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n     \"IRI_REF\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n     \"TRUE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n     \"FALSE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n     \"BLANK_NODE_LABEL\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n     \"ANON\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n     \"PNAME_LN\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n     \"PNAME_NS\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n     \"STRING_LITERAL1\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n     \"STRING_LITERAL2\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n     \"STRING_LITERAL_LONG1\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n     \"STRING_LITERAL_LONG2\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n     \"INTEGER\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n     \"DECIMAL\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n     \"DOUBLE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n     \"INTEGER_POSITIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n     \"DECIMAL_POSITIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n     \"DOUBLE_POSITIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n     \"INTEGER_NEGATIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n     \"DECIMAL_NEGATIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n     \"DOUBLE_NEGATIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \r\n     \"}\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"]}, \r\n  \"quadsNotTriples\" : {\r\n     \"GRAPH\": [\"GRAPH\",\"varOrIRIref\",\"{\",\"?triplesTemplate\",\"}\"]}, \r\n  \"queryAll\" : {\r\n     \"CONSTRUCT\": [\"or([selectQuery,constructQuery,describeQuery,askQuery])\",\"valuesClause\"], \r\n     \"DESCRIBE\": [\"or([selectQuery,constructQuery,describeQuery,askQuery])\",\"valuesClause\"], \r\n     \"ASK\": [\"or([selectQuery,constructQuery,describeQuery,askQuery])\",\"valuesClause\"], \r\n     \"SELECT\": [\"or([selectQuery,constructQuery,describeQuery,askQuery])\",\"valuesClause\"]}, \r\n  \"rdfLiteral\" : {\r\n     \"STRING_LITERAL1\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"], \r\n     \"STRING_LITERAL2\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"], \r\n     \"STRING_LITERAL_LONG1\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"], \r\n     \"STRING_LITERAL_LONG2\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"]}, \r\n  \"regexExpression\" : {\r\n     \"REGEX\": [\"REGEX\",\"(\",\"expression\",\",\",\"expression\",\"?[,,expression]\",\")\"]}, \r\n  \"relationalExpression\" : {\r\n     \"!\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"+\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"-\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"VAR1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"VAR2\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"(\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"STR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"LANG\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"LANGMATCHES\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"DATATYPE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"BOUND\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"IRI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"URI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"BNODE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"RAND\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"ABS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"CEIL\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"FLOOR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"ROUND\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"CONCAT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"STRLEN\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"UCASE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"LCASE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"ENCODE_FOR_URI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"CONTAINS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"STRSTARTS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"STRENDS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"STRBEFORE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"STRAFTER\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"YEAR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"MONTH\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"DAY\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"HOURS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"MINUTES\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"SECONDS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"TIMEZONE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"TZ\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"NOW\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"UUID\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"STRUUID\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"MD5\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"SHA1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"SHA256\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"SHA384\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"SHA512\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"COALESCE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"IF\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"STRLANG\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"STRDT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"SAMETERM\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"ISIRI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"ISURI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"ISBLANK\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"ISLITERAL\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"ISNUMERIC\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"TRUE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"FALSE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"COUNT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"SUM\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"MIN\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"MAX\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"AVG\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"SAMPLE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"GROUP_CONCAT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"SUBSTR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"REPLACE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"REGEX\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"EXISTS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"NOT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"IRI_REF\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"STRING_LITERAL1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"STRING_LITERAL2\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"STRING_LITERAL_LONG1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"STRING_LITERAL_LONG2\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"INTEGER\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"DECIMAL\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"DOUBLE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"INTEGER_POSITIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"DECIMAL_POSITIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"DOUBLE_POSITIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"INTEGER_NEGATIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"DECIMAL_NEGATIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"DOUBLE_NEGATIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"PNAME_LN\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"PNAME_NS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"]}, \r\n  \"selectClause\" : {\r\n     \"SELECT\": [\"SELECT\",\"?or([DISTINCT,REDUCED])\",\"or([+or([var,[ (,expression,AS,var,)]]),*])\"]}, \r\n  \"selectQuery\" : {\r\n     \"SELECT\": [\"selectClause\",\"*datasetClause\",\"whereClause\",\"solutionModifier\"]}, \r\n  \"serviceGraphPattern\" : {\r\n     \"SERVICE\": [\"SERVICE\",\"?SILENT\",\"varOrIRIref\",\"groupGraphPattern\"]}, \r\n  \"solutionModifier\" : {\r\n     \"LIMIT\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \r\n     \"OFFSET\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \r\n     \"ORDER\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \r\n     \"HAVING\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \r\n     \"GROUP\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \r\n     \"VALUES\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \r\n     \"$\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \r\n     \"}\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"]}, \r\n  \"sourceSelector\" : {\r\n     \"IRI_REF\": [\"iriRef\"], \r\n     \"PNAME_LN\": [\"iriRef\"], \r\n     \"PNAME_NS\": [\"iriRef\"]}, \r\n  \"sparql11\" : {\r\n     \"$\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \r\n     \"CONSTRUCT\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \r\n     \"DESCRIBE\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \r\n     \"ASK\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \r\n     \"INSERT\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \r\n     \"DELETE\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \r\n     \"SELECT\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \r\n     \"LOAD\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \r\n     \"CLEAR\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \r\n     \"DROP\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \r\n     \"ADD\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \r\n     \"MOVE\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \r\n     \"COPY\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \r\n     \"CREATE\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \r\n     \"WITH\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \r\n     \"BASE\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \r\n     \"PREFIX\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"]}, \r\n  \"storeProperty\" : {\r\n     \"VAR1\": [], \r\n     \"VAR2\": [], \r\n     \"IRI_REF\": [], \r\n     \"PNAME_LN\": [], \r\n     \"PNAME_NS\": [], \r\n     \"a\": []}, \r\n  \"strReplaceExpression\" : {\r\n     \"REPLACE\": [\"REPLACE\",\"(\",\"expression\",\",\",\"expression\",\",\",\"expression\",\"?[,,expression]\",\")\"]}, \r\n  \"string\" : {\r\n     \"STRING_LITERAL1\": [\"STRING_LITERAL1\"], \r\n     \"STRING_LITERAL2\": [\"STRING_LITERAL2\"], \r\n     \"STRING_LITERAL_LONG1\": [\"STRING_LITERAL_LONG1\"], \r\n     \"STRING_LITERAL_LONG2\": [\"STRING_LITERAL_LONG2\"]}, \r\n  \"subSelect\" : {\r\n     \"SELECT\": [\"selectClause\",\"whereClause\",\"solutionModifier\",\"valuesClause\"]}, \r\n  \"substringExpression\" : {\r\n     \"SUBSTR\": [\"SUBSTR\",\"(\",\"expression\",\",\",\"expression\",\"?[,,expression]\",\")\"]}, \r\n  \"triplesBlock\" : {\r\n     \"VAR1\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"VAR2\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"NIL\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"(\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"[\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"IRI_REF\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"TRUE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"FALSE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"BLANK_NODE_LABEL\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"ANON\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"PNAME_LN\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"PNAME_NS\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"STRING_LITERAL1\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"STRING_LITERAL2\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"STRING_LITERAL_LONG1\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"STRING_LITERAL_LONG2\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"INTEGER\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"DECIMAL\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"DOUBLE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"INTEGER_POSITIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"DECIMAL_POSITIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"DOUBLE_POSITIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"INTEGER_NEGATIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"DECIMAL_NEGATIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"DOUBLE_NEGATIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"]}, \r\n  \"triplesNode\" : {\r\n     \"(\": [\"collection\"], \r\n     \"[\": [\"blankNodePropertyList\"]}, \r\n  \"triplesNodePath\" : {\r\n     \"(\": [\"collectionPath\"], \r\n     \"[\": [\"blankNodePropertyListPath\"]}, \r\n  \"triplesSameSubject\" : {\r\n     \"VAR1\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n     \"VAR2\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n     \"NIL\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n     \"IRI_REF\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n     \"TRUE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n     \"FALSE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n     \"BLANK_NODE_LABEL\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n     \"ANON\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n     \"PNAME_LN\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n     \"PNAME_NS\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n     \"STRING_LITERAL1\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n     \"STRING_LITERAL2\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n     \"STRING_LITERAL_LONG1\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n     \"STRING_LITERAL_LONG2\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n     \"INTEGER\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n     \"DECIMAL\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n     \"DOUBLE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n     \"INTEGER_POSITIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n     \"DECIMAL_POSITIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n     \"DOUBLE_POSITIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n     \"INTEGER_NEGATIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n     \"DECIMAL_NEGATIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n     \"DOUBLE_NEGATIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \r\n     \"(\": [\"triplesNode\",\"propertyList\"], \r\n     \"[\": [\"triplesNode\",\"propertyList\"]}, \r\n  \"triplesSameSubjectPath\" : {\r\n     \"VAR1\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n     \"VAR2\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n     \"NIL\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n     \"IRI_REF\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n     \"TRUE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n     \"FALSE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n     \"BLANK_NODE_LABEL\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n     \"ANON\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n     \"PNAME_LN\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n     \"PNAME_NS\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n     \"STRING_LITERAL1\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n     \"STRING_LITERAL2\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n     \"STRING_LITERAL_LONG1\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n     \"STRING_LITERAL_LONG2\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n     \"INTEGER\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n     \"DECIMAL\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n     \"DOUBLE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n     \"INTEGER_POSITIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n     \"DECIMAL_POSITIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n     \"DOUBLE_POSITIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n     \"INTEGER_NEGATIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n     \"DECIMAL_NEGATIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n     \"DOUBLE_NEGATIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \r\n     \"(\": [\"triplesNodePath\",\"propertyListPath\"], \r\n     \"[\": [\"triplesNodePath\",\"propertyListPath\"]}, \r\n  \"triplesTemplate\" : {\r\n     \"VAR1\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n     \"VAR2\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n     \"NIL\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n     \"(\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n     \"[\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n     \"IRI_REF\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n     \"TRUE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n     \"FALSE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n     \"BLANK_NODE_LABEL\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n     \"ANON\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n     \"PNAME_LN\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n     \"PNAME_NS\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n     \"STRING_LITERAL1\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n     \"STRING_LITERAL2\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n     \"STRING_LITERAL_LONG1\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n     \"STRING_LITERAL_LONG2\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n     \"INTEGER\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n     \"DECIMAL\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n     \"DOUBLE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n     \"INTEGER_POSITIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n     \"DECIMAL_POSITIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n     \"DOUBLE_POSITIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n     \"INTEGER_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n     \"DECIMAL_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \r\n     \"DOUBLE_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"]}, \r\n  \"unaryExpression\" : {\r\n     \"!\": [\"!\",\"primaryExpression\"], \r\n     \"+\": [\"+\",\"primaryExpression\"], \r\n     \"-\": [\"-\",\"primaryExpression\"], \r\n     \"VAR1\": [\"primaryExpression\"], \r\n     \"VAR2\": [\"primaryExpression\"], \r\n     \"(\": [\"primaryExpression\"], \r\n     \"STR\": [\"primaryExpression\"], \r\n     \"LANG\": [\"primaryExpression\"], \r\n     \"LANGMATCHES\": [\"primaryExpression\"], \r\n     \"DATATYPE\": [\"primaryExpression\"], \r\n     \"BOUND\": [\"primaryExpression\"], \r\n     \"IRI\": [\"primaryExpression\"], \r\n     \"URI\": [\"primaryExpression\"], \r\n     \"BNODE\": [\"primaryExpression\"], \r\n     \"RAND\": [\"primaryExpression\"], \r\n     \"ABS\": [\"primaryExpression\"], \r\n     \"CEIL\": [\"primaryExpression\"], \r\n     \"FLOOR\": [\"primaryExpression\"], \r\n     \"ROUND\": [\"primaryExpression\"], \r\n     \"CONCAT\": [\"primaryExpression\"], \r\n     \"STRLEN\": [\"primaryExpression\"], \r\n     \"UCASE\": [\"primaryExpression\"], \r\n     \"LCASE\": [\"primaryExpression\"], \r\n     \"ENCODE_FOR_URI\": [\"primaryExpression\"], \r\n     \"CONTAINS\": [\"primaryExpression\"], \r\n     \"STRSTARTS\": [\"primaryExpression\"], \r\n     \"STRENDS\": [\"primaryExpression\"], \r\n     \"STRBEFORE\": [\"primaryExpression\"], \r\n     \"STRAFTER\": [\"primaryExpression\"], \r\n     \"YEAR\": [\"primaryExpression\"], \r\n     \"MONTH\": [\"primaryExpression\"], \r\n     \"DAY\": [\"primaryExpression\"], \r\n     \"HOURS\": [\"primaryExpression\"], \r\n     \"MINUTES\": [\"primaryExpression\"], \r\n     \"SECONDS\": [\"primaryExpression\"], \r\n     \"TIMEZONE\": [\"primaryExpression\"], \r\n     \"TZ\": [\"primaryExpression\"], \r\n     \"NOW\": [\"primaryExpression\"], \r\n     \"UUID\": [\"primaryExpression\"], \r\n     \"STRUUID\": [\"primaryExpression\"], \r\n     \"MD5\": [\"primaryExpression\"], \r\n     \"SHA1\": [\"primaryExpression\"], \r\n     \"SHA256\": [\"primaryExpression\"], \r\n     \"SHA384\": [\"primaryExpression\"], \r\n     \"SHA512\": [\"primaryExpression\"], \r\n     \"COALESCE\": [\"primaryExpression\"], \r\n     \"IF\": [\"primaryExpression\"], \r\n     \"STRLANG\": [\"primaryExpression\"], \r\n     \"STRDT\": [\"primaryExpression\"], \r\n     \"SAMETERM\": [\"primaryExpression\"], \r\n     \"ISIRI\": [\"primaryExpression\"], \r\n     \"ISURI\": [\"primaryExpression\"], \r\n     \"ISBLANK\": [\"primaryExpression\"], \r\n     \"ISLITERAL\": [\"primaryExpression\"], \r\n     \"ISNUMERIC\": [\"primaryExpression\"], \r\n     \"TRUE\": [\"primaryExpression\"], \r\n     \"FALSE\": [\"primaryExpression\"], \r\n     \"COUNT\": [\"primaryExpression\"], \r\n     \"SUM\": [\"primaryExpression\"], \r\n     \"MIN\": [\"primaryExpression\"], \r\n     \"MAX\": [\"primaryExpression\"], \r\n     \"AVG\": [\"primaryExpression\"], \r\n     \"SAMPLE\": [\"primaryExpression\"], \r\n     \"GROUP_CONCAT\": [\"primaryExpression\"], \r\n     \"SUBSTR\": [\"primaryExpression\"], \r\n     \"REPLACE\": [\"primaryExpression\"], \r\n     \"REGEX\": [\"primaryExpression\"], \r\n     \"EXISTS\": [\"primaryExpression\"], \r\n     \"NOT\": [\"primaryExpression\"], \r\n     \"IRI_REF\": [\"primaryExpression\"], \r\n     \"STRING_LITERAL1\": [\"primaryExpression\"], \r\n     \"STRING_LITERAL2\": [\"primaryExpression\"], \r\n     \"STRING_LITERAL_LONG1\": [\"primaryExpression\"], \r\n     \"STRING_LITERAL_LONG2\": [\"primaryExpression\"], \r\n     \"INTEGER\": [\"primaryExpression\"], \r\n     \"DECIMAL\": [\"primaryExpression\"], \r\n     \"DOUBLE\": [\"primaryExpression\"], \r\n     \"INTEGER_POSITIVE\": [\"primaryExpression\"], \r\n     \"DECIMAL_POSITIVE\": [\"primaryExpression\"], \r\n     \"DOUBLE_POSITIVE\": [\"primaryExpression\"], \r\n     \"INTEGER_NEGATIVE\": [\"primaryExpression\"], \r\n     \"DECIMAL_NEGATIVE\": [\"primaryExpression\"], \r\n     \"DOUBLE_NEGATIVE\": [\"primaryExpression\"], \r\n     \"PNAME_LN\": [\"primaryExpression\"], \r\n     \"PNAME_NS\": [\"primaryExpression\"]}, \r\n  \"update\" : {\r\n     \"INSERT\": [\"prologue\",\"?[update1,?[;,update]]\"], \r\n     \"DELETE\": [\"prologue\",\"?[update1,?[;,update]]\"], \r\n     \"LOAD\": [\"prologue\",\"?[update1,?[;,update]]\"], \r\n     \"CLEAR\": [\"prologue\",\"?[update1,?[;,update]]\"], \r\n     \"DROP\": [\"prologue\",\"?[update1,?[;,update]]\"], \r\n     \"ADD\": [\"prologue\",\"?[update1,?[;,update]]\"], \r\n     \"MOVE\": [\"prologue\",\"?[update1,?[;,update]]\"], \r\n     \"COPY\": [\"prologue\",\"?[update1,?[;,update]]\"], \r\n     \"CREATE\": [\"prologue\",\"?[update1,?[;,update]]\"], \r\n     \"WITH\": [\"prologue\",\"?[update1,?[;,update]]\"], \r\n     \"BASE\": [\"prologue\",\"?[update1,?[;,update]]\"], \r\n     \"PREFIX\": [\"prologue\",\"?[update1,?[;,update]]\"], \r\n     \"$\": [\"prologue\",\"?[update1,?[;,update]]\"]}, \r\n  \"update1\" : {\r\n     \"LOAD\": [\"load\"], \r\n     \"CLEAR\": [\"clear\"], \r\n     \"DROP\": [\"drop\"], \r\n     \"ADD\": [\"add\"], \r\n     \"MOVE\": [\"move\"], \r\n     \"COPY\": [\"copy\"], \r\n     \"CREATE\": [\"create\"], \r\n     \"INSERT\": [\"INSERT\",\"insert1\"], \r\n     \"DELETE\": [\"DELETE\",\"delete1\"], \r\n     \"WITH\": [\"modify\"]}, \r\n  \"updateAll\" : {\r\n     \"INSERT\": [\"?[update1,?[;,update]]\"], \r\n     \"DELETE\": [\"?[update1,?[;,update]]\"], \r\n     \"LOAD\": [\"?[update1,?[;,update]]\"], \r\n     \"CLEAR\": [\"?[update1,?[;,update]]\"], \r\n     \"DROP\": [\"?[update1,?[;,update]]\"], \r\n     \"ADD\": [\"?[update1,?[;,update]]\"], \r\n     \"MOVE\": [\"?[update1,?[;,update]]\"], \r\n     \"COPY\": [\"?[update1,?[;,update]]\"], \r\n     \"CREATE\": [\"?[update1,?[;,update]]\"], \r\n     \"WITH\": [\"?[update1,?[;,update]]\"], \r\n     \"$\": [\"?[update1,?[;,update]]\"]}, \r\n  \"usingClause\" : {\r\n     \"USING\": [\"USING\",\"or([iriRef,[NAMED,iriRef]])\"]}, \r\n  \"valueLogical\" : {\r\n     \"!\": [\"relationalExpression\"], \r\n     \"+\": [\"relationalExpression\"], \r\n     \"-\": [\"relationalExpression\"], \r\n     \"VAR1\": [\"relationalExpression\"], \r\n     \"VAR2\": [\"relationalExpression\"], \r\n     \"(\": [\"relationalExpression\"], \r\n     \"STR\": [\"relationalExpression\"], \r\n     \"LANG\": [\"relationalExpression\"], \r\n     \"LANGMATCHES\": [\"relationalExpression\"], \r\n     \"DATATYPE\": [\"relationalExpression\"], \r\n     \"BOUND\": [\"relationalExpression\"], \r\n     \"IRI\": [\"relationalExpression\"], \r\n     \"URI\": [\"relationalExpression\"], \r\n     \"BNODE\": [\"relationalExpression\"], \r\n     \"RAND\": [\"relationalExpression\"], \r\n     \"ABS\": [\"relationalExpression\"], \r\n     \"CEIL\": [\"relationalExpression\"], \r\n     \"FLOOR\": [\"relationalExpression\"], \r\n     \"ROUND\": [\"relationalExpression\"], \r\n     \"CONCAT\": [\"relationalExpression\"], \r\n     \"STRLEN\": [\"relationalExpression\"], \r\n     \"UCASE\": [\"relationalExpression\"], \r\n     \"LCASE\": [\"relationalExpression\"], \r\n     \"ENCODE_FOR_URI\": [\"relationalExpression\"], \r\n     \"CONTAINS\": [\"relationalExpression\"], \r\n     \"STRSTARTS\": [\"relationalExpression\"], \r\n     \"STRENDS\": [\"relationalExpression\"], \r\n     \"STRBEFORE\": [\"relationalExpression\"], \r\n     \"STRAFTER\": [\"relationalExpression\"], \r\n     \"YEAR\": [\"relationalExpression\"], \r\n     \"MONTH\": [\"relationalExpression\"], \r\n     \"DAY\": [\"relationalExpression\"], \r\n     \"HOURS\": [\"relationalExpression\"], \r\n     \"MINUTES\": [\"relationalExpression\"], \r\n     \"SECONDS\": [\"relationalExpression\"], \r\n     \"TIMEZONE\": [\"relationalExpression\"], \r\n     \"TZ\": [\"relationalExpression\"], \r\n     \"NOW\": [\"relationalExpression\"], \r\n     \"UUID\": [\"relationalExpression\"], \r\n     \"STRUUID\": [\"relationalExpression\"], \r\n     \"MD5\": [\"relationalExpression\"], \r\n     \"SHA1\": [\"relationalExpression\"], \r\n     \"SHA256\": [\"relationalExpression\"], \r\n     \"SHA384\": [\"relationalExpression\"], \r\n     \"SHA512\": [\"relationalExpression\"], \r\n     \"COALESCE\": [\"relationalExpression\"], \r\n     \"IF\": [\"relationalExpression\"], \r\n     \"STRLANG\": [\"relationalExpression\"], \r\n     \"STRDT\": [\"relationalExpression\"], \r\n     \"SAMETERM\": [\"relationalExpression\"], \r\n     \"ISIRI\": [\"relationalExpression\"], \r\n     \"ISURI\": [\"relationalExpression\"], \r\n     \"ISBLANK\": [\"relationalExpression\"], \r\n     \"ISLITERAL\": [\"relationalExpression\"], \r\n     \"ISNUMERIC\": [\"relationalExpression\"], \r\n     \"TRUE\": [\"relationalExpression\"], \r\n     \"FALSE\": [\"relationalExpression\"], \r\n     \"COUNT\": [\"relationalExpression\"], \r\n     \"SUM\": [\"relationalExpression\"], \r\n     \"MIN\": [\"relationalExpression\"], \r\n     \"MAX\": [\"relationalExpression\"], \r\n     \"AVG\": [\"relationalExpression\"], \r\n     \"SAMPLE\": [\"relationalExpression\"], \r\n     \"GROUP_CONCAT\": [\"relationalExpression\"], \r\n     \"SUBSTR\": [\"relationalExpression\"], \r\n     \"REPLACE\": [\"relationalExpression\"], \r\n     \"REGEX\": [\"relationalExpression\"], \r\n     \"EXISTS\": [\"relationalExpression\"], \r\n     \"NOT\": [\"relationalExpression\"], \r\n     \"IRI_REF\": [\"relationalExpression\"], \r\n     \"STRING_LITERAL1\": [\"relationalExpression\"], \r\n     \"STRING_LITERAL2\": [\"relationalExpression\"], \r\n     \"STRING_LITERAL_LONG1\": [\"relationalExpression\"], \r\n     \"STRING_LITERAL_LONG2\": [\"relationalExpression\"], \r\n     \"INTEGER\": [\"relationalExpression\"], \r\n     \"DECIMAL\": [\"relationalExpression\"], \r\n     \"DOUBLE\": [\"relationalExpression\"], \r\n     \"INTEGER_POSITIVE\": [\"relationalExpression\"], \r\n     \"DECIMAL_POSITIVE\": [\"relationalExpression\"], \r\n     \"DOUBLE_POSITIVE\": [\"relationalExpression\"], \r\n     \"INTEGER_NEGATIVE\": [\"relationalExpression\"], \r\n     \"DECIMAL_NEGATIVE\": [\"relationalExpression\"], \r\n     \"DOUBLE_NEGATIVE\": [\"relationalExpression\"], \r\n     \"PNAME_LN\": [\"relationalExpression\"], \r\n     \"PNAME_NS\": [\"relationalExpression\"]}, \r\n  \"valuesClause\" : {\r\n     \"VALUES\": [\"VALUES\",\"dataBlock\"], \r\n     \"$\": [], \r\n     \"}\": []}, \r\n  \"var\" : {\r\n     \"VAR1\": [\"VAR1\"], \r\n     \"VAR2\": [\"VAR2\"]}, \r\n  \"varOrIRIref\" : {\r\n     \"VAR1\": [\"var\"], \r\n     \"VAR2\": [\"var\"], \r\n     \"IRI_REF\": [\"iriRef\"], \r\n     \"PNAME_LN\": [\"iriRef\"], \r\n     \"PNAME_NS\": [\"iriRef\"]}, \r\n  \"varOrTerm\" : {\r\n     \"VAR1\": [\"var\"], \r\n     \"VAR2\": [\"var\"], \r\n     \"NIL\": [\"graphTerm\"], \r\n     \"IRI_REF\": [\"graphTerm\"], \r\n     \"TRUE\": [\"graphTerm\"], \r\n     \"FALSE\": [\"graphTerm\"], \r\n     \"BLANK_NODE_LABEL\": [\"graphTerm\"], \r\n     \"ANON\": [\"graphTerm\"], \r\n     \"PNAME_LN\": [\"graphTerm\"], \r\n     \"PNAME_NS\": [\"graphTerm\"], \r\n     \"STRING_LITERAL1\": [\"graphTerm\"], \r\n     \"STRING_LITERAL2\": [\"graphTerm\"], \r\n     \"STRING_LITERAL_LONG1\": [\"graphTerm\"], \r\n     \"STRING_LITERAL_LONG2\": [\"graphTerm\"], \r\n     \"INTEGER\": [\"graphTerm\"], \r\n     \"DECIMAL\": [\"graphTerm\"], \r\n     \"DOUBLE\": [\"graphTerm\"], \r\n     \"INTEGER_POSITIVE\": [\"graphTerm\"], \r\n     \"DECIMAL_POSITIVE\": [\"graphTerm\"], \r\n     \"DOUBLE_POSITIVE\": [\"graphTerm\"], \r\n     \"INTEGER_NEGATIVE\": [\"graphTerm\"], \r\n     \"DECIMAL_NEGATIVE\": [\"graphTerm\"], \r\n     \"DOUBLE_NEGATIVE\": [\"graphTerm\"]}, \r\n  \"verb\" : {\r\n     \"VAR1\": [\"storeProperty\",\"varOrIRIref\"], \r\n     \"VAR2\": [\"storeProperty\",\"varOrIRIref\"], \r\n     \"IRI_REF\": [\"storeProperty\",\"varOrIRIref\"], \r\n     \"PNAME_LN\": [\"storeProperty\",\"varOrIRIref\"], \r\n     \"PNAME_NS\": [\"storeProperty\",\"varOrIRIref\"], \r\n     \"a\": [\"storeProperty\",\"a\"]}, \r\n  \"verbPath\" : {\r\n     \"^\": [\"path\"], \r\n     \"a\": [\"path\"], \r\n     \"!\": [\"path\"], \r\n     \"(\": [\"path\"], \r\n     \"IRI_REF\": [\"path\"], \r\n     \"PNAME_LN\": [\"path\"], \r\n     \"PNAME_NS\": [\"path\"]}, \r\n  \"verbSimple\" : {\r\n     \"VAR1\": [\"var\"], \r\n     \"VAR2\": [\"var\"]}, \r\n  \"whereClause\" : {\r\n     \"{\": [\"?WHERE\",\"groupGraphPattern\"], \r\n     \"WHERE\": [\"?WHERE\",\"groupGraphPattern\"]}\r\n},\r\n\r\nkeywords:/^(GROUP_CONCAT|DATATYPE|BASE|PREFIX|SELECT|CONSTRUCT|DESCRIBE|ASK|FROM|NAMED|ORDER|BY|LIMIT|ASC|DESC|OFFSET|DISTINCT|REDUCED|WHERE|GRAPH|OPTIONAL|UNION|FILTER|GROUP|HAVING|AS|VALUES|LOAD|CLEAR|DROP|CREATE|MOVE|COPY|SILENT|INSERT|DELETE|DATA|WITH|TO|USING|NAMED|MINUS|BIND|LANGMATCHES|LANG|BOUND|SAMETERM|ISIRI|ISURI|ISBLANK|ISLITERAL|REGEX|TRUE|FALSE|UNDEF|ADD|DEFAULT|ALL|SERVICE|INTO|IN|NOT|IRI|URI|BNODE|RAND|ABS|CEIL|FLOOR|ROUND|CONCAT|STRLEN|UCASE|LCASE|ENCODE_FOR_URI|CONTAINS|STRSTARTS|STRENDS|STRBEFORE|STRAFTER|YEAR|MONTH|DAY|HOURS|MINUTES|SECONDS|TIMEZONE|TZ|NOW|UUID|STRUUID|MD5|SHA1|SHA256|SHA384|SHA512|COALESCE|IF|STRLANG|STRDT|ISNUMERIC|SUBSTR|REPLACE|EXISTS|COUNT|SUM|MIN|MAX|AVG|SAMPLE|SEPARATOR|STR)/i ,\r\n\r\npunct:/^(\\*|a|\\.|\\{|\\}|,|\\(|\\)|;|\\[|\\]|\\|\\||&&|=|!=|!|<=|>=|<|>|\\+|-|\\/|\\^\\^|\\?|\\||\\^)/ ,\r\n\r\nstartSymbol:\"sparql11\",\r\nacceptEmpty:true,\r\n}",
    "\"use strict\";\r\nvar CodeMirror = (function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})();\r\nCodeMirror.defineMode(\"sparql11\", function(config, parserConfig) {\r\n\r\n\tvar indentUnit = config.indentUnit;\r\n\r\n\tvar grammar = require('./_tokenizer-table.js');\r\n\tvar ll1_table = grammar.table;\r\n\r\n\tvar IRI_REF = '<[^<>\\\"\\'\\|\\{\\}\\^\\\\\\x00-\\x20]*>';\r\n\t/*\r\n\t * PN_CHARS_BASE =\r\n\t * '[A-Z]|[a-z]|[\\\\u00C0-\\\\u00D6]|[\\\\u00D8-\\\\u00F6]|[\\\\u00F8-\\\\u02FF]|[\\\\u0370-\\\\u037D]|[\\\\u037F-\\\\u1FFF]|[\\\\u200C-\\\\u200D]|[\\\\u2070-\\\\u218F]|[\\\\u2C00-\\\\u2FEF]|[\\\\u3001-\\\\uD7FF]|[\\\\uF900-\\\\uFDCF]|[\\\\uFDF0-\\\\uFFFD]|[\\\\u10000-\\\\uEFFFF]';\r\n\t */\r\n\r\n\tvar PN_CHARS_BASE =\r\n\t\t'[A-Za-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD]';\r\n\tvar PN_CHARS_U = PN_CHARS_BASE+'|_';\r\n\r\n\tvar PN_CHARS= '('+PN_CHARS_U+'|-|[0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040])';\r\n\tvar VARNAME = '('+PN_CHARS_U+'|[0-9])'+\r\n\t\t'('+PN_CHARS_U+'|[0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040])*';\r\n\tvar VAR1 = '\\\\?'+VARNAME;\r\n\tvar VAR2 = '\\\\$'+VARNAME;\r\n\r\n\tvar PN_PREFIX= '('+PN_CHARS_BASE+')((('+PN_CHARS+')|\\\\.)*('+PN_CHARS+'))?';\r\n\r\n\tvar HEX= '[0-9A-Fa-f]';\r\n\tvar PERCENT='(%'+HEX+HEX+')';\r\n\tvar PN_LOCAL_ESC='(\\\\\\\\[_~\\\\.\\\\-!\\\\$&\\'\\\\(\\\\)\\\\*\\\\+,;=/\\\\?#@%])';\r\n\tvar PLX= '('+PERCENT+'|'+PN_LOCAL_ESC+')';\r\n\tvar PN_LOCAL= '('+PN_CHARS_U+'|:|[0-9]|'+PLX+')(('+PN_CHARS+'|\\\\.|:|'+PLX+')*('+PN_CHARS+'|:|'+PLX+'))?';\r\n\tvar BLANK_NODE_LABEL = '_:('+PN_CHARS_U+'|[0-9])(('+PN_CHARS+'|\\\\.)*'+PN_CHARS+')?';\r\n\tvar PNAME_NS = '('+PN_PREFIX+')?:';\r\n\tvar PNAME_LN = PNAME_NS+PN_LOCAL;\r\n\tvar LANGTAG = '@[a-zA-Z]+(-[a-zA-Z0-9]+)*';\r\n\r\n\tvar EXPONENT = '[eE][\\\\+-]?[0-9]+';\r\n\tvar INTEGER = '[0-9]+';\r\n\tvar DECIMAL = '(([0-9]+\\\\.[0-9]*)|(\\\\.[0-9]+))';\r\n\tvar DOUBLE =\r\n\t\t'(([0-9]+\\\\.[0-9]*'+EXPONENT+')|'+\r\n\t\t'(\\\\.[0-9]+'+EXPONENT+')|'+\r\n\t\t'([0-9]+'+EXPONENT+'))';\r\n\r\n\tvar INTEGER_POSITIVE = '\\\\+' + INTEGER;\r\n\tvar DECIMAL_POSITIVE = '\\\\+' + DECIMAL;\r\n\tvar DOUBLE_POSITIVE  = '\\\\+' + DOUBLE;\r\n\tvar INTEGER_NEGATIVE = '-' + INTEGER;\r\n\tvar DECIMAL_NEGATIVE = '-' + DECIMAL;\r\n\tvar DOUBLE_NEGATIVE  = '-' + DOUBLE;\r\n\r\n\tvar ECHAR = '\\\\\\\\[tbnrf\\\\\\\\\"\\']';\r\n\t\r\n\t\r\n\t //IMPORTANT: this unicode rule is not in the official grammar.\r\n      //Reason: https://github.com/YASGUI/YASQE/issues/49\r\n      //unicode escape sequences (which the sparql spec considers part of the pre-processing of sparql queries)\r\n      //are marked as invalid. We have little choice (other than adding a layer of complixity) than to modify the grammar accordingly\r\n      //however, for now only allow these escape sequences in literals (where actually, this should be allows in e.g. prefixes as well)\r\n\tvar hex4 = HEX + '{4}'\r\n\tvar unicode = '(\\\\\\\\u' + hex4 +'|\\\\\\\\U00(10|0' + HEX + ')'+ hex4 + ')';\r\n\tvar LINE_BREAK = \"\\n\";\r\n\tvar STRING_LITERAL1 = \"'(([^\\\\x27\\\\x5C\\\\x0A\\\\x0D])|\"+ECHAR+\"|\" + unicode + \")*'\";\r\n\tvar STRING_LITERAL2 = '\"(([^\\\\x22\\\\x5C\\\\x0A\\\\x0D])|'+ECHAR+'|' + unicode + ')*\"';\r\n\t\r\n\tvar STRING_LITERAL_LONG = {\r\n\t\tSINGLE: {\r\n\t\t\tCAT: \"STRING_LITERAL_LONG1\",\r\n\t\t\tQUOTES: \"'''\",\r\n\t\t\tCONTENTS: \"(('|'')?([^'\\\\\\\\]|\"+ECHAR+\"|\"+unicode+\"))*\",\r\n\t\t\t\r\n\t\t},\r\n\t\tDOUBLE: {\r\n\t\t\tCAT: \"STRING_LITERAL_LONG2\",\r\n\t\t\tQUOTES: '\"\"\"',\r\n\t\t\tCONTENTS: '((\"|\"\")?([^\"\\\\\\\\]|'+ECHAR+'|'+unicode+'))*',\r\n\t\t}\r\n\t};\r\n\tfor (var key in STRING_LITERAL_LONG) {\r\n\t\tSTRING_LITERAL_LONG[key].COMPLETE = STRING_LITERAL_LONG[key].QUOTES + STRING_LITERAL_LONG[key].CONTENTS + STRING_LITERAL_LONG[key].QUOTES;\r\n\t}\r\n//\tvar STRING_LITERAL_LONG_QUOTES = {\r\n//\t\t\"STRING_LITERAL_LONG_QUOTES1\": \"'''\",\r\n//\t\t\"STRING_LITERAL_LONG_QUOTES2\": '\"\"\"',\r\n//\t}\r\n//\tvar STRING_LITERAL_LONG_CONTENTS = {\r\n//\t\t\"STRING_LITERAL_LONG_QUOTES1\": \"(('|'')?([^'\\\\\\\\]|\"+ECHAR+\"|\"+unicode+\"))*\",\r\n//\t\t\"STRING_LITERAL_LONG_QUOTES2\": '((\"|\"\")?([^\"\\\\\\\\]|'+ECHAR+'|'+unicode+'))*'\r\n//\t};\r\n//\tvar STRING_LITERAL_LONG1 = STRING_LITERAL_LONG['SINGLE'].QUOTES + STRING_LITERAL_LONG['SINGLE'].CONTENTS + STRING_LITERAL_LONG['SINGLE'].QUOTES;\r\n//\tvar STRING_LITERAL_LONG2 = STRING_LITERAL_LONG['DOUBLE'].QUOTES + STRING_LITERAL_LONG['DOUBLE'].CONTENTS + STRING_LITERAL_LONG['DOUBLE'].QUOTES;\r\n\t\r\n//\tvar stringLiteralLongContentTerminals = {};\r\n//\tfor (var key in STRING_LITERAL_LONG) {\r\n//\t\tstringLiteralLongContentTerminals[key] = {\r\n//\t\t\tname: key,\r\n//\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL_LONG_CONTENTS[key]),\r\n//\t\t\tstyle:\"string\"\r\n//\t\t};\r\n//\t}\r\n\t//some regular expressions not used in regular terminals, because this is used accross lines\r\n\tvar stringLiteralLongRegex = {};\r\n\tfor (var key in STRING_LITERAL_LONG) {\r\n\t\tstringLiteralLongRegex[key] = {\r\n\t\t\tcomplete: {\r\n\t\t\t\tname: \"STRING_LITERAL_LONG_\" + key,\r\n\t\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL_LONG[key].COMPLETE),\r\n\t\t\t\tstyle:\"string\"\r\n\t\t\t},\r\n\t\t\tcontents: {\r\n\t\t\t\tname: \"STRING_LITERAL_LONG_\" + key,\r\n\t\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL_LONG[key].CONTENTS),\r\n\t\t\t\tstyle:\"string\"\r\n\t\t\t},\r\n\t\t\tclosing: {\r\n\t\t\t\tname: \"STRING_LITERAL_LONG_\" + key,\r\n\t\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL_LONG[key].CONTENTS + STRING_LITERAL_LONG[key].QUOTES),\r\n\t\t\t\tstyle:\"string\"\r\n\t\t\t},\r\n\t\t\tquotes: {\r\n\t\t\t\tname: \"STRING_LITERAL_LONG_QUOTES_\" + key,\r\n\t\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL_LONG[key].QUOTES),\r\n\t\t\t\tstyle:\"string\"\r\n\t\t\t},\r\n\t\t\r\n\t\t}\r\n\t}\r\n\t\r\n\tvar WS    =        '[\\\\x20\\\\x09\\\\x0D\\\\x0A]';\r\n\t// Careful! Code mirror feeds one line at a time with no \\n\r\n\t// ... but otherwise comment is terminated by \\n\r\n\tvar COMMENT = '#([^\\\\n\\\\r]*[\\\\n\\\\r]|[^\\\\n\\\\r]*$)';\r\n\tvar WS_OR_COMMENT_STAR = '('+WS+'|('+COMMENT+'))*';\r\n\tvar NIL   = '\\\\('+WS_OR_COMMENT_STAR+'\\\\)';\r\n\tvar ANON  = '\\\\['+WS_OR_COMMENT_STAR+'\\\\]';\r\n\tvar terminals= [\r\n\t\t{ name: \"WS\",\r\n\t\t\tregex:new RegExp(\"^\"+WS+\"+\"),\r\n\t\t\tstyle:\"ws\" },\r\n\r\n\t\t{ name: \"COMMENT\",\r\n\t\t\tregex:new RegExp(\"^\"+COMMENT),\r\n\t\t\tstyle:\"comment\" },\r\n\r\n\t\t{ name: \"IRI_REF\",\r\n\t\t\tregex:new RegExp(\"^\"+IRI_REF),\r\n\t\t\tstyle:\"variable-3\" },\r\n\r\n\t\t{ name: \"VAR1\",\r\n\t\t\tregex:new RegExp(\"^\"+VAR1),\r\n\t\t\tstyle:\"atom\"},\r\n\r\n\t\t{ name: \"VAR2\",\r\n\t\t\tregex:new RegExp(\"^\"+VAR2),\r\n\t\t\tstyle:\"atom\"},\r\n\r\n\t\t{ name: \"LANGTAG\",\r\n\t\t\tregex:new RegExp(\"^\"+LANGTAG),\r\n\t\t\tstyle:\"meta\"},\r\n\r\n\t\t{ name: \"DOUBLE\",\r\n\t\t\tregex:new RegExp(\"^\"+DOUBLE),\r\n\t\t\tstyle:\"number\" },\r\n\r\n\t\t{ name: \"DECIMAL\",\r\n\t\t\tregex:new RegExp(\"^\"+DECIMAL),\r\n\t\t\tstyle:\"number\" },\r\n\r\n\t\t{ name: \"INTEGER\",\r\n\t\t\tregex:new RegExp(\"^\"+INTEGER),\r\n\t\t\tstyle:\"number\" },\r\n\r\n\t\t{ name: \"DOUBLE_POSITIVE\",\r\n\t\t\tregex:new RegExp(\"^\"+DOUBLE_POSITIVE),\r\n\t\t\tstyle:\"number\" },\r\n\r\n\t\t{ name: \"DECIMAL_POSITIVE\",\r\n\t\t\tregex:new RegExp(\"^\"+DECIMAL_POSITIVE),\r\n\t\t\tstyle:\"number\" },\r\n\r\n\t\t{ name: \"INTEGER_POSITIVE\",\r\n\t\t\tregex:new RegExp(\"^\"+INTEGER_POSITIVE),\r\n\t\t\tstyle:\"number\" },\r\n\r\n\t\t{ name: \"DOUBLE_NEGATIVE\",\r\n\t\t\tregex:new RegExp(\"^\"+DOUBLE_NEGATIVE),\r\n\t\t\tstyle:\"number\" },\r\n\r\n\t\t{ name: \"DECIMAL_NEGATIVE\",\r\n\t\t\tregex:new RegExp(\"^\"+DECIMAL_NEGATIVE),\r\n\t\t\tstyle:\"number\" },\r\n\r\n\t\t{ name: \"INTEGER_NEGATIVE\",\r\n\t\t\tregex:new RegExp(\"^\"+INTEGER_NEGATIVE),\r\n\t\t\tstyle:\"number\" },\r\n//\t\tstringLiteralLongRegex.SINGLE.complete,\r\n//\t\tstringLiteralLongRegex.DOUBLE.complete,\r\n//\t\tstringLiteralLongRegex.SINGLE.quotes,\r\n//\t\tstringLiteralLongRegex.DOUBLE.quotes,\r\n\t\t\r\n\t\t{ name: \"STRING_LITERAL1\",\r\n\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL1),\r\n\t\t\tstyle:\"string\" },\r\n\r\n\t\t{ name: \"STRING_LITERAL2\",\r\n\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL2),\r\n\t\t\tstyle:\"string\" },\r\n\r\n\t\t// Enclosed comments won't be highlighted\r\n\t\t{ name: \"NIL\",\r\n\t\t\tregex:new RegExp(\"^\"+NIL),\r\n\t\t\tstyle:\"punc\" },\r\n\r\n\t\t// Enclosed comments won't be highlighted\r\n\t\t{ name: \"ANON\",\r\n\t\t\tregex:new RegExp(\"^\"+ANON),\r\n\t\t\tstyle:\"punc\" },\r\n\r\n\t\t{ name: \"PNAME_LN\",\r\n\t\t\tregex:new RegExp(\"^\"+PNAME_LN),\r\n\t\t\tstyle:\"string-2\" },\r\n\r\n\t\t{ name: \"PNAME_NS\",\r\n\t\t\tregex:new RegExp(\"^\"+PNAME_NS),\r\n\t\t\tstyle:\"string-2\" },\r\n\r\n\t\t{ name: \"BLANK_NODE_LABEL\",\r\n\t\t\tregex:new RegExp(\"^\"+BLANK_NODE_LABEL),\r\n\t\t\tstyle:\"string-2\" }\r\n\t];\r\n\r\n\tfunction getPossibles(symbol) {\r\n\t\tvar possibles=[], possiblesOb=ll1_table[symbol];\r\n\t\tif (possiblesOb!=undefined) {\r\n\t\t\tfor (var property in possiblesOb) {\r\n\t\t\t\tpossibles.push(property.toString());\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tpossibles.push(symbol);\r\n\t\t}\r\n\t\treturn possibles;\r\n\t}\r\n\r\n\r\n\tfunction tokenBase(stream, state) {\r\n\r\n\t\tfunction nextToken() {\r\n\t\t\tvar consumed=null;\r\n\t\t\tif (state.inLiteral) {\r\n\t\t\t\t\r\n\t\t\t\tvar closingQuotes = false;\r\n\t\t\t\t//multi-line literal. try to parse contents.\r\n\t\t\t\tconsumed = stream.match(stringLiteralLongRegex[state.inLiteral].contents.regex, true, false);\r\n\t\t\t\tif (consumed && consumed[0].length == 0) {\r\n\t\t\t\t\t//try seeing whether we can consume closing quotes, to avoid stopping\r\n\t\t\t\t\tconsumed = stream.match(stringLiteralLongRegex[state.inLiteral].closing.regex, true, false);\r\n\t\t\t\t\tclosingQuotes = true;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (consumed && consumed[0].length > 0) {\r\n\t\t\t\t\t//some string content here. \r\n\t\t\t\t\t var returnObj = {\r\n\t\t\t\t\t\tquotePos: (closingQuotes? 'end': 'content'),\r\n\t\t\t\t\t\tcat: STRING_LITERAL_LONG[state.inLiteral].CAT,\r\n\t\t\t\t\t\tstyle: stringLiteralLongRegex[state.inLiteral].complete.style,\r\n\t\t\t\t\t\ttext: consumed[0],\r\n\t\t\t\t\t\tstart: stream.start\r\n\t\t\t\t\t};\r\n\t\t\t\t\t if (closingQuotes) state.inLiteral = false;\r\n\t\t\t\t\t return returnObj;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//Multiline literals\r\n\t\t\tfor (var quoteType in stringLiteralLongRegex) {\r\n\t\t\t\tconsumed= stream.match(stringLiteralLongRegex[quoteType].quotes.regex,true,false);\r\n\t\t\t\tif (consumed) {\r\n\t\t\t\t\tvar quotePos;\r\n\t\t\t\t\tif (state.inLiteral) {\r\n\t\t\t\t\t\t//end of literal. everything is fine\r\n\t\t\t\t\t\tstate.inLiteral = false;\r\n\t\t\t\t\t\tquotePos = 'end';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tstate.inLiteral = quoteType;\r\n\t\t\t\t\t\tquotePos = 'start';\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tcat: STRING_LITERAL_LONG[quoteType].CAT,\r\n\t\t\t\t\t\tstyle: stringLiteralLongRegex[quoteType].quotes.style,\r\n\t\t\t\t\t\ttext: consumed[0],\r\n\t\t\t\t\t\tquotePos: quotePos,\r\n\t\t\t\t\t\tstart: stream.start\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// Tokens defined by individual regular expressions\r\n\t\t\tfor (var i=0; i<terminals.length; ++i) {\r\n\t\t\t\tconsumed= stream.match(terminals[i].regex,true,false);\r\n\t\t\t\tif (consumed) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tcat: terminals[i].name,\r\n\t\t\t\t\t\tstyle: terminals[i].style,\r\n\t\t\t\t\t\ttext: consumed[0],\r\n\t\t\t\t\t\tstart: stream.start\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Keywords\r\n\t\t\tconsumed= stream.match(grammar.keywords,true,false);\r\n\t\t\tif (consumed)\r\n\t\t\t\treturn { cat: stream.current().toUpperCase(),\r\n\t\t\t\t\t\t\t\t style: \"keyword\",\r\n\t\t\t\t\t\t\t\t text: consumed[0],\r\n\t\t\t\t\t\t\t\t start: stream.start\r\n\t\t\t\t\t\t\t };\r\n\r\n\t\t\t// Punctuation\r\n\t\t\tconsumed= stream.match(grammar.punct,true,false);\r\n\t\t\tif (consumed)\r\n\t\t\t\treturn { cat: stream.current(),\r\n\t\t\t\t\t\t\t\t style: \"punc\",\r\n\t\t\t\t\t\t\t\t text: consumed[0],\r\n\t\t\t\t\t\t\t\t start: stream.start\r\n\t\t\t\t\t\t\t };\r\n\r\n\t\t\t// Token is invalid\r\n\t\t\t// better consume something anyway, or else we're stuck\r\n\t\t\tconsumed= stream.match(/^.[A-Za-z0-9]*/,true,false);\r\n\t\t\treturn { cat:\"<invalid_token>\",\r\n\t\t\t\t\t\t\t style: \"error\",\r\n\t\t\t\t\t\t\t text: consumed[0],\r\n\t\t\t\t\t\t\t start: stream.start\r\n\t\t\t\t\t\t };\r\n\t\t}\r\n\r\n\t\tfunction recordFailurePos() {\r\n\t\t\t// tokenOb.style= \"sp-invalid\";\r\n\t\t\tvar col= stream.column();\r\n\t\t\tstate.errorStartPos= col;\r\n\t\t\tstate.errorEndPos= col+tokenOb.text.length;\r\n\t\t};\r\n\r\n\t\tfunction setQueryType(s) {\r\n\t\t\tif (state.queryType==null) {\r\n\t\t\t\tif (s ==\"SELECT\" || s==\"CONSTRUCT\" || s==\"ASK\" || s==\"DESCRIBE\" || s==\"INSERT\" || s==\"DELETE\" || s==\"LOAD\" || s==\"CLEAR\" || s==\"CREATE\" || s==\"DROP\" || s==\"COPY\" || s==\"MOVE\" || s==\"ADD\")\r\n\t\t\t\t\tstate.queryType=s;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Some fake non-terminals are just there to have side-effect on state\r\n\t\t// - i.e. allow or disallow variables and bnodes in certain non-nesting\r\n\t\t// contexts\r\n\t\tfunction setSideConditions(topSymbol) {\r\n\t\t\tif (topSymbol==\"disallowVars\") state.allowVars=false;\r\n\t\t\telse if (topSymbol==\"allowVars\") state.allowVars=true;\r\n\t\t\telse if (topSymbol==\"disallowBnodes\") state.allowBnodes=false;\r\n\t\t\telse if (topSymbol==\"allowBnodes\") state.allowBnodes=true;\r\n\t\t\telse if (topSymbol==\"storeProperty\") state.storeProperty=true;\r\n\t\t}\r\n\r\n\t\tfunction checkSideConditions(topSymbol) {\r\n\t\t\treturn(\r\n\t\t\t\t(state.allowVars || topSymbol!=\"var\") &&\r\n\t\t\t\t\t(state.allowBnodes ||\r\n\t\t\t\t\t (topSymbol!=\"blankNode\" &&\r\n\t\t\t\t\t\ttopSymbol!=\"blankNodePropertyList\" &&\r\n\t\t\t\t\t\ttopSymbol!=\"blankNodePropertyListPath\")));\r\n\t\t}\r\n\r\n\t\t// CodeMirror works with one line at a time,\r\n\t\t// but newline should behave like whitespace\r\n\t\t// - i.e. a definite break between tokens (for autocompleter)\r\n\t\tif (stream.pos==0)\r\n\t\t\tstate.possibleCurrent= state.possibleNext;\r\n\r\n\t\tvar tokenOb= nextToken();\r\n\r\n\r\n\t\tif (tokenOb.cat==\"<invalid_token>\") {\r\n\t\t\t// set error state, and\r\n\t\t\tif (state.OK==true) {\r\n\t\t\t\tstate.OK=false;\r\n\t\t\t\trecordFailurePos();\r\n\t\t\t}\r\n\t\t\tstate.complete=false;\r\n\t\t\t// alert(\"Invalid:\"+tokenOb.text);\r\n\t\t\treturn tokenOb.style;\r\n\t\t}\r\n\r\n\t\tif (tokenOb.cat == \"WS\" || tokenOb.cat == \"COMMENT\" || (tokenOb.quotePos && tokenOb.quotePos != 'end')) {\r\n\t\t\tstate.possibleCurrent = state.possibleNext;\r\n\t\t\treturn(tokenOb.style);\r\n\t\t}\r\n\t\t// Otherwise, run the parser until the token is digested\r\n\t\t// or failure\r\n\t\tvar finished= false;\r\n\t\tvar topSymbol;\r\n\t\tvar token= tokenOb.cat;\r\n\t\t\r\n\t\tif (!tokenOb.quotePos || tokenOb.quotePos == 'end') {\r\n\t\t// Incremental LL1 parse\r\n\t\t\twhile(state.stack.length>0 && token && state.OK && !finished ) {\r\n\t\t\t\ttopSymbol= state.stack.pop();\r\n\t\r\n\t\t\t\tif (!ll1_table[topSymbol]) {\r\n\t\t\t\t\t// Top symbol is a terminal\r\n\t\t\t\t\tif (topSymbol == token) {\r\n\t\t\t\t\t\t// Matching terminals\r\n\t\t\t\t\t\t// - consume token from input stream\r\n\t\t\t\t\t\tfinished=true;\r\n\t\t\t\t\t\tsetQueryType(topSymbol);\r\n\t\t\t\t\t\t// Check whether $ (end of input token) is poss next\r\n\t\t\t\t\t\t// for everything on stack\r\n\t\t\t\t\t\tvar allNillable=true;\r\n\t\t\t\t\t\tfor(var sp=state.stack.length;sp>0;--sp) {\r\n\t\t\t\t\t\t\tvar item=ll1_table[state.stack[sp-1]];\r\n\t\t\t\t\t\t\tif (!item || !item[\"$\"])\r\n\t\t\t\t\t\t\t\tallNillable=false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tstate.complete= allNillable;\r\n\t\t\t\t\t\tif (state.storeProperty && token.cat != \"punc\") {\r\n\t\t\t\t\t\t\tstate.lastProperty = tokenOb.text;\r\n\t\t\t\t\t\t\tstate.storeProperty = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tstate.OK=false;\r\n\t\t\t\t\t\tstate.complete=false;\r\n\t\t\t\t\t\trecordFailurePos();\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// topSymbol is nonterminal\r\n\t\t\t\t\t// - see if there is an entry for topSymbol\r\n\t\t\t\t\t// and nextToken in table\r\n\t\t\t\t\tvar nextSymbols= ll1_table[topSymbol][token];\r\n\t\t\t\t\tif (nextSymbols!=undefined && checkSideConditions(topSymbol)) {\r\n\t\t\t\t\t\t// Match - copy RHS of rule to stack\r\n\t\t\t\t\t\tfor (var i=nextSymbols.length-1; i>=0; --i) {\r\n\t\t\t\t\t\t\tstate.stack.push(nextSymbols[i]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// Peform any non-grammatical side-effects\r\n\t\t\t\t\t\tsetSideConditions(topSymbol);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// No match in table - fail\r\n\t\t\t\t\t\tstate.OK=false;\r\n\t\t\t\t\t\tstate.complete=false;\r\n\t\t\t\t\t\trecordFailurePos();\r\n\t\t\t\t\t\tstate.stack.push(topSymbol);  // Shove topSymbol back on stack\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!finished && state.OK) { \r\n\t\t\tstate.OK=false; state.complete=false; recordFailurePos(); \r\n\t\t}\r\n\t\t\r\n\t\tif (state.possibleCurrent.indexOf('a') >= 0){\r\n\t\t\tstate.lastPredicateOffset = tokenOb.start;\r\n\t\t}\r\n\t\tstate.possibleCurrent = state.possibleNext;\r\n\t\t\r\n\t\tstate.possibleNext = getPossibles(state.stack[state.stack.length-1]);\r\n\r\n\t\treturn tokenOb.style;\r\n\t}\r\n\r\n\tvar indentTop={\r\n\t\t\"*[,, object]\": 3,\r\n\t\t\"*[(,),object]\": 3,\r\n\t\t\"*[(,),objectPath]\": 3,\r\n\t\t\"*[/,pathEltOrInverse]\": 2,\r\n\t\t\"object\": 2,\r\n\t\t\"objectPath\": 2,\r\n\t\t\"objectList\": 2,\r\n\t\t\"objectListPath\": 2,\r\n\t\t\"storeProperty\": 2,\r\n\t\t\"pathMod\": 2,\r\n\t\t\"?pathMod\": 2,\r\n\t\t\"propertyListNotEmpty\": 1,\r\n\t\t\"propertyList\": 1,\r\n\t\t\"propertyListPath\": 1,\r\n\t\t\"propertyListPathNotEmpty\": 1,\r\n\t\t\"?[verb,objectList]\": 1,\r\n//\t\t\"?[or([verbPath, verbSimple]),objectList]\": 1,\r\n\t};\r\n\r\n\tvar indentTable={\r\n\t\t\"}\":1,\r\n\t\t\"]\":0,\r\n\t\t\")\":1,\r\n\t\t\"{\":-1,\r\n\t\t\"(\":-1,\r\n//\t\t\"*[;,?[or([verbPath,verbSimple]),objectList]]\": 1,\r\n\t};\r\n\t\r\n\r\n\tfunction indent(state, textAfter) {\r\n\t\t//just avoid we don't indent multi-line  literals\r\n\t\tif (state.inLiteral) return 0;\r\n\t\tif (state.stack.length && state.stack[state.stack.length-1] == \"?[or([verbPath,verbSimple]),objectList]\") {\r\n\t\t\t//we are after a semi-colon. I.e., nicely align this line with predicate position of previous line\r\n\t\t\treturn state.lastPredicateOffset;\r\n\t\t} else {\r\n\t\t\tvar n = 0; // indent level\r\n\t\t\tvar i = state.stack.length-1;\r\n\t\t\tif (/^[\\}\\]\\)]/.test(textAfter)) {\r\n\t\t\t\t// Skip stack items until after matching bracket\r\n\t\t\t\tvar closeBracket=textAfter.substr(0,1);\r\n\t\t\t\tfor( ;i>=0;--i)\t{\r\n\t\t\t\t\tif (state.stack[i]==closeBracket) {\r\n\t\t\t\t\t\t--i; \r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// Consider nullable non-terminals if at top of stack\r\n\t\t\t\tvar dn = indentTop[state.stack[i]];\r\n\t\t\t\tif (dn) { \r\n\t\t\t\t\tn += dn; \r\n\t\t\t\t\t--i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor( ;i>=0;--i)\t{\r\n\t\t\t\tvar dn = indentTable[state.stack[i]];\r\n\t\t\t\tif (dn) {\r\n\t\t\t\t\tn+=dn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn n * config.indentUnit;\r\n\t\t}\r\n\t};\r\n\r\n\treturn {\r\n\t\ttoken: tokenBase,\r\n\t\tstartState: function(base) {\r\n\t\t\treturn {\r\n\t\t\t\ttokenize: tokenBase,\r\n\t\t\t\tOK: true,\r\n\t\t\t\tcomplete: grammar.acceptEmpty,\r\n\t\t\t\terrorStartPos: null,\r\n\t\t\t\terrorEndPos: null,\r\n\t\t\t\tqueryType: null,\r\n\t\t\t\tpossibleCurrent: getPossibles(grammar.startSymbol),\r\n\t\t\t\tpossibleNext: getPossibles(grammar.startSymbol),\r\n\t\t\t\tallowVars : true,\r\n\t\t\t\tallowBnodes : true,\r\n\t\t\t\tstoreProperty : false,\r\n\t\t\t\tlastProperty : \"\",\r\n\t\t\t\tinLiteral: false,\r\n\t\t\t\tstack: [grammar.startSymbol],\r\n\t\t\t\tlastPredicateOffset: config.indentUnit,\r\n\t\t\t}; \r\n\t\t},\r\n\t\tindent: indent,\r\n\t\telectricChars: \"}])\"\r\n\t};\r\n}\r\n);\r\nCodeMirror.defineMIME(\"application/x-sparql-query\", \"sparql11\");\r\n",
    "/*\r\n* TRIE implementation in Javascript\r\n* Copyright (c) 2010 Saurabh Odhyan | http://odhyan.com\r\n* \r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n* \r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n* \r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n* THE SOFTWARE.\r\n*\r\n* Date: Nov 7, 2010\r\n*/\r\n\r\n/*\r\n* A trie, or prefix tree, is a multi-way tree structure useful for storing strings over an alphabet. \r\n* It has been used to store large dictionaries of English (say) words in spell-checking programs \r\n* and in natural-language \"understanding\" programs.    \r\n* @see http://en.wikipedia.org/wiki/Trie\r\n* @see http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/Tree/Trie/\r\n/*\r\n\r\n* @class Trie\r\n* @constructor\r\n*/  \r\nvar Trie = module.exports = function() {\r\n    this.words = 0;\r\n    this.prefixes = 0;\r\n    this.children = [];\r\n};\r\n\r\nTrie.prototype = {\r\n    \r\n    /*\r\n    * Insert a word into the dictionary. \r\n    * Recursively traverse through the trie nodes, and create new node if does not already exist.\r\n    *\r\n    * @method insert\r\n    * @param {String} str Word to insert in the dictionary\r\n    * @param {Integer} pos Current index of the string to be inserted\r\n    * @return {Void}\r\n    */\r\n    insert: function(str, pos) {\r\n        if(str.length == 0) { //blank string cannot be inserted\r\n            return;\r\n        }\r\n        \r\n        var T = this,\r\n            k,\r\n            child;\r\n            \r\n        if(pos === undefined) {\r\n            pos = 0;\r\n        }\r\n        if(pos === str.length) {\r\n            T.words ++;\r\n            return;\r\n        }\r\n        T.prefixes ++;\r\n        k = str[pos];\r\n        if(T.children[k] === undefined) { //if node for this char doesn't exist, create one\r\n            T.children[k] = new Trie();\r\n        }\r\n        child = T.children[k];\r\n        child.insert(str, pos + 1);\r\n    },\r\n    \r\n    /*\r\n    * Remove a word from the dictionary.\r\n    *\r\n    * @method remove\r\n    * @param {String} str Word to be removed\r\n    * @param {Integer} pos Current index of the string to be removed\r\n    * @return {Void}\r\n    */\r\n    remove: function(str, pos) {\r\n        if(str.length == 0) {\r\n            return;\r\n        }\r\n        \r\n        var T = this,\r\n            k,\r\n            child;\r\n        \r\n        if(pos === undefined) {\r\n            pos = 0;\r\n        }   \r\n        if(T === undefined) {\r\n            return;\r\n        }\r\n        if(pos === str.length) {\r\n            T.words --;\r\n            return;\r\n        }\r\n        T.prefixes --;\r\n        k = str[pos];\r\n        child = T.children[k];\r\n        child.remove(str, pos + 1);\r\n    },\r\n    \r\n    /*\r\n    * Update an existing word in the dictionary. \r\n    * This method removes the old word from the dictionary and inserts the new word.\r\n    *\r\n    * @method update\r\n    * @param {String} strOld The old word to be replaced\r\n    * @param {String} strNew The new word to be inserted\r\n    * @return {Void}\r\n    */\r\n    update: function(strOld, strNew) {\r\n        if(strOld.length == 0 || strNew.length == 0) {\r\n            return;\r\n        }\r\n        this.remove(strOld);\r\n        this.insert(strNew);\r\n    },\r\n    \r\n    /*\r\n    * Count the number of times a given word has been inserted into the dictionary\r\n    *\r\n    * @method countWord\r\n    * @param {String} str Word to get count of\r\n    * @param {Integer} pos Current index of the given word\r\n    * @return {Integer} The number of times a given word exists in the dictionary\r\n    */\r\n    countWord: function(str, pos) {\r\n        if(str.length == 0) {\r\n            return 0;\r\n        }\r\n        \r\n        var T = this,\r\n            k,\r\n            child,\r\n            ret = 0;\r\n        \r\n        if(pos === undefined) {\r\n            pos = 0;\r\n        }   \r\n        if(pos === str.length) {\r\n            return T.words;\r\n        }\r\n        k = str[pos];\r\n        child = T.children[k];\r\n        if(child !== undefined) { //node exists\r\n            ret = child.countWord(str, pos + 1);\r\n        }\r\n        return ret;\r\n    },\r\n    \r\n    /*\r\n    * Count the number of times a given prefix exists in the dictionary\r\n    *\r\n    * @method countPrefix\r\n    * @param {String} str Prefix to get count of\r\n    * @param {Integer} pos Current index of the given prefix\r\n    * @return {Integer} The number of times a given prefix exists in the dictionary\r\n    */\r\n    countPrefix: function(str, pos) {\r\n        if(str.length == 0) {\r\n            return 0;\r\n        }\r\n        \r\n        var T = this,\r\n            k,\r\n            child,\r\n            ret = 0;\r\n\r\n        if(pos === undefined) {\r\n            pos = 0;\r\n        }\r\n        if(pos === str.length) {\r\n            return T.prefixes;\r\n        }\r\n        var k = str[pos];\r\n        child = T.children[k];\r\n        if(child !== undefined) { //node exists\r\n            ret = child.countPrefix(str, pos + 1); \r\n        }\r\n        return ret; \r\n    },\r\n    \r\n    /*\r\n    * Find a word in the dictionary\r\n    *\r\n    * @method find\r\n    * @param {String} str The word to find in the dictionary\r\n    * @return {Boolean} True if the word exists in the dictionary, else false\r\n    */\r\n    find: function(str) {\r\n        if(str.length == 0) {\r\n            return false;\r\n        }\r\n        \r\n        if(this.countWord(str) > 0) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    },\r\n    \r\n    /*\r\n    * Get all words in the dictionary\r\n    *\r\n    * @method getAllWords\r\n    * @param {String} str Prefix of current word\r\n    * @return {Array} Array of words in the dictionary\r\n    */\r\n    getAllWords: function(str) {\r\n        var T = this,\r\n            k,\r\n            child,\r\n            ret = [];\r\n        if(str === undefined) {\r\n            str = \"\";\r\n        }\r\n        if(T === undefined) {\r\n            return [];\r\n        }\r\n        if(T.words > 0) {\r\n            ret.push(str);\r\n        }\r\n        for(k in T.children) {\r\n            child = T.children[k];\r\n            ret = ret.concat(child.getAllWords(str + k));\r\n        }\r\n        return ret;\r\n    },\r\n    \r\n    /*\r\n    * Autocomplete a given prefix\r\n    *\r\n    * @method autoComplete\r\n    * @param {String} str Prefix to be completed based on dictionary entries\r\n    * @param {Integer} pos Current index of the prefix\r\n    * @return {Array} Array of possible suggestions\r\n    */\r\n    autoComplete: function(str, pos) {\r\n        \r\n        \r\n        var T = this,\r\n            k,\r\n            child;\r\n        if(str.length == 0) {\r\n\t\t\tif (pos === undefined) {\r\n\t\t\t\treturn T.getAllWords(str);\r\n\t\t\t} else {\r\n\t\t\t\treturn [];\r\n\t\t\t}\r\n        }\r\n        if(pos === undefined) {\r\n            pos = 0;\r\n        }   \r\n        k = str[pos];\r\n        child = T.children[k];\r\n        if(child === undefined) { //node doesn't exist\r\n            return [];\r\n        }\r\n        if(pos === str.length - 1) {\r\n            return child.getAllWords(str);\r\n        }\r\n        return child.autoComplete(str, pos + 1);\r\n    }\r\n};\r\n",
    "// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"fullScreen\", false, function(cm, val, old) {\n    if (old == CodeMirror.Init) old = false;\n    if (!old == !val) return;\n    if (val) setFullscreen(cm);\n    else setNormal(cm);\n  });\n\n  function setFullscreen(cm) {\n    var wrap = cm.getWrapperElement();\n    cm.state.fullScreenRestore = {scrollTop: window.pageYOffset, scrollLeft: window.pageXOffset,\n                                  width: wrap.style.width, height: wrap.style.height};\n    wrap.style.width = \"\";\n    wrap.style.height = \"auto\";\n    wrap.className += \" CodeMirror-fullscreen\";\n    document.documentElement.style.overflow = \"hidden\";\n    cm.refresh();\n  }\n\n  function setNormal(cm) {\n    var wrap = cm.getWrapperElement();\n    wrap.className = wrap.className.replace(/\\s*CodeMirror-fullscreen\\b/, \"\");\n    document.documentElement.style.overflow = \"\";\n    var info = cm.state.fullScreenRestore;\n    wrap.style.width = info.width; wrap.style.height = info.height;\n    window.scrollTo(info.scrollLeft, info.scrollTop);\n    cm.refresh();\n  }\n});\n",
    "// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  var defaults = {\n    pairs: \"()[]{}''\\\"\\\"\",\n    triples: \"\",\n    explode: \"[]{}\"\n  };\n\n  var Pos = CodeMirror.Pos;\n\n  CodeMirror.defineOption(\"autoCloseBrackets\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.removeKeyMap(keyMap);\n      cm.state.closeBrackets = null;\n    }\n    if (val) {\n      cm.state.closeBrackets = val;\n      cm.addKeyMap(keyMap);\n    }\n  });\n\n  function getOption(conf, name) {\n    if (name == \"pairs\" && typeof conf == \"string\") return conf;\n    if (typeof conf == \"object\" && conf[name] != null) return conf[name];\n    return defaults[name];\n  }\n\n  var bind = defaults.pairs + \"`\";\n  var keyMap = {Backspace: handleBackspace, Enter: handleEnter};\n  for (var i = 0; i < bind.length; i++)\n    keyMap[\"'\" + bind.charAt(i) + \"'\"] = handler(bind.charAt(i));\n\n  function handler(ch) {\n    return function(cm) { return handleChar(cm, ch); };\n  }\n\n  function getConfig(cm) {\n    var deflt = cm.state.closeBrackets;\n    if (!deflt) return null;\n    var mode = cm.getModeAt(cm.getCursor());\n    return mode.closeBrackets || deflt;\n  }\n\n  function handleBackspace(cm) {\n    var conf = getConfig(cm);\n    if (!conf || cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n\n    var pairs = getOption(conf, \"pairs\");\n    var ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var around = charsAround(cm, ranges[i].head);\n      if (!around || pairs.indexOf(around) % 2 != 0) return CodeMirror.Pass;\n    }\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var cur = ranges[i].head;\n      cm.replaceRange(\"\", Pos(cur.line, cur.ch - 1), Pos(cur.line, cur.ch + 1), \"+delete\");\n    }\n  }\n\n  function handleEnter(cm) {\n    var conf = getConfig(cm);\n    var explode = conf && getOption(conf, \"explode\");\n    if (!explode || cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n\n    var ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var around = charsAround(cm, ranges[i].head);\n      if (!around || explode.indexOf(around) % 2 != 0) return CodeMirror.Pass;\n    }\n    cm.operation(function() {\n      cm.replaceSelection(\"\\n\\n\", null);\n      cm.execCommand(\"goCharLeft\");\n      ranges = cm.listSelections();\n      for (var i = 0; i < ranges.length; i++) {\n        var line = ranges[i].head.line;\n        cm.indentLine(line, null, true);\n        cm.indentLine(line + 1, null, true);\n      }\n    });\n  }\n\n  function contractSelection(sel) {\n    var inverted = CodeMirror.cmpPos(sel.anchor, sel.head) > 0;\n    return {anchor: new Pos(sel.anchor.line, sel.anchor.ch + (inverted ? -1 : 1)),\n            head: new Pos(sel.head.line, sel.head.ch + (inverted ? 1 : -1))};\n  }\n\n  function handleChar(cm, ch) {\n    var conf = getConfig(cm);\n    if (!conf || cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n\n    var pairs = getOption(conf, \"pairs\");\n    var pos = pairs.indexOf(ch);\n    if (pos == -1) return CodeMirror.Pass;\n    var triples = getOption(conf, \"triples\");\n\n    var identical = pairs.charAt(pos + 1) == ch;\n    var ranges = cm.listSelections();\n    var opening = pos % 2 == 0;\n\n    var type;\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i], cur = range.head, curType;\n      var next = cm.getRange(cur, Pos(cur.line, cur.ch + 1));\n      if (opening && !range.empty()) {\n        curType = \"surround\";\n      } else if ((identical || !opening) && next == ch) {\n        if (triples.indexOf(ch) >= 0 && cm.getRange(cur, Pos(cur.line, cur.ch + 3)) == ch + ch + ch)\n          curType = \"skipThree\";\n        else\n          curType = \"skip\";\n      } else if (identical && cur.ch > 1 && triples.indexOf(ch) >= 0 &&\n                 cm.getRange(Pos(cur.line, cur.ch - 2), cur) == ch + ch &&\n                 (cur.ch <= 2 || cm.getRange(Pos(cur.line, cur.ch - 3), Pos(cur.line, cur.ch - 2)) != ch)) {\n        curType = \"addFour\";\n      } else if (identical) {\n        if (!CodeMirror.isWordChar(next) && enteringString(cm, cur, ch)) curType = \"both\";\n        else return CodeMirror.Pass;\n      } else if (opening && (cm.getLine(cur.line).length == cur.ch ||\n                             isClosingBracket(next, pairs) ||\n                             /\\s/.test(next))) {\n        curType = \"both\";\n      } else {\n        return CodeMirror.Pass;\n      }\n      if (!type) type = curType;\n      else if (type != curType) return CodeMirror.Pass;\n    }\n\n    var left = pos % 2 ? pairs.charAt(pos - 1) : ch;\n    var right = pos % 2 ? ch : pairs.charAt(pos + 1);\n    cm.operation(function() {\n      if (type == \"skip\") {\n        cm.execCommand(\"goCharRight\");\n      } else if (type == \"skipThree\") {\n        for (var i = 0; i < 3; i++)\n          cm.execCommand(\"goCharRight\");\n      } else if (type == \"surround\") {\n        var sels = cm.getSelections();\n        for (var i = 0; i < sels.length; i++)\n          sels[i] = left + sels[i] + right;\n        cm.replaceSelections(sels, \"around\");\n        sels = cm.listSelections().slice();\n        for (var i = 0; i < sels.length; i++)\n          sels[i] = contractSelection(sels[i]);\n        cm.setSelections(sels);\n      } else if (type == \"both\") {\n        cm.replaceSelection(left + right, null);\n        cm.triggerElectric(left + right);\n        cm.execCommand(\"goCharLeft\");\n      } else if (type == \"addFour\") {\n        cm.replaceSelection(left + left + left + left, \"before\");\n        cm.execCommand(\"goCharRight\");\n      }\n    });\n  }\n\n  function isClosingBracket(ch, pairs) {\n    var pos = pairs.lastIndexOf(ch);\n    return pos > -1 && pos % 2 == 1;\n  }\n\n  function charsAround(cm, pos) {\n    var str = cm.getRange(Pos(pos.line, pos.ch - 1),\n                          Pos(pos.line, pos.ch + 1));\n    return str.length == 2 ? str : null;\n  }\n\n  // Project the token type that will exists after the given char is\n  // typed, and use it to determine whether it would cause the start\n  // of a string token.\n  function enteringString(cm, pos, ch) {\n    var line = cm.getLine(pos.line);\n    var token = cm.getTokenAt(pos);\n    if (/\\bstring2?\\b/.test(token.type)) return false;\n    var stream = new CodeMirror.StringStream(line.slice(0, pos.ch) + ch + line.slice(pos.ch), 4);\n    stream.pos = stream.start = token.start;\n    for (;;) {\n      var type1 = cm.getMode().token(stream, token.state);\n      if (stream.pos >= pos.ch + 1) return /\\bstring2?\\b/.test(type1);\n      stream.start = stream.pos;\n    }\n  }\n});\n",
    "// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  var ie_lt8 = /MSIE \\d/.test(navigator.userAgent) &&\n    (document.documentMode == null || document.documentMode < 8);\n\n  var Pos = CodeMirror.Pos;\n\n  var matching = {\"(\": \")>\", \")\": \"(<\", \"[\": \"]>\", \"]\": \"[<\", \"{\": \"}>\", \"}\": \"{<\"};\n\n  function findMatchingBracket(cm, where, strict, config) {\n    var line = cm.getLineHandle(where.line), pos = where.ch - 1;\n    var match = (pos >= 0 && matching[line.text.charAt(pos)]) || matching[line.text.charAt(++pos)];\n    if (!match) return null;\n    var dir = match.charAt(1) == \">\" ? 1 : -1;\n    if (strict && (dir > 0) != (pos == where.ch)) return null;\n    var style = cm.getTokenTypeAt(Pos(where.line, pos + 1));\n\n    var found = scanForBracket(cm, Pos(where.line, pos + (dir > 0 ? 1 : 0)), dir, style || null, config);\n    if (found == null) return null;\n    return {from: Pos(where.line, pos), to: found && found.pos,\n            match: found && found.ch == match.charAt(0), forward: dir > 0};\n  }\n\n  // bracketRegex is used to specify which type of bracket to scan\n  // should be a regexp, e.g. /[[\\]]/\n  //\n  // Note: If \"where\" is on an open bracket, then this bracket is ignored.\n  //\n  // Returns false when no bracket was found, null when it reached\n  // maxScanLines and gave up\n  function scanForBracket(cm, where, dir, style, config) {\n    var maxScanLen = (config && config.maxScanLineLength) || 10000;\n    var maxScanLines = (config && config.maxScanLines) || 1000;\n\n    var stack = [];\n    var re = config && config.bracketRegex ? config.bracketRegex : /[(){}[\\]]/;\n    var lineEnd = dir > 0 ? Math.min(where.line + maxScanLines, cm.lastLine() + 1)\n                          : Math.max(cm.firstLine() - 1, where.line - maxScanLines);\n    for (var lineNo = where.line; lineNo != lineEnd; lineNo += dir) {\n      var line = cm.getLine(lineNo);\n      if (!line) continue;\n      var pos = dir > 0 ? 0 : line.length - 1, end = dir > 0 ? line.length : -1;\n      if (line.length > maxScanLen) continue;\n      if (lineNo == where.line) pos = where.ch - (dir < 0 ? 1 : 0);\n      for (; pos != end; pos += dir) {\n        var ch = line.charAt(pos);\n        if (re.test(ch) && (style === undefined || cm.getTokenTypeAt(Pos(lineNo, pos + 1)) == style)) {\n          var match = matching[ch];\n          if ((match.charAt(1) == \">\") == (dir > 0)) stack.push(ch);\n          else if (!stack.length) return {pos: Pos(lineNo, pos), ch: ch};\n          else stack.pop();\n        }\n      }\n    }\n    return lineNo - dir == (dir > 0 ? cm.lastLine() : cm.firstLine()) ? false : null;\n  }\n\n  function matchBrackets(cm, autoclear, config) {\n    // Disable brace matching in long lines, since it'll cause hugely slow updates\n    var maxHighlightLen = cm.state.matchBrackets.maxHighlightLineLength || 1000;\n    var marks = [], ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      var match = ranges[i].empty() && findMatchingBracket(cm, ranges[i].head, false, config);\n      if (match && cm.getLine(match.from.line).length <= maxHighlightLen) {\n        var style = match.match ? \"CodeMirror-matchingbracket\" : \"CodeMirror-nonmatchingbracket\";\n        marks.push(cm.markText(match.from, Pos(match.from.line, match.from.ch + 1), {className: style}));\n        if (match.to && cm.getLine(match.to.line).length <= maxHighlightLen)\n          marks.push(cm.markText(match.to, Pos(match.to.line, match.to.ch + 1), {className: style}));\n      }\n    }\n\n    if (marks.length) {\n      // Kludge to work around the IE bug from issue #1193, where text\n      // input stops going to the textare whever this fires.\n      if (ie_lt8 && cm.state.focused) cm.focus();\n\n      var clear = function() {\n        cm.operation(function() {\n          for (var i = 0; i < marks.length; i++) marks[i].clear();\n        });\n      };\n      if (autoclear) setTimeout(clear, 800);\n      else return clear;\n    }\n  }\n\n  var currentlyHighlighted = null;\n  function doMatchBrackets(cm) {\n    cm.operation(function() {\n      if (currentlyHighlighted) {currentlyHighlighted(); currentlyHighlighted = null;}\n      currentlyHighlighted = matchBrackets(cm, false, cm.state.matchBrackets);\n    });\n  }\n\n  CodeMirror.defineOption(\"matchBrackets\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init)\n      cm.off(\"cursorActivity\", doMatchBrackets);\n    if (val) {\n      cm.state.matchBrackets = typeof val == \"object\" ? val : {};\n      cm.on(\"cursorActivity\", doMatchBrackets);\n    }\n  });\n\n  CodeMirror.defineExtension(\"matchBrackets\", function() {matchBrackets(this, true);});\n  CodeMirror.defineExtension(\"findMatchingBracket\", function(pos, strict, config){\n    return findMatchingBracket(this, pos, strict, config);\n  });\n  CodeMirror.defineExtension(\"scanForBracket\", function(pos, dir, style, config){\n    return scanForBracket(this, pos, dir, style, config);\n  });\n});\n",
    "// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"fold\", \"brace\", function(cm, start) {\n  var line = start.line, lineText = cm.getLine(line);\n  var tokenType;\n\n  function findOpening(openCh) {\n    for (var at = start.ch, pass = 0;;) {\n      var found = at <= 0 ? -1 : lineText.lastIndexOf(openCh, at - 1);\n      if (found == -1) {\n        if (pass == 1) break;\n        pass = 1;\n        at = lineText.length;\n        continue;\n      }\n      if (pass == 1 && found < start.ch) break;\n      tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n      if (!/^(comment|string)/.test(tokenType)) return found + 1;\n      at = found - 1;\n    }\n  }\n\n  var startToken = \"{\", endToken = \"}\", startCh = findOpening(\"{\");\n  if (startCh == null) {\n    startToken = \"[\", endToken = \"]\";\n    startCh = findOpening(\"[\");\n  }\n\n  if (startCh == null) return;\n  var count = 1, lastLine = cm.lastLine(), end, endCh;\n  outer: for (var i = line; i <= lastLine; ++i) {\n    var text = cm.getLine(i), pos = i == line ? startCh : 0;\n    for (;;) {\n      var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n      if (nextOpen < 0) nextOpen = text.length;\n      if (nextClose < 0) nextClose = text.length;\n      pos = Math.min(nextOpen, nextClose);\n      if (pos == text.length) break;\n      if (cm.getTokenTypeAt(CodeMirror.Pos(i, pos + 1)) == tokenType) {\n        if (pos == nextOpen) ++count;\n        else if (!--count) { end = i; endCh = pos; break outer; }\n      }\n      ++pos;\n    }\n  }\n  if (end == null || line == end && endCh == startCh) return;\n  return {from: CodeMirror.Pos(line, startCh),\n          to: CodeMirror.Pos(end, endCh)};\n});\n\nCodeMirror.registerHelper(\"fold\", \"import\", function(cm, start) {\n  function hasImport(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type != \"keyword\" || start.string != \"import\") return null;\n    // Now find closing semicolon, return its position\n    for (var i = line, e = Math.min(cm.lastLine(), line + 10); i <= e; ++i) {\n      var text = cm.getLine(i), semi = text.indexOf(\";\");\n      if (semi != -1) return {startCh: start.end, end: CodeMirror.Pos(i, semi)};\n    }\n  }\n\n  var startLine = start.line, has = hasImport(startLine), prev;\n  if (!has || hasImport(startLine - 1) || ((prev = hasImport(startLine - 2)) && prev.end.line == startLine - 1))\n    return null;\n  for (var end = has.end;;) {\n    var next = hasImport(end.line + 1);\n    if (next == null) break;\n    end = next.end;\n  }\n  return {from: cm.clipPos(CodeMirror.Pos(startLine, has.startCh + 1)), to: end};\n});\n\nCodeMirror.registerHelper(\"fold\", \"include\", function(cm, start) {\n  function hasInclude(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type == \"meta\" && start.string.slice(0, 8) == \"#include\") return start.start + 8;\n  }\n\n  var startLine = start.line, has = hasInclude(startLine);\n  if (has == null || hasInclude(startLine - 1) != null) return null;\n  for (var end = startLine;;) {\n    var next = hasInclude(end + 1);\n    if (next == null) break;\n    ++end;\n  }\n  return {from: CodeMirror.Pos(startLine, has + 1),\n          to: cm.clipPos(CodeMirror.Pos(end))};\n});\n\n});\n",
    "// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function doFold(cm, pos, options, force) {\n    if (options && options.call) {\n      var finder = options;\n      options = null;\n    } else {\n      var finder = getOption(cm, options, \"rangeFinder\");\n    }\n    if (typeof pos == \"number\") pos = CodeMirror.Pos(pos, 0);\n    var minSize = getOption(cm, options, \"minFoldSize\");\n\n    function getRange(allowFolded) {\n      var range = finder(cm, pos);\n      if (!range || range.to.line - range.from.line < minSize) return null;\n      var marks = cm.findMarksAt(range.from);\n      for (var i = 0; i < marks.length; ++i) {\n        if (marks[i].__isFold && force !== \"fold\") {\n          if (!allowFolded) return null;\n          range.cleared = true;\n          marks[i].clear();\n        }\n      }\n      return range;\n    }\n\n    var range = getRange(true);\n    if (getOption(cm, options, \"scanUp\")) while (!range && pos.line > cm.firstLine()) {\n      pos = CodeMirror.Pos(pos.line - 1, 0);\n      range = getRange(false);\n    }\n    if (!range || range.cleared || force === \"unfold\") return;\n\n    var myWidget = makeWidget(cm, options);\n    CodeMirror.on(myWidget, \"mousedown\", function(e) {\n      myRange.clear();\n      CodeMirror.e_preventDefault(e);\n    });\n    var myRange = cm.markText(range.from, range.to, {\n      replacedWith: myWidget,\n      clearOnEnter: getOption(cm, options, \"clearOnEnter\"),\n      __isFold: true\n    });\n    myRange.on(\"clear\", function(from, to) {\n      CodeMirror.signal(cm, \"unfold\", cm, from, to);\n    });\n    CodeMirror.signal(cm, \"fold\", cm, range.from, range.to);\n  }\n\n  function makeWidget(cm, options) {\n    var widget = getOption(cm, options, \"widget\");\n    if (typeof widget == \"string\") {\n      var text = document.createTextNode(widget);\n      widget = document.createElement(\"span\");\n      widget.appendChild(text);\n      widget.className = \"CodeMirror-foldmarker\";\n    }\n    return widget;\n  }\n\n  // Clumsy backwards-compatible interface\n  CodeMirror.newFoldFunction = function(rangeFinder, widget) {\n    return function(cm, pos) { doFold(cm, pos, {rangeFinder: rangeFinder, widget: widget}); };\n  };\n\n  // New-style interface\n  CodeMirror.defineExtension(\"foldCode\", function(pos, options, force) {\n    doFold(this, pos, options, force);\n  });\n\n  CodeMirror.defineExtension(\"isFolded\", function(pos) {\n    var marks = this.findMarksAt(pos);\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold) return true;\n  });\n\n  CodeMirror.commands.toggleFold = function(cm) {\n    cm.foldCode(cm.getCursor());\n  };\n  CodeMirror.commands.fold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"fold\");\n  };\n  CodeMirror.commands.unfold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"unfold\");\n  };\n  CodeMirror.commands.foldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"fold\");\n    });\n  };\n  CodeMirror.commands.unfoldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"unfold\");\n    });\n  };\n\n  CodeMirror.registerHelper(\"fold\", \"combine\", function() {\n    var funcs = Array.prototype.slice.call(arguments, 0);\n    return function(cm, start) {\n      for (var i = 0; i < funcs.length; ++i) {\n        var found = funcs[i](cm, start);\n        if (found) return found;\n      }\n    };\n  });\n\n  CodeMirror.registerHelper(\"fold\", \"auto\", function(cm, start) {\n    var helpers = cm.getHelpers(start, \"fold\");\n    for (var i = 0; i < helpers.length; i++) {\n      var cur = helpers[i](cm, start);\n      if (cur) return cur;\n    }\n  });\n\n  var defaultOptions = {\n    rangeFinder: CodeMirror.fold.auto,\n    widget: \"\\u2194\",\n    minFoldSize: 0,\n    scanUp: false,\n    clearOnEnter: true\n  };\n\n  CodeMirror.defineOption(\"foldOptions\", null);\n\n  function getOption(cm, options, name) {\n    if (options && options[name] !== undefined)\n      return options[name];\n    var editorOptions = cm.options.foldOptions;\n    if (editorOptions && editorOptions[name] !== undefined)\n      return editorOptions[name];\n    return defaultOptions[name];\n  }\n\n  CodeMirror.defineExtension(\"foldOption\", function(options, name) {\n    return getOption(this, options, name);\n  });\n});\n",
    "// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})(), require(\"./foldcode\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./foldcode\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"foldGutter\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.clearGutter(cm.state.foldGutter.options.gutter);\n      cm.state.foldGutter = null;\n      cm.off(\"gutterClick\", onGutterClick);\n      cm.off(\"change\", onChange);\n      cm.off(\"viewportChange\", onViewportChange);\n      cm.off(\"fold\", onFold);\n      cm.off(\"unfold\", onFold);\n      cm.off(\"swapDoc\", onChange);\n    }\n    if (val) {\n      cm.state.foldGutter = new State(parseOptions(val));\n      updateInViewport(cm);\n      cm.on(\"gutterClick\", onGutterClick);\n      cm.on(\"change\", onChange);\n      cm.on(\"viewportChange\", onViewportChange);\n      cm.on(\"fold\", onFold);\n      cm.on(\"unfold\", onFold);\n      cm.on(\"swapDoc\", onChange);\n    }\n  });\n\n  var Pos = CodeMirror.Pos;\n\n  function State(options) {\n    this.options = options;\n    this.from = this.to = 0;\n  }\n\n  function parseOptions(opts) {\n    if (opts === true) opts = {};\n    if (opts.gutter == null) opts.gutter = \"CodeMirror-foldgutter\";\n    if (opts.indicatorOpen == null) opts.indicatorOpen = \"CodeMirror-foldgutter-open\";\n    if (opts.indicatorFolded == null) opts.indicatorFolded = \"CodeMirror-foldgutter-folded\";\n    return opts;\n  }\n\n  function isFolded(cm, line) {\n    var marks = cm.findMarks(Pos(line, 0), Pos(line + 1, 0));\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold && marks[i].find().from.line == line) return marks[i];\n  }\n\n  function marker(spec) {\n    if (typeof spec == \"string\") {\n      var elt = document.createElement(\"div\");\n      elt.className = spec + \" CodeMirror-guttermarker-subtle\";\n      return elt;\n    } else {\n      return spec.cloneNode(true);\n    }\n  }\n\n  function updateFoldInfo(cm, from, to) {\n    var opts = cm.state.foldGutter.options, cur = from;\n    var minSize = cm.foldOption(opts, \"minFoldSize\");\n    var func = cm.foldOption(opts, \"rangeFinder\");\n    cm.eachLine(from, to, function(line) {\n      var mark = null;\n      if (isFolded(cm, cur)) {\n        mark = marker(opts.indicatorFolded);\n      } else {\n        var pos = Pos(cur, 0);\n        var range = func && func(cm, pos);\n        if (range && range.to.line - range.from.line >= minSize)\n          mark = marker(opts.indicatorOpen);\n      }\n      cm.setGutterMarker(line, opts.gutter, mark);\n      ++cur;\n    });\n  }\n\n  function updateInViewport(cm) {\n    var vp = cm.getViewport(), state = cm.state.foldGutter;\n    if (!state) return;\n    cm.operation(function() {\n      updateFoldInfo(cm, vp.from, vp.to);\n    });\n    state.from = vp.from; state.to = vp.to;\n  }\n\n  function onGutterClick(cm, line, gutter) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    if (gutter != opts.gutter) return;\n    var folded = isFolded(cm, line);\n    if (folded) folded.clear();\n    else cm.foldCode(Pos(line, 0), opts.rangeFinder);\n  }\n\n  function onChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    state.from = state.to = 0;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() { updateInViewport(cm); }, opts.foldOnChangeTimeSpan || 600);\n  }\n\n  function onViewportChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() {\n      var vp = cm.getViewport();\n      if (state.from == state.to || vp.from - state.to > 20 || state.from - vp.to > 20) {\n        updateInViewport(cm);\n      } else {\n        cm.operation(function() {\n          if (vp.from < state.from) {\n            updateFoldInfo(cm, vp.from, state.from);\n            state.from = vp.from;\n          }\n          if (vp.to > state.to) {\n            updateFoldInfo(cm, state.to, vp.to);\n            state.to = vp.to;\n          }\n        });\n      }\n    }, opts.updateViewportTimeSpan || 400);\n  }\n\n  function onFold(cm, from) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var line = from.line;\n    if (line >= state.from && line < state.to)\n      updateFoldInfo(cm, line, line + 1);\n  }\n});\n",
    "// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var Pos = CodeMirror.Pos;\n  function cmp(a, b) { return a.line - b.line || a.ch - b.ch; }\n\n  var nameStartChar = \"A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\";\n  var nameChar = nameStartChar + \"\\-\\:\\.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\";\n  var xmlTagStart = new RegExp(\"<(/?)([\" + nameStartChar + \"][\" + nameChar + \"]*)\", \"g\");\n\n  function Iter(cm, line, ch, range) {\n    this.line = line; this.ch = ch;\n    this.cm = cm; this.text = cm.getLine(line);\n    this.min = range ? range.from : cm.firstLine();\n    this.max = range ? range.to - 1 : cm.lastLine();\n  }\n\n  function tagAt(iter, ch) {\n    var type = iter.cm.getTokenTypeAt(Pos(iter.line, ch));\n    return type && /\\btag\\b/.test(type);\n  }\n\n  function nextLine(iter) {\n    if (iter.line >= iter.max) return;\n    iter.ch = 0;\n    iter.text = iter.cm.getLine(++iter.line);\n    return true;\n  }\n  function prevLine(iter) {\n    if (iter.line <= iter.min) return;\n    iter.text = iter.cm.getLine(--iter.line);\n    iter.ch = iter.text.length;\n    return true;\n  }\n\n  function toTagEnd(iter) {\n    for (;;) {\n      var gt = iter.text.indexOf(\">\", iter.ch);\n      if (gt == -1) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt + 1; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n  function toTagStart(iter) {\n    for (;;) {\n      var lt = iter.ch ? iter.text.lastIndexOf(\"<\", iter.ch - 1) : -1;\n      if (lt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, lt + 1)) { iter.ch = lt; continue; }\n      xmlTagStart.lastIndex = lt;\n      iter.ch = lt;\n      var match = xmlTagStart.exec(iter.text);\n      if (match && match.index == lt) return match;\n    }\n  }\n\n  function toNextTag(iter) {\n    for (;;) {\n      xmlTagStart.lastIndex = iter.ch;\n      var found = xmlTagStart.exec(iter.text);\n      if (!found) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, found.index + 1)) { iter.ch = found.index + 1; continue; }\n      iter.ch = found.index + found[0].length;\n      return found;\n    }\n  }\n  function toPrevTag(iter) {\n    for (;;) {\n      var gt = iter.ch ? iter.text.lastIndexOf(\">\", iter.ch - 1) : -1;\n      if (gt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n\n  function findMatchingClose(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var next = toNextTag(iter), end, startLine = iter.line, startCh = iter.ch - (next ? next[0].length : 0);\n      if (!next || !(end = toTagEnd(iter))) return;\n      if (end == \"selfClose\") continue;\n      if (next[1]) { // closing tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == next[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == next[2])) return {\n          tag: next[2],\n          from: Pos(startLine, startCh),\n          to: Pos(iter.line, iter.ch)\n        };\n      } else { // opening tag\n        stack.push(next[2]);\n      }\n    }\n  }\n  function findMatchingOpen(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var prev = toPrevTag(iter);\n      if (!prev) return;\n      if (prev == \"selfClose\") { toTagStart(iter); continue; }\n      var endLine = iter.line, endCh = iter.ch;\n      var start = toTagStart(iter);\n      if (!start) return;\n      if (start[1]) { // closing tag\n        stack.push(start[2]);\n      } else { // opening tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == start[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == start[2])) return {\n          tag: start[2],\n          from: Pos(iter.line, iter.ch),\n          to: Pos(endLine, endCh)\n        };\n      }\n    }\n  }\n\n  CodeMirror.registerHelper(\"fold\", \"xml\", function(cm, start) {\n    var iter = new Iter(cm, start.line, 0);\n    for (;;) {\n      var openTag = toNextTag(iter), end;\n      if (!openTag || iter.line != start.line || !(end = toTagEnd(iter))) return;\n      if (!openTag[1] && end != \"selfClose\") {\n        var startPos = Pos(iter.line, iter.ch);\n        var endPos = findMatchingClose(iter, openTag[2]);\n        return endPos && {from: startPos, to: endPos.from};\n      }\n    }\n  });\n  CodeMirror.findMatchingTag = function(cm, pos, range) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    if (iter.text.indexOf(\">\") == -1 && iter.text.indexOf(\"<\") == -1) return;\n    var end = toTagEnd(iter), to = end && Pos(iter.line, iter.ch);\n    var start = end && toTagStart(iter);\n    if (!end || !start || cmp(iter, pos) > 0) return;\n    var here = {from: Pos(iter.line, iter.ch), to: to, tag: start[2]};\n    if (end == \"selfClose\") return {open: here, close: null, at: \"open\"};\n\n    if (start[1]) { // closing tag\n      return {open: findMatchingOpen(iter, start[2]), close: here, at: \"close\"};\n    } else { // opening tag\n      iter = new Iter(cm, to.line, to.ch, range);\n      return {open: here, close: findMatchingClose(iter, start[2]), at: \"open\"};\n    }\n  };\n\n  CodeMirror.findEnclosingTag = function(cm, pos, range) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    for (;;) {\n      var open = findMatchingOpen(iter);\n      if (!open) break;\n      var forward = new Iter(cm, pos.line, pos.ch, range);\n      var close = findMatchingClose(forward, open.tag);\n      if (close) return {open: open, close: close};\n    }\n  };\n\n  // Used by addon/edit/closetag.js\n  CodeMirror.scanForClosingTag = function(cm, pos, name, end) {\n    var iter = new Iter(cm, pos.line, pos.ch, end ? {from: 0, to: end} : null);\n    return findMatchingClose(iter, name);\n  };\n});\n",
    "// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var HINT_ELEMENT_CLASS        = \"CodeMirror-hint\";\n  var ACTIVE_HINT_ELEMENT_CLASS = \"CodeMirror-hint-active\";\n\n  // This is the old interface, kept around for now to stay\n  // backwards-compatible.\n  CodeMirror.showHint = function(cm, getHints, options) {\n    if (!getHints) return cm.showHint(options);\n    if (options && options.async) getHints.async = true;\n    var newOpts = {hint: getHints};\n    if (options) for (var prop in options) newOpts[prop] = options[prop];\n    return cm.showHint(newOpts);\n  };\n\n  CodeMirror.defineExtension(\"showHint\", function(options) {\n    options = parseOptions(this, this.getCursor(\"start\"), options);\n    var selections = this.listSelections()\n    if (selections.length > 1) return;\n    // By default, don't allow completion when something is selected.\n    // A hint function can have a `supportsSelection` property to\n    // indicate that it can handle selections.\n    if (this.somethingSelected()) {\n      if (!options.hint.supportsSelection) return;\n      // Don't try with cross-line selections\n      for (var i = 0; i < selections.length; i++)\n        if (selections[i].head.line != selections[i].anchor.line) return;\n    }\n\n    if (this.state.completionActive) this.state.completionActive.close();\n    var completion = this.state.completionActive = new Completion(this, options);\n    if (!completion.options.hint) return;\n\n    CodeMirror.signal(this, \"startCompletion\", this);\n    completion.update(true);\n  });\n\n  function Completion(cm, options) {\n    this.cm = cm;\n    this.options = options;\n    this.widget = null;\n    this.debounce = 0;\n    this.tick = 0;\n    this.startPos = this.cm.getCursor(\"start\");\n    this.startLen = this.cm.getLine(this.startPos.line).length - this.cm.getSelection().length;\n\n    var self = this;\n    cm.on(\"cursorActivity\", this.activityFunc = function() { self.cursorActivity(); });\n  }\n\n  var requestAnimationFrame = window.requestAnimationFrame || function(fn) {\n    return setTimeout(fn, 1000/60);\n  };\n  var cancelAnimationFrame = window.cancelAnimationFrame || clearTimeout;\n\n  Completion.prototype = {\n    close: function() {\n      if (!this.active()) return;\n      this.cm.state.completionActive = null;\n      this.tick = null;\n      this.cm.off(\"cursorActivity\", this.activityFunc);\n\n      if (this.widget && this.data) CodeMirror.signal(this.data, \"close\");\n      if (this.widget) this.widget.close();\n      CodeMirror.signal(this.cm, \"endCompletion\", this.cm);\n    },\n\n    active: function() {\n      return this.cm.state.completionActive == this;\n    },\n\n    pick: function(data, i) {\n      var completion = data.list[i];\n      if (completion.hint) completion.hint(this.cm, data, completion);\n      else this.cm.replaceRange(getText(completion), completion.from || data.from,\n                                completion.to || data.to, \"complete\");\n      CodeMirror.signal(data, \"pick\", completion);\n      this.close();\n    },\n\n    cursorActivity: function() {\n      if (this.debounce) {\n        cancelAnimationFrame(this.debounce);\n        this.debounce = 0;\n      }\n\n      var pos = this.cm.getCursor(), line = this.cm.getLine(pos.line);\n      if (pos.line != this.startPos.line || line.length - pos.ch != this.startLen - this.startPos.ch ||\n          pos.ch < this.startPos.ch || this.cm.somethingSelected() ||\n          (pos.ch && this.options.closeCharacters.test(line.charAt(pos.ch - 1)))) {\n        this.close();\n      } else {\n        var self = this;\n        this.debounce = requestAnimationFrame(function() {self.update();});\n        if (this.widget) this.widget.disable();\n      }\n    },\n\n    update: function(first) {\n      if (this.tick == null) return\n      var self = this, myTick = ++this.tick\n      fetchHints(this.options.hint, this.cm, this.options, function(data) {\n        if (self.tick == myTick) self.finishUpdate(data, first)\n      })\n    },\n\n    finishUpdate: function(data, first) {\n      if (this.data) CodeMirror.signal(this.data, \"update\");\n\n      var picked = (this.widget && this.widget.picked) || (first && this.options.completeSingle);\n      if (this.widget) this.widget.close();\n\n      if (data && this.data && isNewCompletion(this.data, data)) return;\n      this.data = data;\n\n      if (data && data.list.length) {\n        if (picked && data.list.length == 1) {\n          this.pick(data, 0);\n        } else {\n          this.widget = new Widget(this, data);\n          CodeMirror.signal(data, \"shown\");\n        }\n      }\n    }\n  };\n\n  function isNewCompletion(old, nw) {\n    var moved = CodeMirror.cmpPos(nw.from, old.from)\n    return moved > 0 && old.to.ch - old.from.ch != nw.to.ch - nw.from.ch\n  }\n\n  function parseOptions(cm, pos, options) {\n    var editor = cm.options.hintOptions;\n    var out = {};\n    for (var prop in defaultOptions) out[prop] = defaultOptions[prop];\n    if (editor) for (var prop in editor)\n      if (editor[prop] !== undefined) out[prop] = editor[prop];\n    if (options) for (var prop in options)\n      if (options[prop] !== undefined) out[prop] = options[prop];\n    if (out.hint.resolve) out.hint = out.hint.resolve(cm, pos)\n    return out;\n  }\n\n  function getText(completion) {\n    if (typeof completion == \"string\") return completion;\n    else return completion.text;\n  }\n\n  function buildKeyMap(completion, handle) {\n    var baseMap = {\n      Up: function() {handle.moveFocus(-1);},\n      Down: function() {handle.moveFocus(1);},\n      PageUp: function() {handle.moveFocus(-handle.menuSize() + 1, true);},\n      PageDown: function() {handle.moveFocus(handle.menuSize() - 1, true);},\n      Home: function() {handle.setFocus(0);},\n      End: function() {handle.setFocus(handle.length - 1);},\n      Enter: handle.pick,\n      Tab: handle.pick,\n      Esc: handle.close\n    };\n    var custom = completion.options.customKeys;\n    var ourMap = custom ? {} : baseMap;\n    function addBinding(key, val) {\n      var bound;\n      if (typeof val != \"string\")\n        bound = function(cm) { return val(cm, handle); };\n      // This mechanism is deprecated\n      else if (baseMap.hasOwnProperty(val))\n        bound = baseMap[val];\n      else\n        bound = val;\n      ourMap[key] = bound;\n    }\n    if (custom)\n      for (var key in custom) if (custom.hasOwnProperty(key))\n        addBinding(key, custom[key]);\n    var extra = completion.options.extraKeys;\n    if (extra)\n      for (var key in extra) if (extra.hasOwnProperty(key))\n        addBinding(key, extra[key]);\n    return ourMap;\n  }\n\n  function getHintElement(hintsElement, el) {\n    while (el && el != hintsElement) {\n      if (el.nodeName.toUpperCase() === \"LI\" && el.parentNode == hintsElement) return el;\n      el = el.parentNode;\n    }\n  }\n\n  function Widget(completion, data) {\n    this.completion = completion;\n    this.data = data;\n    this.picked = false;\n    var widget = this, cm = completion.cm;\n\n    var hints = this.hints = document.createElement(\"ul\");\n    hints.className = \"CodeMirror-hints\";\n    this.selectedHint = data.selectedHint || 0;\n\n    var completions = data.list;\n    for (var i = 0; i < completions.length; ++i) {\n      var elt = hints.appendChild(document.createElement(\"li\")), cur = completions[i];\n      var className = HINT_ELEMENT_CLASS + (i != this.selectedHint ? \"\" : \" \" + ACTIVE_HINT_ELEMENT_CLASS);\n      if (cur.className != null) className = cur.className + \" \" + className;\n      elt.className = className;\n      if (cur.render) cur.render(elt, data, cur);\n      else elt.appendChild(document.createTextNode(cur.displayText || getText(cur)));\n      elt.hintId = i;\n    }\n\n    var pos = cm.cursorCoords(completion.options.alignWithWord ? data.from : null);\n    var left = pos.left, top = pos.bottom, below = true;\n    hints.style.left = left + \"px\";\n    hints.style.top = top + \"px\";\n    // If we're at the edge of the screen, then we want the menu to appear on the left of the cursor.\n    var winW = window.innerWidth || Math.max(document.body.offsetWidth, document.documentElement.offsetWidth);\n    var winH = window.innerHeight || Math.max(document.body.offsetHeight, document.documentElement.offsetHeight);\n    (completion.options.container || document.body).appendChild(hints);\n    var box = hints.getBoundingClientRect(), overlapY = box.bottom - winH;\n    var scrolls = hints.scrollHeight > hints.clientHeight + 1\n    var startScroll = cm.getScrollInfo();\n\n    if (overlapY > 0) {\n      var height = box.bottom - box.top, curTop = pos.top - (pos.bottom - box.top);\n      if (curTop - height > 0) { // Fits above cursor\n        hints.style.top = (top = pos.top - height) + \"px\";\n        below = false;\n      } else if (height > winH) {\n        hints.style.height = (winH - 5) + \"px\";\n        hints.style.top = (top = pos.bottom - box.top) + \"px\";\n        var cursor = cm.getCursor();\n        if (data.from.ch != cursor.ch) {\n          pos = cm.cursorCoords(cursor);\n          hints.style.left = (left = pos.left) + \"px\";\n          box = hints.getBoundingClientRect();\n        }\n      }\n    }\n    var overlapX = box.right - winW;\n    if (overlapX > 0) {\n      if (box.right - box.left > winW) {\n        hints.style.width = (winW - 5) + \"px\";\n        overlapX -= (box.right - box.left) - winW;\n      }\n      hints.style.left = (left = pos.left - overlapX) + \"px\";\n    }\n    if (scrolls) for (var node = hints.firstChild; node; node = node.nextSibling)\n      node.style.paddingRight = cm.display.nativeBarWidth + \"px\"\n\n    cm.addKeyMap(this.keyMap = buildKeyMap(completion, {\n      moveFocus: function(n, avoidWrap) { widget.changeActive(widget.selectedHint + n, avoidWrap); },\n      setFocus: function(n) { widget.changeActive(n); },\n      menuSize: function() { return widget.screenAmount(); },\n      length: completions.length,\n      close: function() { completion.close(); },\n      pick: function() { widget.pick(); },\n      data: data\n    }));\n\n    if (completion.options.closeOnUnfocus) {\n      var closingOnBlur;\n      cm.on(\"blur\", this.onBlur = function() { closingOnBlur = setTimeout(function() { completion.close(); }, 100); });\n      cm.on(\"focus\", this.onFocus = function() { clearTimeout(closingOnBlur); });\n    }\n\n    cm.on(\"scroll\", this.onScroll = function() {\n      var curScroll = cm.getScrollInfo(), editor = cm.getWrapperElement().getBoundingClientRect();\n      var newTop = top + startScroll.top - curScroll.top;\n      var point = newTop - (window.pageYOffset || (document.documentElement || document.body).scrollTop);\n      if (!below) point += hints.offsetHeight;\n      if (point <= editor.top || point >= editor.bottom) return completion.close();\n      hints.style.top = newTop + \"px\";\n      hints.style.left = (left + startScroll.left - curScroll.left) + \"px\";\n    });\n\n    CodeMirror.on(hints, \"dblclick\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {widget.changeActive(t.hintId); widget.pick();}\n    });\n\n    CodeMirror.on(hints, \"click\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {\n        widget.changeActive(t.hintId);\n        if (completion.options.completeOnSingleClick) widget.pick();\n      }\n    });\n\n    CodeMirror.on(hints, \"mousedown\", function() {\n      setTimeout(function(){cm.focus();}, 20);\n    });\n\n    CodeMirror.signal(data, \"select\", completions[0], hints.firstChild);\n    return true;\n  }\n\n  Widget.prototype = {\n    close: function() {\n      if (this.completion.widget != this) return;\n      this.completion.widget = null;\n      this.hints.parentNode.removeChild(this.hints);\n      this.completion.cm.removeKeyMap(this.keyMap);\n\n      var cm = this.completion.cm;\n      if (this.completion.options.closeOnUnfocus) {\n        cm.off(\"blur\", this.onBlur);\n        cm.off(\"focus\", this.onFocus);\n      }\n      cm.off(\"scroll\", this.onScroll);\n    },\n\n    disable: function() {\n      this.completion.cm.removeKeyMap(this.keyMap);\n      var widget = this;\n      this.keyMap = {Enter: function() { widget.picked = true; }};\n      this.completion.cm.addKeyMap(this.keyMap);\n    },\n\n    pick: function() {\n      this.completion.pick(this.data, this.selectedHint);\n    },\n\n    changeActive: function(i, avoidWrap) {\n      if (i >= this.data.list.length)\n        i = avoidWrap ? this.data.list.length - 1 : 0;\n      else if (i < 0)\n        i = avoidWrap ? 0  : this.data.list.length - 1;\n      if (this.selectedHint == i) return;\n      var node = this.hints.childNodes[this.selectedHint];\n      node.className = node.className.replace(\" \" + ACTIVE_HINT_ELEMENT_CLASS, \"\");\n      node = this.hints.childNodes[this.selectedHint = i];\n      node.className += \" \" + ACTIVE_HINT_ELEMENT_CLASS;\n      if (node.offsetTop < this.hints.scrollTop)\n        this.hints.scrollTop = node.offsetTop - 3;\n      else if (node.offsetTop + node.offsetHeight > this.hints.scrollTop + this.hints.clientHeight)\n        this.hints.scrollTop = node.offsetTop + node.offsetHeight - this.hints.clientHeight + 3;\n      CodeMirror.signal(this.data, \"select\", this.data.list[this.selectedHint], node);\n    },\n\n    screenAmount: function() {\n      return Math.floor(this.hints.clientHeight / this.hints.firstChild.offsetHeight) || 1;\n    }\n  };\n\n  function applicableHelpers(cm, helpers) {\n    if (!cm.somethingSelected()) return helpers\n    var result = []\n    for (var i = 0; i < helpers.length; i++)\n      if (helpers[i].supportsSelection) result.push(helpers[i])\n    return result\n  }\n\n  function fetchHints(hint, cm, options, callback) {\n    if (hint.async) {\n      hint(cm, callback, options)\n    } else {\n      var result = hint(cm, options)\n      if (result && result.then) result.then(callback)\n      else callback(result)\n    }\n  }\n\n  function resolveAutoHints(cm, pos) {\n    var helpers = cm.getHelpers(pos, \"hint\"), words\n    if (helpers.length) {\n      var resolved = function(cm, callback, options) {\n        var app = applicableHelpers(cm, helpers);\n        function run(i) {\n          if (i == app.length) return callback(null)\n          fetchHints(app[i], cm, options, function(result) {\n            if (result && result.list.length > 0) callback(result)\n            else run(i + 1)\n          })\n        }\n        run(0)\n      }\n      resolved.async = true\n      resolved.supportsSelection = true\n      return resolved\n    } else if (words = cm.getHelper(cm.getCursor(), \"hintWords\")) {\n      return function(cm) { return CodeMirror.hint.fromList(cm, {words: words}) }\n    } else if (CodeMirror.hint.anyword) {\n      return function(cm, options) { return CodeMirror.hint.anyword(cm, options) }\n    } else {\n      return function() {}\n    }\n  }\n\n  CodeMirror.registerHelper(\"hint\", \"auto\", {\n    resolve: resolveAutoHints\n  });\n\n  CodeMirror.registerHelper(\"hint\", \"fromList\", function(cm, options) {\n    var cur = cm.getCursor(), token = cm.getTokenAt(cur);\n    var to = CodeMirror.Pos(cur.line, token.end);\n    if (token.string && /\\w/.test(token.string[token.string.length - 1])) {\n      var term = token.string, from = CodeMirror.Pos(cur.line, token.start);\n    } else {\n      var term = \"\", from = to;\n    }\n    var found = [];\n    for (var i = 0; i < options.words.length; i++) {\n      var word = options.words[i];\n      if (word.slice(0, term.length) == term)\n        found.push(word);\n    }\n\n    if (found.length) return {list: found, from: from, to: to};\n  });\n\n  CodeMirror.commands.autocomplete = CodeMirror.showHint;\n\n  var defaultOptions = {\n    hint: CodeMirror.hint.auto,\n    completeSingle: true,\n    alignWithWord: true,\n    closeCharacters: /[\\s()\\[\\]{};:>,]/,\n    closeOnUnfocus: true,\n    completeOnSingleClick: true,\n    container: null,\n    customKeys: null,\n    extraKeys: null\n  };\n\n  CodeMirror.defineOption(\"hintOptions\", null);\n});\n",
    "// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.runMode = function(string, modespec, callback, options) {\n  var mode = CodeMirror.getMode(CodeMirror.defaults, modespec);\n  var ie = /MSIE \\d/.test(navigator.userAgent);\n  var ie_lt9 = ie && (document.documentMode == null || document.documentMode < 9);\n\n  if (callback.appendChild) {\n    var tabSize = (options && options.tabSize) || CodeMirror.defaults.tabSize;\n    var node = callback, col = 0;\n    node.innerHTML = \"\";\n    callback = function(text, style) {\n      if (text == \"\\n\") {\n        // Emitting LF or CRLF on IE8 or earlier results in an incorrect display.\n        // Emitting a carriage return makes everything ok.\n        node.appendChild(document.createTextNode(ie_lt9 ? '\\r' : text));\n        col = 0;\n        return;\n      }\n      var content = \"\";\n      // replace tabs\n      for (var pos = 0;;) {\n        var idx = text.indexOf(\"\\t\", pos);\n        if (idx == -1) {\n          content += text.slice(pos);\n          col += text.length - pos;\n          break;\n        } else {\n          col += idx - pos;\n          content += text.slice(pos, idx);\n          var size = tabSize - col % tabSize;\n          col += size;\n          for (var i = 0; i < size; ++i) content += \" \";\n          pos = idx + 1;\n        }\n      }\n\n      if (style) {\n        var sp = node.appendChild(document.createElement(\"span\"));\n        sp.className = \"cm-\" + style.replace(/ +/g, \" cm-\");\n        sp.appendChild(document.createTextNode(content));\n      } else {\n        node.appendChild(document.createTextNode(content));\n      }\n    };\n  }\n\n  var lines = CodeMirror.splitLines(string), state = (options && options.state) || CodeMirror.startState(mode);\n  for (var i = 0, e = lines.length; i < e; ++i) {\n    if (i) callback(\"\\n\");\n    var stream = new CodeMirror.StringStream(lines[i]);\n    if (!stream.string && mode.blankLine) mode.blankLine(state);\n    while (!stream.eol()) {\n      var style = mode.token(stream, state);\n      callback(stream.current(), style, i, stream.start, state);\n      stream.start = stream.pos;\n    }\n  }\n};\n\n});\n",
    "// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n  var Pos = CodeMirror.Pos;\n\n  function SearchCursor(doc, query, pos, caseFold) {\n    this.atOccurrence = false; this.doc = doc;\n    if (caseFold == null && typeof query == \"string\") caseFold = false;\n\n    pos = pos ? doc.clipPos(pos) : Pos(0, 0);\n    this.pos = {from: pos, to: pos};\n\n    // The matches method is filled in based on the type of query.\n    // It takes a position and a direction, and returns an object\n    // describing the next occurrence of the query, or null if no\n    // more matches were found.\n    if (typeof query != \"string\") { // Regexp match\n      if (!query.global) query = new RegExp(query.source, query.ignoreCase ? \"ig\" : \"g\");\n      this.matches = function(reverse, pos) {\n        if (reverse) {\n          query.lastIndex = 0;\n          var line = doc.getLine(pos.line).slice(0, pos.ch), cutOff = 0, match, start;\n          for (;;) {\n            query.lastIndex = cutOff;\n            var newMatch = query.exec(line);\n            if (!newMatch) break;\n            match = newMatch;\n            start = match.index;\n            cutOff = match.index + (match[0].length || 1);\n            if (cutOff == line.length) break;\n          }\n          var matchLen = (match && match[0].length) || 0;\n          if (!matchLen) {\n            if (start == 0 && line.length == 0) {match = undefined;}\n            else if (start != doc.getLine(pos.line).length) {\n              matchLen++;\n            }\n          }\n        } else {\n          query.lastIndex = pos.ch;\n          var line = doc.getLine(pos.line), match = query.exec(line);\n          var matchLen = (match && match[0].length) || 0;\n          var start = match && match.index;\n          if (start + matchLen != line.length && !matchLen) matchLen = 1;\n        }\n        if (match && matchLen)\n          return {from: Pos(pos.line, start),\n                  to: Pos(pos.line, start + matchLen),\n                  match: match};\n      };\n    } else { // String query\n      var origQuery = query;\n      if (caseFold) query = query.toLowerCase();\n      var fold = caseFold ? function(str){return str.toLowerCase();} : function(str){return str;};\n      var target = query.split(\"\\n\");\n      // Different methods for single-line and multi-line queries\n      if (target.length == 1) {\n        if (!query.length) {\n          // Empty string would match anything and never progress, so\n          // we define it to match nothing instead.\n          this.matches = function() {};\n        } else {\n          this.matches = function(reverse, pos) {\n            if (reverse) {\n              var orig = doc.getLine(pos.line).slice(0, pos.ch), line = fold(orig);\n              var match = line.lastIndexOf(query);\n              if (match > -1) {\n                match = adjustPos(orig, line, match);\n                return {from: Pos(pos.line, match), to: Pos(pos.line, match + origQuery.length)};\n              }\n             } else {\n               var orig = doc.getLine(pos.line).slice(pos.ch), line = fold(orig);\n               var match = line.indexOf(query);\n               if (match > -1) {\n                 match = adjustPos(orig, line, match) + pos.ch;\n                 return {from: Pos(pos.line, match), to: Pos(pos.line, match + origQuery.length)};\n               }\n            }\n          };\n        }\n      } else {\n        var origTarget = origQuery.split(\"\\n\");\n        this.matches = function(reverse, pos) {\n          var last = target.length - 1;\n          if (reverse) {\n            if (pos.line - (target.length - 1) < doc.firstLine()) return;\n            if (fold(doc.getLine(pos.line).slice(0, origTarget[last].length)) != target[target.length - 1]) return;\n            var to = Pos(pos.line, origTarget[last].length);\n            for (var ln = pos.line - 1, i = last - 1; i >= 1; --i, --ln)\n              if (target[i] != fold(doc.getLine(ln))) return;\n            var line = doc.getLine(ln), cut = line.length - origTarget[0].length;\n            if (fold(line.slice(cut)) != target[0]) return;\n            return {from: Pos(ln, cut), to: to};\n          } else {\n            if (pos.line + (target.length - 1) > doc.lastLine()) return;\n            var line = doc.getLine(pos.line), cut = line.length - origTarget[0].length;\n            if (fold(line.slice(cut)) != target[0]) return;\n            var from = Pos(pos.line, cut);\n            for (var ln = pos.line + 1, i = 1; i < last; ++i, ++ln)\n              if (target[i] != fold(doc.getLine(ln))) return;\n            if (fold(doc.getLine(ln).slice(0, origTarget[last].length)) != target[last]) return;\n            return {from: from, to: Pos(ln, origTarget[last].length)};\n          }\n        };\n      }\n    }\n  }\n\n  SearchCursor.prototype = {\n    findNext: function() {return this.find(false);},\n    findPrevious: function() {return this.find(true);},\n\n    find: function(reverse) {\n      var self = this, pos = this.doc.clipPos(reverse ? this.pos.from : this.pos.to);\n      function savePosAndFail(line) {\n        var pos = Pos(line, 0);\n        self.pos = {from: pos, to: pos};\n        self.atOccurrence = false;\n        return false;\n      }\n\n      for (;;) {\n        if (this.pos = this.matches(reverse, pos)) {\n          this.atOccurrence = true;\n          return this.pos.match || true;\n        }\n        if (reverse) {\n          if (!pos.line) return savePosAndFail(0);\n          pos = Pos(pos.line-1, this.doc.getLine(pos.line-1).length);\n        }\n        else {\n          var maxLine = this.doc.lineCount();\n          if (pos.line == maxLine - 1) return savePosAndFail(maxLine);\n          pos = Pos(pos.line + 1, 0);\n        }\n      }\n    },\n\n    from: function() {if (this.atOccurrence) return this.pos.from;},\n    to: function() {if (this.atOccurrence) return this.pos.to;},\n\n    replace: function(newText, origin) {\n      if (!this.atOccurrence) return;\n      var lines = CodeMirror.splitLines(newText);\n      this.doc.replaceRange(lines, this.pos.from, this.pos.to, origin);\n      this.pos.to = Pos(this.pos.from.line + lines.length - 1,\n                        lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0));\n    }\n  };\n\n  // Maps a position in a case-folded line back to a position in the original line\n  // (compensating for codepoints increasing in number during folding)\n  function adjustPos(orig, folded, pos) {\n    if (orig.length == folded.length) return pos;\n    for (var pos1 = Math.min(pos, orig.length);;) {\n      var len1 = orig.slice(0, pos1).toLowerCase().length;\n      if (len1 < pos) ++pos1;\n      else if (len1 > pos) --pos1;\n      else return pos1;\n    }\n  }\n\n  CodeMirror.defineExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this.doc, query, pos, caseFold);\n  });\n  CodeMirror.defineDocExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this, query, pos, caseFold);\n  });\n\n  CodeMirror.defineExtension(\"selectMatches\", function(query, caseFold) {\n    var ranges = [];\n    var cur = this.getSearchCursor(query, this.getCursor(\"from\"), caseFold);\n    while (cur.findNext()) {\n      if (CodeMirror.cmpPos(cur.to(), this.getCursor(\"to\")) > 0) break;\n      ranges.push({anchor: cur.from(), head: cur.to()});\n    }\n    if (ranges.length)\n      this.setSelections(ranges, 0);\n  });\n});\n",
    "\"use strict\"\n// Module export pattern from\n// https://github.com/umdjs/umd/blob/master/returnExports.js\n;(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([], factory);\n    } else if (typeof exports === 'object') {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory();\n    } else {\n        // Browser globals (root is window)\n        root.store = factory();\n  }\n}(this, function () {\n\t\n\t// Store.js\n\tvar store = {},\n\t\twin = (typeof window != 'undefined' ? window : global),\n\t\tdoc = win.document,\n\t\tlocalStorageName = 'localStorage',\n\t\tscriptTag = 'script',\n\t\tstorage\n\n\tstore.disabled = false\n\tstore.version = '1.3.20'\n\tstore.set = function(key, value) {}\n\tstore.get = function(key, defaultVal) {}\n\tstore.has = function(key) { return store.get(key) !== undefined }\n\tstore.remove = function(key) {}\n\tstore.clear = function() {}\n\tstore.transact = function(key, defaultVal, transactionFn) {\n\t\tif (transactionFn == null) {\n\t\t\ttransactionFn = defaultVal\n\t\t\tdefaultVal = null\n\t\t}\n\t\tif (defaultVal == null) {\n\t\t\tdefaultVal = {}\n\t\t}\n\t\tvar val = store.get(key, defaultVal)\n\t\ttransactionFn(val)\n\t\tstore.set(key, val)\n\t}\n\tstore.getAll = function() {}\n\tstore.forEach = function() {}\n\n\tstore.serialize = function(value) {\n\t\treturn JSON.stringify(value)\n\t}\n\tstore.deserialize = function(value) {\n\t\tif (typeof value != 'string') { return undefined }\n\t\ttry { return JSON.parse(value) }\n\t\tcatch(e) { return value || undefined }\n\t}\n\n\t// Functions to encapsulate questionable FireFox 3.6.13 behavior\n\t// when about.config::dom.storage.enabled === false\n\t// See https://github.com/marcuswestin/store.js/issues#issue/13\n\tfunction isLocalStorageNameSupported() {\n\t\ttry { return (localStorageName in win && win[localStorageName]) }\n\t\tcatch(err) { return false }\n\t}\n\n\tif (isLocalStorageNameSupported()) {\n\t\tstorage = win[localStorageName]\n\t\tstore.set = function(key, val) {\n\t\t\tif (val === undefined) { return store.remove(key) }\n\t\t\tstorage.setItem(key, store.serialize(val))\n\t\t\treturn val\n\t\t}\n\t\tstore.get = function(key, defaultVal) {\n\t\t\tvar val = store.deserialize(storage.getItem(key))\n\t\t\treturn (val === undefined ? defaultVal : val)\n\t\t}\n\t\tstore.remove = function(key) { storage.removeItem(key) }\n\t\tstore.clear = function() { storage.clear() }\n\t\tstore.getAll = function() {\n\t\t\tvar ret = {}\n\t\t\tstore.forEach(function(key, val) {\n\t\t\t\tret[key] = val\n\t\t\t})\n\t\t\treturn ret\n\t\t}\n\t\tstore.forEach = function(callback) {\n\t\t\tfor (var i=0; i<storage.length; i++) {\n\t\t\t\tvar key = storage.key(i)\n\t\t\t\tcallback(key, store.get(key))\n\t\t\t}\n\t\t}\n\t} else if (doc && doc.documentElement.addBehavior) {\n\t\tvar storageOwner,\n\t\t\tstorageContainer\n\t\t// Since #userData storage applies only to specific paths, we need to\n\t\t// somehow link our data to a specific path.  We choose /favicon.ico\n\t\t// as a pretty safe option, since all browsers already make a request to\n\t\t// this URL anyway and being a 404 will not hurt us here.  We wrap an\n\t\t// iframe pointing to the favicon in an ActiveXObject(htmlfile) object\n\t\t// (see: http://msdn.microsoft.com/en-us/library/aa752574(v=VS.85).aspx)\n\t\t// since the iframe access rules appear to allow direct access and\n\t\t// manipulation of the document element, even for a 404 page.  This\n\t\t// document can be used instead of the current document (which would\n\t\t// have been limited to the current path) to perform #userData storage.\n\t\ttry {\n\t\t\tstorageContainer = new ActiveXObject('htmlfile')\n\t\t\tstorageContainer.open()\n\t\t\tstorageContainer.write('<'+scriptTag+'>document.w=window</'+scriptTag+'><iframe src=\"/favicon.ico\"></iframe>')\n\t\t\tstorageContainer.close()\n\t\t\tstorageOwner = storageContainer.w.frames[0].document\n\t\t\tstorage = storageOwner.createElement('div')\n\t\t} catch(e) {\n\t\t\t// somehow ActiveXObject instantiation failed (perhaps some special\n\t\t\t// security settings or otherwse), fall back to per-path storage\n\t\t\tstorage = doc.createElement('div')\n\t\t\tstorageOwner = doc.body\n\t\t}\n\t\tvar withIEStorage = function(storeFunction) {\n\t\t\treturn function() {\n\t\t\t\tvar args = Array.prototype.slice.call(arguments, 0)\n\t\t\t\targs.unshift(storage)\n\t\t\t\t// See http://msdn.microsoft.com/en-us/library/ms531081(v=VS.85).aspx\n\t\t\t\t// and http://msdn.microsoft.com/en-us/library/ms531424(v=VS.85).aspx\n\t\t\t\tstorageOwner.appendChild(storage)\n\t\t\t\tstorage.addBehavior('#default#userData')\n\t\t\t\tstorage.load(localStorageName)\n\t\t\t\tvar result = storeFunction.apply(store, args)\n\t\t\t\tstorageOwner.removeChild(storage)\n\t\t\t\treturn result\n\t\t\t}\n\t\t}\n\n\t\t// In IE7, keys cannot start with a digit or contain certain chars.\n\t\t// See https://github.com/marcuswestin/store.js/issues/40\n\t\t// See https://github.com/marcuswestin/store.js/issues/83\n\t\tvar forbiddenCharsRegex = new RegExp(\"[!\\\"#$%&'()*+,/\\\\\\\\:;<=>?@[\\\\]^`{|}~]\", \"g\")\n\t\tvar ieKeyFix = function(key) {\n\t\t\treturn key.replace(/^d/, '___$&').replace(forbiddenCharsRegex, '___')\n\t\t}\n\t\tstore.set = withIEStorage(function(storage, key, val) {\n\t\t\tkey = ieKeyFix(key)\n\t\t\tif (val === undefined) { return store.remove(key) }\n\t\t\tstorage.setAttribute(key, store.serialize(val))\n\t\t\tstorage.save(localStorageName)\n\t\t\treturn val\n\t\t})\n\t\tstore.get = withIEStorage(function(storage, key, defaultVal) {\n\t\t\tkey = ieKeyFix(key)\n\t\t\tvar val = store.deserialize(storage.getAttribute(key))\n\t\t\treturn (val === undefined ? defaultVal : val)\n\t\t})\n\t\tstore.remove = withIEStorage(function(storage, key) {\n\t\t\tkey = ieKeyFix(key)\n\t\t\tstorage.removeAttribute(key)\n\t\t\tstorage.save(localStorageName)\n\t\t})\n\t\tstore.clear = withIEStorage(function(storage) {\n\t\t\tvar attributes = storage.XMLDocument.documentElement.attributes\n\t\t\tstorage.load(localStorageName)\n\t\t\tfor (var i=attributes.length-1; i>=0; i--) {\n\t\t\t\tstorage.removeAttribute(attributes[i].name)\n\t\t\t}\n\t\t\tstorage.save(localStorageName)\n\t\t})\n\t\tstore.getAll = function(storage) {\n\t\t\tvar ret = {}\n\t\t\tstore.forEach(function(key, val) {\n\t\t\t\tret[key] = val\n\t\t\t})\n\t\t\treturn ret\n\t\t}\n\t\tstore.forEach = withIEStorage(function(storage, callback) {\n\t\t\tvar attributes = storage.XMLDocument.documentElement.attributes\n\t\t\tfor (var i=0, attr; attr=attributes[i]; ++i) {\n\t\t\t\tcallback(attr.name, store.deserialize(storage.getAttribute(attr.name)))\n\t\t\t}\n\t\t})\n\t}\n\n\ttry {\n\t\tvar testKey = '__storejs__'\n\t\tstore.set(testKey, testKey)\n\t\tif (store.get(testKey) != testKey) { store.disabled = true }\n\t\tstore.remove(testKey)\n\t} catch(e) {\n\t\tstore.disabled = true\n\t}\n\tstore.enabled = !store.disabled\n\t\n\treturn store\n}));\n",
    "module.exports={\n  \"_args\": [\n    [\n      {\n        \"raw\": \"yasgui-utils@^1.4.1\",\n        \"scope\": null,\n        \"escapedName\": \"yasgui-utils\",\n        \"name\": \"yasgui-utils\",\n        \"rawSpec\": \"^1.4.1\",\n        \"spec\": \">=1.4.1 <2.0.0\",\n        \"type\": \"range\"\n      },\n      \"E:\\\\GraphDB\\\\project\\\\YASQE-Ontotext\\\\yasqe-ontotext\"\n    ]\n  ],\n  \"_from\": \"yasgui-utils@>=1.4.1 <2.0.0\",\n  \"_id\": \"yasgui-utils@1.6.0\",\n  \"_inCache\": true,\n  \"_installable\": true,\n  \"_location\": \"/yasgui-utils\",\n  \"_npmUser\": {\n    \"name\": \"laurens.rietveld\",\n    \"email\": \"laurens.rietveld@gmail.com\"\n  },\n  \"_npmVersion\": \"1.4.3\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"raw\": \"yasgui-utils@^1.4.1\",\n    \"scope\": null,\n    \"escapedName\": \"yasgui-utils\",\n    \"name\": \"yasgui-utils\",\n    \"rawSpec\": \"^1.4.1\",\n    \"spec\": \">=1.4.1 <2.0.0\",\n    \"type\": \"range\"\n  },\n  \"_requiredBy\": [\n    \"/\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/yasgui-utils/-/yasgui-utils-1.6.0.tgz\",\n  \"_shasum\": \"bcb9091109c233e3e82737c94c202e6512389c47\",\n  \"_shrinkwrap\": null,\n  \"_spec\": \"yasgui-utils@^1.4.1\",\n  \"_where\": \"E:\\\\GraphDB\\\\project\\\\YASQE-Ontotext\\\\yasqe-ontotext\",\n  \"author\": {\n    \"name\": \"Laurens Rietveld\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/YASGUI/Utils/issues\"\n  },\n  \"dependencies\": {\n    \"store\": \"^1.3.14\"\n  },\n  \"description\": \"Utils for YASGUI libs\",\n  \"devDependencies\": {},\n  \"directories\": {},\n  \"dist\": {\n    \"shasum\": \"bcb9091109c233e3e82737c94c202e6512389c47\",\n    \"tarball\": \"https://registry.npmjs.org/yasgui-utils/-/yasgui-utils-1.6.0.tgz\"\n  },\n  \"homepage\": \"https://github.com/YASGUI/Utils\",\n  \"licenses\": [\n    {\n      \"type\": \"MIT\",\n      \"url\": \"http://yasgui.github.io/license.txt\"\n    }\n  ],\n  \"main\": \"src/main.js\",\n  \"maintainers\": [\n    {\n      \"name\": \"laurens.rietveld\",\n      \"email\": \"laurens.rietveld@gmail.com\"\n    }\n  ],\n  \"name\": \"yasgui-utils\",\n  \"optionalDependencies\": {},\n  \"readme\": \"ERROR: No README data found!\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/YASGUI/Utils.git\"\n  },\n  \"version\": \"1.6.0\"\n}\n",
    "window.console = window.console || {\"log\":function(){}};//make sure any console statements don't break IE\nmodule.exports = {\n\tstorage: require(\"./storage.js\"),\n\tsvg: require(\"./svg.js\"),\n\tversion: {\n\t\t\"yasgui-utils\" : require(\"../package.json\").version,\n\t},\n\tnestedExists : function(obj) {\n\t\tvar args = Array.prototype.slice.call(arguments, 1);\n\n\t\tfor (var i = 0; i < args.length; i++) {\n\t\t\tif (!obj || !obj.hasOwnProperty(args[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tobj = obj[args[i]];\n\t\t}\n\t\treturn true;\n\t}\n};\n",
    "var store = require(\"store\");\nvar times = {\n\tday: function() {\n\t\treturn 1000 * 3600 * 24;//millis to day\n\t},\n\tmonth: function() {\n\t\ttimes.day() * 30;\n\t},\n\tyear: function() {\n\t\ttimes.month() * 12;\n\t}\n};\n\nvar root = module.exports = {\n\tset : function(key, val, exp) {\n    if (!store.enabled) return;//this is probably in private mode. Don't run, as we might get Js errors\n\t\tif (key && val !== undefined) {\n\t\t\tif (typeof exp == \"string\") {\n\t\t\t\texp = times[exp]();\n\t\t\t}\n\t\t\t//try to store string for dom objects (e.g. XML result). Otherwise, we might get a circular reference error when stringifying this\n\t\t\tif (val.documentElement) val = new XMLSerializer().serializeToString(val.documentElement);\n\t\t\tstore.set(key, {\n\t\t\t\tval : val,\n\t\t\t\texp : exp,\n\t\t\t\ttime : new Date().getTime()\n\t\t\t});\n\t\t}\n\t},\n\tremove: function(key) {\n\t\tif (!store.enabled) return;//this is probably in private mode. Don't run, as we might get Js errors\n\t\tif (key) store.remove(key)\n\t},\n\tremoveAll: function(filter) {\n\t\tif (!store.enabled) return;//this is probably in private mode. Don't run, as we might get Js errors\n\t\tif (typeof filter === 'function') {\n\t\t\tfor (var key in store.getAll()) {\n\t\t\t\tif (filter(key, root.get(key))) root.remove(key);\n\t\t\t}\n\t\t}\n\t},\n\tget : function(key) {\n    if (!store.enabled) return null;//this is probably in private mode. Don't run, as we might get Js errors\n\t\tif (key) {\n\t\t\tvar info = store.get(key);\n\t\t\tif (!info) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (info.exp && new Date().getTime() - info.time > info.exp) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn info.val;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n};\n",
    "module.exports = {\n\tdraw: function(parent, svgString) {\n\t\tif (!parent) return;\n\t\tvar el = module.exports.getElement(svgString);\n\t\tif (el) {\n\t\t\tif (parent.append) {\n\t\t\t\tparent.append(el);\n\t\t\t} else {\n\t\t\t\t//regular dom doc\n\t\t\t\tparent.appendChild(el);\n\t\t\t}\n\t\t}\n\t},\n\tgetElement: function(svgString) {\n\t\tif (svgString && svgString.indexOf(\"<svg\") == 0) {\n\t\t\t//no style passed via config. guess own styles\n\t\t\tvar parser = new DOMParser();\n\t\t\tvar dom = parser.parseFromString(svgString, \"text/xml\");\n\t\t\tvar svg = dom.documentElement;\n\t\t\t\n\t\t\tvar svgContainer = document.createElement(\"div\");\n\t\t\tsvgContainer.className = 'svgImg';\n\t\t\tsvgContainer.appendChild(svg);\n\t\t\treturn svgContainer;\n\t\t}\n\t\treturn false;\n\t}\n};",
    "module.exports={\r\n  \"name\": \"yasgui-yasqe\",\r\n  \"description\": \"Yet Another SPARQL Query Editor\",\r\n  \"version\": \"2.10.5\",\r\n  \"main\": \"src/main.js\",\r\n  \"license\": \"MIT\",\r\n  \"author\": \"Laurens Rietveld\",\r\n  \"homepage\": \"http://yasqe.yasgui.org\",\r\n  \"scripts\": {\r\n    \"dev\": \"gulp serve\",\r\n    \"build\": \"gulp\",\r\n    \"patch\": \"gulp patch\",\r\n    \"minor\": \"gulp minor\",\r\n    \"major\": \"gulp major\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"gulp-bump\": \"^2.2.0\",\r\n    \"gulp-connect\": \"^4.2.0\",\r\n    \"gulp-embedlr\": \"^0.5.2\",\r\n    \"gulp-git\": \"^1.10.0\",\r\n    \"gulp-livereload\": \"^3.8.1\",\r\n    \"gulp-tag-version\": \"^1.3.0\",\r\n    \"watchify\": \"^3.7.0\"\r\n  },\r\n  \"bugs\": \"https://github.com/YASGUI/YASQE/issues/\",\r\n  \"keywords\": [\r\n    \"JavaScript\",\r\n    \"SPARQL\",\r\n    \"Editor\",\r\n    \"Semantic Web\",\r\n    \"Linked Data\"\r\n  ],\r\n  \"maintainers\": [\r\n    {\r\n      \"name\": \"Laurens Rietveld\",\r\n      \"email\": \"laurens.rietveld@gmail.com\",\r\n      \"web\": \"http://laurensrietveld.nl\"\r\n    }\r\n  ],\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"https://github.com/YASGUI/YASQE.git\"\r\n  },\r\n  \"dependencies\": {\r\n    \"bootstrap-sass\": \"^3.3.7\",\r\n    \"browserify\": \"^13.1.0\",\r\n    \"browserify-transform-tools\": \"^1.6.0\",\r\n    \"codemirror\": \"5.17.0\",\r\n    \"exorcist\": \"^0.4.0\",\r\n    \"gulp\": \"^3.9.1\",\r\n    \"gulp-autoprefixer\": \"^3.1.0\",\r\n    \"gulp-concat\": \"^2.6.0\",\r\n    \"gulp-cssimport\": \"^3.1.0\",\r\n    \"gulp-cssnano\": \"^2.1.2\",\r\n    \"gulp-filter\": \"^4.0.0\",\r\n    \"gulp-jsvalidate\": \"^2.1.0\",\r\n    \"gulp-notify\": \"^2.2.0\",\r\n    \"gulp-rename\": \"^1.2.2\",\r\n    \"gulp-sass\": \"^2.3.2\",\r\n    \"gulp-sourcemaps\": \"^1.6.0\",\r\n    \"gulp-streamify\": \"1.0.2\",\r\n    \"gulp-uglify\": \"^1.5.4\",\r\n    \"jquery\": \"^2.2.4\",\r\n    \"node-sass\": \"^3.8.0\",\r\n    \"require-dir\": \"^0.3.0\",\r\n    \"run-sequence\": \"^1.2.2\",\r\n    \"vinyl-buffer\": \"^1.0.0\",\r\n    \"vinyl-source-stream\": \"~1.1.0\",\r\n    \"vinyl-transform\": \"1.0.0\",\r\n    \"yasgui-utils\": \"^1.6.0\"\r\n  },\r\n  \"optionalShim\": {\r\n    \"codemirror\": {\r\n      \"require\": \"codemirror\",\r\n      \"global\": \"CodeMirror\"\r\n    },\r\n    \"jquery\": {\r\n      \"require\": \"jquery\",\r\n      \"global\": \"jQuery\"\r\n    },\r\n    \"../../lib/codemirror\": {\r\n      \"require\": \"codemirror\",\r\n      \"global\": \"CodeMirror\"\r\n    }\r\n  }\r\n}\r\n",
    "'use strict';\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\r\n\tutils = require('../utils.js'),\r\n\tyutils = require('yasgui-utils'),\r\n\tTrie = require('../../lib/trie.js'),\r\n\tYASQE = require('../main.js');\r\n\r\nmodule.exports = function (YASQE, yasqe) {\r\n\tvar completionNotifications = {};\r\n\tvar completers = {};\r\n\tvar tries = {};\r\n\t// introduce a flag to not trigger continuous completion always\r\n\tvar completionTriggeredFlag = false;\r\n\r\n\tyasqe.on('cursorActivity', function (yasqe, eventInfo) {\r\n\t\tautoComplete(true);\r\n\t});\r\n\tyasqe.on('keyHandled', function (yasqe, name, ev) {\r\n\t\tif (name === 'Esc') {\r\n\t\t\tcompletionTriggeredFlag = false;\r\n\t\t}\r\n\t});\r\n\tyasqe.on('change', function (yasqe, name, ev) {\r\n\t\tif (ev !== undefined) {\r\n\t\t\tif (\" \" == ev.text) {\r\n\t\t\t\tcompletionTriggeredFlag = false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar needPossibleAdjustment = [];\r\n\t\tfor (var notificationName in completionNotifications) {\r\n\t\t\tif (completionNotifications[notificationName].is(':visible')) {\r\n\t\t\t\tneedPossibleAdjustment.push(completionNotifications[notificationName]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (needPossibleAdjustment.length > 0) {\r\n\t\t\t//position completion notifications\r\n\t\t\tvar scrollBar = $(yasqe.getWrapperElement()).find(\".CodeMirror-vscrollbar\");\r\n\t\t\tvar offset = 0;\r\n\t\t\tif (scrollBar.is(\":visible\")) {\r\n\t\t\t\toffset = scrollBar.outerWidth();\r\n\t\t\t}\r\n\t\t\tneedPossibleAdjustment.forEach(function (notification) {\r\n\t\t\t\tnotification.css(\"right\", offset)\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n\r\n\r\n\r\n\t/**\r\n\t * Store bulk completions in memory as trie, and store these in localstorage as well (if enabled)\r\n\t * \r\n\t * @method doc.storeBulkCompletions\r\n\t * @param completions {array}\r\n\t */\r\n\tvar storeBulkCompletions = function (completer, completions) {\r\n\t\t// store array as trie\r\n\t\ttries[completer.name] = new Trie();\r\n\t\tfor (var i = 0; i < completions.length; i++) {\r\n\t\t\ttries[completer.name].insert(completions[i]);\r\n\t\t}\r\n\t\t// store in localstorage as well\r\n\t\tvar storageId = utils.getPersistencyId(yasqe, completer.persistent);\r\n\t\tif (storageId) yutils.storage.set(storageId, completions, \"month\");\r\n\t};\r\n\r\n\tvar initCompleter = function (name, completionInit) {\r\n\t\tvar completer = completers[name] = new completionInit(yasqe, name);\r\n\t\tcompleter.name = name;\r\n\t\tif (completer.bulk) {\r\n\t\t\tvar storeArrayAsBulk = function (suggestions) {\r\n\t\t\t\tif (suggestions && suggestions instanceof Array && suggestions.length > 0) {\r\n\t\t\t\t\tstoreBulkCompletions(completer, suggestions);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (completer.get instanceof Array) {\r\n\t\t\t\t// we don't care whether the completions are already stored in\r\n\t\t\t\t// localstorage. just use this one\r\n\t\t\t\tstoreArrayAsBulk(completer.get);\r\n\t\t\t} else {\r\n\t\t\t\t// if completions are defined in localstorage, use those! (calling the\r\n\t\t\t\t// function may come with overhead (e.g. async calls))\r\n\t\t\t\tvar completionsFromStorage = null;\r\n\t\t\t\tvar persistencyIdentifier = utils.getPersistencyId(yasqe, completer.persistent);\r\n\t\t\t\tif (persistencyIdentifier)\r\n\t\t\t\t\tcompletionsFromStorage = yutils.storage.get(persistencyIdentifier);\r\n\t\t\t\tif (completionsFromStorage && completionsFromStorage.length > 0) {\r\n\t\t\t\t\tstoreArrayAsBulk(completionsFromStorage);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// nothing in storage. check whether we have a function via which we\r\n\t\t\t\t\t// can get our prefixes\r\n\t\t\t\t\tif (completer.get instanceof Function) {\r\n\t\t\t\t\t\tif (completer.async) {\r\n\t\t\t\t\t\t\tcompleter.get(null, storeArrayAsBulk);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tstoreArrayAsBulk(completer.get());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tvar autoComplete = function (fromAutoShow) {\r\n\t\tif (yasqe.somethingSelected())\r\n\t\t\treturn;\r\n\t\tyasqe.fromAutoShow = fromAutoShow;\r\n\t\tvar tryHintType = function (completer) {\r\n\t\t\tif (fromAutoShow && !completionTriggeredFlag) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (fromAutoShow // from autoShow, i.e. this gets called each time the editor content changes\r\n\t\t\t\t&& (!completer.autoShow) // autoshow for  this particular type of autocompletion is -not- enabled\r\n\t\t\t\t// Comment this, we want to do ajax request for autoShow for localNames autocompletion\r\n\t\t\t\t// || (!completer.bulk && completer.async)) // async is enabled (don't want to re-do ajax-like request for every editor change)\r\n\t\t\t) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif (!fromAutoShow) {\r\n\t\t\t\tcompletionTriggeredFlag = true;\r\n\t\t\t}\r\n\r\n\t\t\tvar hintConfig = {\r\n\t\t\t\tcloseCharacters: /(?=a)b/,\r\n\t\t\t\tcompleteSingle: false\r\n\t\t\t};\r\n\t\t\tif (!completer.bulk && completer.async) {\r\n\t\t\t\thintConfig.async = true;\r\n\t\t\t}\r\n\t\t\tvar wrappedHintCallback = function (yasqe, callback) {\r\n\t\t\t\treturn getCompletionHintsObject(completer, callback);\r\n\t\t\t};\r\n\t\t\tvar result = YASQE.showHint(yasqe, wrappedHintCallback, hintConfig);\r\n\t\t\treturn true;\r\n\t\t};\r\n\t\tfor (var completerName in completers) {\r\n\t\t\tif ($.inArray(completerName, yasqe.options.autocompleters) == -1) continue; //this completer is disabled\r\n\t\t\tvar completer = completers[completerName];\r\n\t\t\tif (!completer.isValidCompletionPosition) continue; //no way to check whether we are in a valid position\r\n\r\n\t\t\tif (!completer.isValidCompletionPosition()) {\r\n\t\t\t\t//if needed, fire callbacks for when we are -not- in valid completion position\r\n\t\t\t\tif (completer.callbacks && completer.callbacks.invalidPosition) {\r\n\t\t\t\t\tcompleter.callbacks.invalidPosition(yasqe, completer);\r\n\t\t\t\t}\r\n\t\t\t\t//not in a valid position, so continue to next completion candidate type\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// run valid position handler, if there is one (if it returns false, stop the autocompletion!)\r\n\t\t\tif (completer.callbacks && completer.callbacks.validPosition) {\r\n\t\t\t\tif (completer.callbacks.validPosition(yasqe, completer) === false)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tvar success = tryHintType(completer);\r\n\t\t\tif (success)\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t};\r\n\r\n\r\n\r\n\tvar getCompletionHintsObject = function (completer, callback) {\r\n\t\tvar getSuggestionsFromToken = function (partialToken) {\r\n\t\t\tvar stringToAutocomplete = partialToken.autocompletionString || partialToken.string;\r\n\t\t\tvar suggestions = [];\r\n\t\t\tif (tries[completer.name]) {\r\n\t\t\t\tsuggestions = tries[completer.name].autoComplete(stringToAutocomplete);\r\n\t\t\t} else if (typeof completer.get == \"function\" && completer.async == false) {\r\n\t\t\t\tsuggestions = completer.get(stringToAutocomplete);\r\n\t\t\t} else if (typeof completer.get == \"object\") {\r\n\t\t\t\tvar partialTokenLength = stringToAutocomplete.length;\r\n\t\t\t\tfor (var i = 0; i < completer.get.length; i++) {\r\n\t\t\t\t\tvar completion = completer.get[i];\r\n\t\t\t\t\tif (completion.slice(0, partialTokenLength) == stringToAutocomplete) {\r\n\t\t\t\t\t\tsuggestions.push(completion);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn getSuggestionsAsHintObject(suggestions, completer, partialToken);\r\n\r\n\t\t};\r\n\r\n\r\n\t\tvar token = yasqe.getCompleteToken();\r\n\t\tif (completer.preProcessToken) {\r\n\t\t\ttoken = completer.preProcessToken(token);\r\n\t\t}\r\n\r\n\t\tif (token) {\r\n\t\t\t// use custom completionhint function, to avoid reaching a loop when the\r\n\t\t\t// completionhint is the same as the current token\r\n\t\t\t// regular behaviour would keep changing the codemirror dom, hence\r\n\t\t\t// constantly calling this callback\r\n\t\t\tif (!completer.bulk && completer.async) {\r\n\t\t\t\tvar wrappedCallback = function (suggestions) {\r\n\t\t\t\t\tcallback(getSuggestionsAsHintObject(suggestions, completer, token));\r\n\t\t\t\t};\r\n\t\t\t\tcompleter.get(token, wrappedCallback);\r\n\t\t\t} else {\r\n\t\t\t\treturn getSuggestionsFromToken(token);\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tvar replaceAll = function (str, find, replace) {\r\n\t\treturn str.replace(new RegExp(find, 'g'), replace);\r\n\t};\r\n\r\n\tvar encodeForSparql = function (str) {\r\n\t\tif (str.trim().startsWith(\"<\") && str.trim().endsWith(\">\")) {\r\n\t\t\treturn str;\r\n\t\t}\r\n\t\tstr = encodeURIComponent(str);\r\n\t\tstr = replaceAll(str, \"[*]\", \"%2a\");\r\n\t\tstr = replaceAll(str, \"[!]\", \"%21\");\r\n\t\tstr = replaceAll(str, \"[(]\", \"%28\");\r\n\t\tstr = replaceAll(str, \"[)]\", \"%29\");\r\n\t\tstr = replaceAll(str, \"[~]\", \"%7e\");\r\n\t\tstr = replaceAll(str, \"[']\", \"%27\");\r\n\t\treturn str;\r\n\t};\r\n\r\n\t/**\r\n\t *  get our array of suggestions (strings) in the codemirror hint format\r\n\t */\r\n\tvar getSuggestionsAsHintObject = function (suggestions, completer, token) {\r\n\t\tvar hintList = [];\r\n\t\tfor (var i = 0; i < suggestions.length; i++) {\r\n\t\t\tvar suggestedString = suggestions[i];\r\n\t\t\tif (completer.postProcessToken) {\r\n\t\t\t\tsuggestedString = completer.postProcessToken(token, suggestedString);\r\n\t\t\t}\r\n\r\n\t\t\tvar displayTextVar = replaceAll(replaceAll(suggestedString, \"<\", \"&lt;\"), \">\", \"&gt;\");\r\n\t\t\tdisplayTextVar = replaceAll(replaceAll(displayTextVar, \"&lt;b&gt;\", \"<span class='CodeMirror-highlight'>\"), \"&lt;/b&gt;\", \"</span>\");\r\n\t\t\tsuggestedString = replaceAll(replaceAll(suggestedString, \"<b>\", \"\"), \"</b>\", \"\");\r\n\r\n\t\t\tif (!(suggestedString.startsWith(\"<\") && suggestedString.endsWith(\">\")) && suggestedString.indexOf(\":\") > 0) {\r\n\t\t\t\tvar prefixSplit = suggestedString.indexOf(\":\");\r\n\t\t\t\tsuggestedString = suggestedString.substring(0, prefixSplit + 1) + encodeForSparql(suggestedString.substring(prefixSplit + 1));\r\n\t\t\t}\r\n\r\n\t\t\thintList.push({\r\n\t\t\t\ttext: suggestedString,\r\n\t\t\t\tdisplayText: displayTextVar,\r\n\t\t\t\thint: function (yasqe, data, completion) {\r\n\t\t\t\t\tcompletionTriggeredFlag = false;\r\n\t\t\t\t\tselectHint(yasqe, data, completion);\r\n\r\n\t\t\t\t},\r\n\t\t\t\trender: function (elt, data, cur) {\r\n\t\t\t\t\t$(elt).append(cur.displayText);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tvar cur = yasqe.getCursor();\r\n\t\tvar returnObj = {\r\n\t\t\tcompletionToken: token.string,\r\n\t\t\tlist: hintList,\r\n\t\t\tfrom: {\r\n\t\t\t\tline: cur.line,\r\n\t\t\t\tch: token.start\r\n\t\t\t},\r\n\t\t\tto: {\r\n\t\t\t\tline: cur.line,\r\n\t\t\t\tch: token.end\r\n\t\t\t}\r\n\t\t};\r\n\t\t//if we have some autocompletion handlers specified, add these these to the object. Codemirror will take care of firing these\r\n\t\tif (completer.callbacks) {\r\n\t\t\tfor (var callbackName in completer.callbacks) {\r\n\t\t\t\tif (completer.callbacks[callbackName]) {\r\n\t\t\t\t\tYASQE.on(returnObj, callbackName, completer.callbacks[callbackName]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn returnObj;\r\n\t};\r\n\r\n\treturn {\r\n\t\tinit: initCompleter,\r\n\t\tcompleters: completers,\r\n\t\tnotifications: {\r\n\t\t\tgetEl: function (completer) {\r\n\t\t\t\treturn $(completionNotifications[completer.name]);\r\n\t\t\t},\r\n\t\t\tshow: function (yasqe, completer) {\r\n\t\t\t\t//only draw when the user needs to use a keypress to summon autocompletions\r\n\t\t\t\tif (!completer.autoshow) {\r\n\t\t\t\t\tif (!completionNotifications[completer.name]) completionNotifications[completer.name] = $(\"<div class='completionNotification'></div>\");\r\n\t\t\t\t\tcompletionNotifications[completer.name]\r\n\t\t\t\t\t\t.show()\r\n\t\t\t\t\t\t.text(\"Press Alt+Enter to autocomplete\")\r\n\t\t\t\t\t\t.appendTo($(yasqe.getWrapperElement()));\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\thide: function (yasqe, completer) {\r\n\t\t\t\tif (completionNotifications[completer.name]) {\r\n\t\t\t\t\tcompletionNotifications[completer.name].hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t},\r\n\t\tautoComplete: autoComplete,\r\n\t\tgetTrie: function (completer) {\r\n\t\t\treturn (typeof completer == \"string\" ? tries[completer] : tries[completer.name]);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * function which fires after the user selects a completion. this function checks whether we actually need to store this one (if completion is same as current token, don't do anything)\r\n */\r\nvar selectHint = function (yasqe, data, completion) {\r\n\tif (completion.text != yasqe.getTokenAt(yasqe.getCursor()).string) {\r\n\t\tyasqe.replaceRange(completion.text, data.from, data.to);\r\n\t}\r\n};\r\n\r\n\r\n\r\n\r\n\r\n//\r\n//module.exports = {\r\n//\tpreprocessPrefixTokenForCompletion: preprocessPrefixTokenForCompletion,\r\n//\tpostprocessResourceTokenForCompletion: postprocessResourceTokenForCompletion,\r\n//\tpreprocessResourceTokenForCompletion: preprocessResourceTokenForCompletion,\r\n//\tshowCompletionNotification: showCompletionNotification,\r\n//\thideCompletionNotification: hideCompletionNotification,\r\n//\tautoComplete: autoComplete,\r\n//\tautocompleteVariables: autocompleteVariables,\r\n//\tfetchFromPrefixCc: fetchFromPrefixCc,\r\n//\tfetchFromLov: fetchFromLov,\r\n////\tstoreBulkCompletions: storeBulkCompletions,\r\n//\tloadBulkCompletions: loadBulkCompletions,\r\n//};",
    "'use strict';\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\nmodule.exports = function(yasqe, name) {\r\n\treturn {\r\n\t\tisValidCompletionPosition: function() {\r\n\t\t\treturn module.exports.isValidCompletionPosition(yasqe);\r\n\t\t},\r\n\t\tget: function(token, callback) {\r\n\t\t\treturn require('./utils').fetchFromLov(yasqe, this, token, callback);\r\n\t\t},\r\n\t\tpreProcessToken: function(token) {\r\n\t\t\treturn module.exports.preProcessToken(yasqe, token)\r\n\t\t},\r\n\t\tpostProcessToken: function(token, suggestedString) {\r\n\t\t\treturn module.exports.postProcessToken(yasqe, token, suggestedString);\r\n\t\t},\r\n\t\tasync: true,\r\n\t\tbulk: false,\r\n\t\tautoShow: false,\r\n\t\tpersistent: name,\r\n\t\tcallbacks: {\r\n\t\t\tvalidPosition: yasqe.autocompleters.notifications.show,\r\n\t\t\tinvalidPosition: yasqe.autocompleters.notifications.hide,\r\n\t\t}\r\n\t}\r\n};\r\n\r\nmodule.exports.isValidCompletionPosition = function(yasqe) {\r\n\tvar token = yasqe.getCompleteToken();\r\n\tif (token.string.indexOf(\"?\") == 0)\r\n\t\treturn false;\r\n\tvar cur = yasqe.getCursor();\r\n\tvar previousToken = yasqe.getPreviousNonWsToken(cur.line, token);\r\n\tif (previousToken.string == \"a\")\r\n\t\treturn true;\r\n\tif (previousToken.string == \"rdf:type\")\r\n\t\treturn true;\r\n\tif (previousToken.string == \"rdfs:domain\")\r\n\t\treturn true;\r\n\tif (previousToken.string == \"rdfs:range\")\r\n\t\treturn true;\r\n\treturn false;\r\n};\r\nmodule.exports.preProcessToken = function(yasqe, token) {\r\n\treturn require('./utils.js').preprocessResourceTokenForCompletion(yasqe, token);\r\n};\r\nmodule.exports.postProcessToken = function(yasqe, token, suggestedString) {\r\n\treturn require('./utils.js').postprocessResourceTokenForCompletion(yasqe, token, suggestedString)\r\n};",
    "'use strict';\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\nvar utils = require('./utils');\r\nmodule.exports = function (yasqe, name) {\r\n    return {\r\n        isValidCompletionPosition: function () { return module.exports.isValidCompletionPosition(yasqe); },\r\n        get: function (token, callback) {\r\n            return module.exports.fetchAutocomplete(yasqe, token, callback);\r\n        },\r\n        preProcessToken: function (token) { return module.exports.preProcessToken(yasqe, token); },\r\n        postProcessToken: function (token, suggestedString) { return module.exports.postProcessToken(yasqe, token, suggestedString); },\r\n        async: true,\r\n        bulk: false,\r\n        autoShow: true,\r\n        persistent: name,\r\n        callbacks: {\r\n            validPosition: yasqe.autocompleters.notifications.show,\r\n            invalidPosition: yasqe.autocompleters.notifications.hide,\r\n        }\r\n    };\r\n};\r\n\r\nmodule.exports.fetchAutocomplete = function (yasqe, token, callback) {\r\n    if (!token || !token.string || token.string.trim().length == 0) {\r\n        return false;\r\n    }\r\n    var query;\r\n    if (token.tokenPrefix) {\r\n        query = token.tokenPrefixUri + \";\" + token.string.substring(token.tokenPrefix.length);\r\n    } else {\r\n        if (token.autocompletionString.startsWith('http://')) {\r\n            query = token.autocompletionString + \";\";\r\n        } else {\r\n            query = token.autocompletionString;\r\n        }\r\n    }\r\n    if (backendRepositoryID === 'SYSTEM') {\r\n        return;\r\n    }\r\n    utils.setupHeaders(backendRepositoryID);\r\n    $.get('rest/autocomplete/query', { q: query }, function (data, textStatus, jqXHR) {\r\n        if (204 == jqXHR.status && !yasqe.fromAutoShow) {\r\n            yasqe.toastBuildIndex();\r\n        } else {\r\n            callback(data);\r\n        }\r\n\r\n    }, 'json').fail(function (data) {\r\n        if (!yasqe.fromAutoShow) {\r\n            yasqe.toastError(data);\r\n        }\r\n    });\r\n};\r\n\r\nmodule.exports.isValidCompletionPosition = function (yasqe) {\r\n    var cur = yasqe.getCursor(), currToken = yasqe.getTokenAt(cur);\r\n    // Do not autocomplete local names in prefix lines\r\n    if (yasqe.getLine(cur.line).toUpperCase().trim().indexOf('PREFIX') == 0) {\r\n        return false;\r\n    }\r\n    var token = yasqe.getCompleteToken();\r\n    if ($.inArray(\"IRI_REF\", token.state.possibleCurrent) == -1)\r\n        return false;\r\n    if (token.string.length == 0)\r\n        return false; //we want -something- to autocomplete\r\n    if (token.string.indexOf(\"?\") == 0)\r\n        return false; // we are typing a var\r\n    return true;\r\n};\r\nmodule.exports.preProcessToken = function (yasqe, token) {\r\n    return require('./utils.js').preprocessResourceTokenForCompletion(yasqe, token);\r\n};\r\nmodule.exports.postProcessToken = function (yasqe, token, suggestedString) {\r\n    return require('./utils.js').postprocessResourceTokenForCompletion(yasqe, token, suggestedString);\r\n};",
    "'use strict';\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\nmodule.exports = function(yasqe, name) {\r\n\treturn {\r\n\t\tisValidCompletionPosition: function() {\r\n\t\t\treturn module.exports.isValidCompletionPosition(yasqe);\r\n\t\t},\r\n\t\tget: function(token, callback) {\r\n\t\t\treturn require('./utils').fetchFromLov(yasqe, this, token, callback);\r\n\t\t},\r\n\t\tpreProcessToken: function(token) {\r\n\t\t\treturn module.exports.preProcessToken(yasqe, token)\r\n\t\t},\r\n\t\tpostProcessToken: function(token, suggestedString) {\r\n\t\t\treturn module.exports.postProcessToken(yasqe, token, suggestedString);\r\n\t\t},\r\n\t\tasync: true,\r\n\t\tbulk: false,\r\n\t\tautoShow: false,\r\n\t\tpersistent: name,\r\n\t\tcallbacks: {\r\n\t\t\tvalidPosition: yasqe.autocompleters.notifications.show,\r\n\t\t\tinvalidPosition: yasqe.autocompleters.notifications.hide,\r\n\t\t}\r\n\t}\r\n};\r\n\r\nmodule.exports.isValidCompletionPosition = function(yasqe) {\r\n\tvar token = yasqe.getCompleteToken();\r\n\tif (token.string.length == 0)\r\n\t\treturn false; //we want -something- to autocomplete\r\n\tif (token.string.indexOf(\"?\") == 0)\r\n\t\treturn false; // we are typing a var\r\n\tif ($.inArray(\"a\", token.state.possibleCurrent) >= 0)\r\n\t\treturn true; // predicate pos\r\n\tvar cur = yasqe.getCursor();\r\n\tvar previousToken = yasqe.getPreviousNonWsToken(cur.line, token);\r\n\tif (previousToken.string == \"rdfs:subPropertyOf\")\r\n\t\treturn true;\r\n\r\n\t// hmm, we would like -better- checks here, e.g. checking whether we are\r\n\t// in a subject, and whether next item is a rdfs:subpropertyof.\r\n\t// difficult though... the grammar we use is unreliable when the query\r\n\t// is invalid (i.e. during typing), and often the predicate is not typed\r\n\t// yet, when we are busy writing the subject...\r\n\treturn false;\r\n};\r\nmodule.exports.preProcessToken = function(yasqe, token) {\r\n\treturn require('./utils.js').preprocessResourceTokenForCompletion(yasqe, token);\r\n};\r\nmodule.exports.postProcessToken = function(yasqe, token, suggestedString) {\r\n\treturn require('./utils.js').postprocessResourceTokenForCompletion(yasqe, token, suggestedString)\r\n};",
    "'use strict';\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\nvar utils = require('./utils');\r\n//this is a mapping from the class names (generic ones, for compatability with codemirror themes), to what they -actually- represent\r\nvar tokenTypes = {\r\n    \"string-2\": \"prefixed\",\r\n    \"atom\": \"var\"\r\n};\r\n\r\nmodule.exports = function (yasqe, completerName) {\r\n    //this autocompleter also fires on-change!\r\n    yasqe.on(\"change\", function () {\r\n        module.exports.appendPrefixIfNeeded(yasqe, completerName);\r\n    });\r\n\r\n\r\n    return {\r\n        isValidCompletionPosition: function () { return module.exports.isValidCompletionPosition(yasqe); },\r\n        get: function (token, callback) {\r\n            if (backendRepositoryID != '') {\r\n                // TODO: find a way to get this from the security module in angular\r\n                utils.setupHeaders(backendRepositoryID);\r\n                var port = window.location.port;\r\n                if (!port) {\r\n                    if (window.location.protocol == 'https:') {\r\n                        port = \"443\";\r\n                    }\r\n                    else {\r\n                        port = \"80\";\r\n                    }\r\n                }\r\n                var graphDBAuth = utils.getCookie('com.ontotext.graphdb.auth' + port);\r\n                if (graphDBAuth != '') {\r\n                    $.ajaxSetup({\r\n                        headers: {\r\n                            'X-AUTH-TOKEN': graphDBAuth\r\n                        }\r\n                    });\r\n                }\r\n\r\n                $.get('repositories/' + backendRepositoryID + '/namespaces', function (data) {\r\n                    if (data.results) {\r\n                        var hasOnto = false;\r\n                        var prefixArray = data.results.bindings.map(function (namespace) {\r\n                            if (namespace.prefix.value === 'onto') {\r\n                                hasOnto = true;\r\n                            }\r\n                            return namespace.prefix.value + \": <\" + namespace.namespace.value + \">\";\r\n                        });\r\n                        if (!hasOnto) {\r\n                            prefixArray.push(\"onto: <http://www.ontotext.com/>\");\r\n                        }\r\n\r\n                        prefixArray.sort();\r\n                        callback(prefixArray);\r\n                    }\r\n                    //TODO: What to do on error here\r\n                },\r\n                    'json'\r\n                );\r\n            }\r\n        },\r\n        preProcessToken: function (token) { return module.exports.preprocessPrefixTokenForCompletion(yasqe, token); },\r\n        async: true,\r\n        bulk: true,\r\n        autoShow: true,\r\n        persistent: null,\r\n    };\r\n};\r\nmodule.exports.isValidCompletionPosition = function (yasqe) {\r\n    var cur = yasqe.getCursor(), token = yasqe.getTokenAt(cur);\r\n\r\n    // not at end of line\r\n    if (yasqe.getLine(cur.line).length > cur.ch)\r\n        return false;\r\n\r\n    if (token.type != \"ws\") {\r\n        // we want to complete token, e.g. when the prefix starts with an a\r\n        // (treated as a token in itself..)\r\n        // but we to avoid including the PREFIX tag. So when we have just\r\n        // typed a space after the prefix tag, don't get the complete token\r\n        token = yasqe.getCompleteToken();\r\n    }\r\n\r\n    // we shouldnt be at the uri part the prefix declaration\r\n    // also check whether current token isnt 'a' (that makes codemirror\r\n    // thing a namespace is a possiblecurrent\r\n    if (!token.string.indexOf(\"a\") == 0\r\n        && $.inArray(\"PNAME_NS\", token.state.possibleCurrent) == -1)\r\n        return false;\r\n\r\n    // First token of line needs to be PREFIX,\r\n    // there should be no trailing text (otherwise, text is wrongly inserted\r\n    // in between)\r\n    var previousToken = yasqe.getPreviousNonWsToken(cur.line, token);\r\n    if (!previousToken || previousToken.string.toUpperCase() != \"PREFIX\") return false;\r\n    return true;\r\n};\r\nmodule.exports.preprocessPrefixTokenForCompletion = function (yasqe, token) {\r\n    var previousToken = yasqe.getPreviousNonWsToken(yasqe.getCursor().line, token);\r\n    if (previousToken && previousToken.string && previousToken.string.slice(-1) == \":\") {\r\n        //combine both tokens! In this case we have the cursor at the end of line \"PREFIX bla: <\".\r\n        //we want the token to be \"bla: <\", en not \"<\"\r\n        token = {\r\n            start: previousToken.start,\r\n            end: token.end,\r\n            string: previousToken.string + \" \" + token.string,\r\n            state: token.state\r\n        };\r\n    }\r\n    return token;\r\n};\r\n/**\r\n * Check whether typed prefix is declared. If not, automatically add declaration\r\n * using list from prefix.cc\r\n * \r\n * @param yasqe\r\n */\r\nmodule.exports.appendPrefixIfNeeded = function (yasqe, completerName) {\r\n    if (!yasqe.autocompleters.getTrie(completerName))\r\n        return;// no prefixed defined. just stop\r\n    if (!yasqe.options.autocompleters || yasqe.options.autocompleters.indexOf(completerName) == -1) return;//this autocompleter is disabled\r\n    var cur = yasqe.getCursor();\r\n\r\n    var token = yasqe.getTokenAt(cur);\r\n    if (tokenTypes[token.type] == \"prefixed\") {\r\n        var colonIndex = token.string.indexOf(\":\");\r\n        if (colonIndex !== -1) {\r\n            // check previous token isnt PREFIX, or a '<'(which would mean we are in a uri)\r\n            //\t\t\tvar firstTokenString = yasqe.getNextNonWsToken(cur.line).string.toUpperCase();\r\n            var lastNonWsTokenString = yasqe.getPreviousNonWsToken(cur.line, token).string.toUpperCase();\r\n            var previousToken = yasqe.getTokenAt({\r\n                line: cur.line,\r\n                ch: token.start\r\n            });// needs to be null (beginning of line), or whitespace\r\n            if (lastNonWsTokenString != \"PREFIX\"\r\n                && (previousToken.type == \"ws\" || previousToken.type == null)) {\r\n                // check whether it isnt defined already (saves us from looping\r\n                // through the array)\r\n                var currentPrefix = token.string.substring(0, colonIndex + 1);\r\n                var queryPrefixes = yasqe.getPrefixesFromQuery();\r\n                if (queryPrefixes[currentPrefix.slice(0, -1)] == null) {\r\n                    // ok, so it isnt added yet!\r\n                    var completions = yasqe.autocompleters.getTrie(completerName).autoComplete(currentPrefix);\r\n                    if (completions.length > 0) {\r\n                        yasqe.addPrefixes(completions[0]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n",
    "/**\r\n * Auto completes standard sparql functions\r\n */\r\nmodule.exports = function (yasqe, completerName) {\r\n    return {\r\n        /**\r\n         * Check whether the cursor is in a proper position for this autocompletion.\r\n         * \r\n         * @property autocompletions.variableNames.isValidCompletionPosition\r\n         * @type function\r\n         * @param yasqe {doc}\r\n         * @return boolean\r\n         */\r\n        isValidCompletionPosition: function () {\r\n            var token = yasqe.getTokenAt(yasqe.getCursor());\r\n            if (token.type != \"ws\") {\r\n                token = yasqe.getCompleteToken();\r\n                if (token.string.length > 1) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        /**\r\n         * Get the autocompletions. Either a function which returns an\r\n         * array, or an actual array. The array should be in the form [\"http://...\",....]\r\n         * \r\n         * @property autocompletions.variableNames.get\r\n         * @type function|array\r\n         * @param doc {YASQE}\r\n         * @param token {object|string} When bulk is disabled, use this token to autocomplete\r\n         * @param completionType {string} what type of autocompletion we try to attempt. Classes, properties, or prefixes)\r\n         * @param callback {function} In case async is enabled, use this callback\r\n         * @default function (YASQE.autocompleteVariables)\r\n         */\r\n        get: function (token, callback) {\r\n            //Taken from http://www.w3.org/TR/sparql11-query/#grammar BuiltInCall\r\n            var functions = ['COUNT', 'SUM', 'MIN', 'MAX', 'AVG', 'SAMPLE', 'STR', 'LANG', 'LANGMATCHES', 'DATATYPE', 'BOUND', 'IRI', 'URI',\r\n                'BNODE', 'RAND', 'ABS', 'CEIL', 'FLOOR', 'ROUND', 'CONCAT', 'SUBSTR', 'STRLEN', 'REPLACE', 'UCASE', 'LCASE', 'ENCODE_FOR_URI',\r\n                'CONTAINS', 'STRSTARTS', 'STRENDS', 'STRBEFORE', 'STRAFTER', 'YEAR', 'MONTH', 'DAY', 'HOURS', 'MINUTES', 'SECONDS', 'TIMEZONE',\r\n                'TZ', 'NOW', 'UUID', 'STRUUID', 'MD5', 'SHA1', 'SHA256', 'SHA384', 'SHA512', 'COALESCE', 'IF', 'STRLANG', 'STRDT', 'sameTerm',\r\n                'isIRI', 'isURI', 'isBLANK', 'isLITERAL', 'isNUMERIC', 'REGEX', 'EXISTS', 'FILTER'\r\n            ];\r\n\r\n            var result = [];\r\n            for (var i = 0; i < functions.length; i++) {\r\n                var f = functions[i];\r\n                var lowercasedF = f.toLowerCase();\r\n                var lowercasedToken = token.toLowerCase();\r\n                if (lowercasedF.indexOf(lowercasedToken) !== 0) {\r\n                    continue;\r\n                }\r\n                result.push(f + '(');\r\n            }\r\n            result.sort();\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Preprocesses the codemirror token before matching it with our autocompletions list.\r\n         * Use this for e.g. autocompleting prefixed resources when your autocompletion list contains only full-length URIs\r\n         * I.e., foaf:name -> http://xmlns.com/foaf/0.1/name\r\n         * \r\n         * @property autocompletions.variableNames.preProcessToken\r\n         * @type function\r\n         * @param doc {YASQE}\r\n         * @param token {object} The CodeMirror token, including the position of this token in the query, as well as the actual string\r\n         * @return token {object} Return the same token (possibly with more data added to it, which you can use in the postProcessing step)\r\n         * @default null\r\n         */\r\n        preProcessToken: null,\r\n        /**\r\n         * Postprocesses the autocompletion suggestion.\r\n         * Use this for e.g. returning a prefixed URI based on a full-length URI suggestion\r\n         * I.e., http://xmlns.com/foaf/0.1/name -> foaf:name\r\n         * \r\n         * @property autocompletions.variableNames.postProcessToken\r\n         * @type function\r\n         * @param doc {YASQE}\r\n         * @param token {object} The CodeMirror token, including the position of this token in the query, as well as the actual string\r\n         * @param suggestion {string} The suggestion which you are post processing\r\n         * @return post-processed suggestion {string}\r\n         * @default null\r\n         */\r\n        postProcessToken: null,\r\n        /**\r\n         * The get function is asynchronous\r\n         * \r\n         * @property autocompletions.variableNames.async\r\n         * @type boolean\r\n         * @default false\r\n         */\r\n        async: false,\r\n        /**\r\n         * Use bulk loading of variableNames: all variable names are retrieved\r\n         * onLoad using the get() function. Alternatively, disable bulk\r\n         * loading, to call the get() function whenever a token needs\r\n         * autocompletion (in this case, the completion token is passed on\r\n         * to the get() function) whenever you have an autocompletion list that is static, and \r\n         * that easily fits in memory, we advice you to enable bulk for\r\n         * performance reasons (especially as we store the autocompletions\r\n         * in a trie)\r\n         * \r\n         * @property autocompletions.variableNames.bulk\r\n         * @type boolean\r\n         * @default false\r\n         */\r\n        bulk: false,\r\n        /**\r\n         * Auto-show the autocompletion dialog. Disabling this requires the\r\n         * user to press [ctrl|cmd]-space to summon the dialog. Note: this\r\n         * only works when completions are not fetched asynchronously\r\n         * \r\n         * @property autocompletions.variableNames.autoShow\r\n         * @type boolean\r\n         * @default false\r\n         */\r\n        autoShow: true,\r\n        /**\r\n         * Automatically store autocompletions in localstorage. This is\r\n         * particularly useful when the get() function is an expensive ajax\r\n         * call. Autocompletions are stored for a period of a month. Set\r\n         * this property to null (or remove it), to disable the use of\r\n         * localstorage. Otherwise, set a string value (or a function\r\n         * returning a string val), returning the key in which to store the\r\n         * data Note: this feature only works combined with completions\r\n         * loaded in memory (i.e. bulk: true)\r\n         * \r\n         * @property autocompletions.variableNames.persistent\r\n         * @type string|function\r\n         * @default null\r\n         */\r\n        persistent: null,\r\n        /**\r\n         * A set of handlers. Most, taken from the CodeMirror showhint\r\n         * plugin: http://codemirror.net/doc/manual.html#addon_show-hint\r\n         * \r\n         * @property autocompletions.variableNames.handlers\r\n         * @type object\r\n         */\r\n        handlers: {\r\n            /**\r\n             * Fires when a codemirror change occurs in a position where we\r\n             * can show this particular type of autocompletion\r\n             * \r\n             * @property autocompletions.variableNames.handlers.validPosition\r\n             * @type function\r\n             * @default null\r\n             */\r\n            validPosition: null,\r\n            /**\r\n             * Fires when a codemirror change occurs in a position where we\r\n             * can -not- show this particular type of autocompletion\r\n             * \r\n             * @property autocompletions.variableNames.handlers.invalidPosition\r\n             * @type function\r\n             * @default null\r\n             */\r\n            invalidPosition: null,\r\n            /**\r\n             * See http://codemirror.net/doc/manual.html#addon_show-hint\r\n             * \r\n             * @property autocompletions.variableNames.handlers.shown\r\n             * @type function\r\n             * @default null\r\n             */\r\n            shown: null,\r\n            /**\r\n             * See http://codemirror.net/doc/manual.html#addon_show-hint\r\n             * \r\n             * @property autocompletions.variableNames.handlers.select\r\n             * @type function\r\n             * @default null\r\n             */\r\n            select: null,\r\n            /**\r\n             * See http://codemirror.net/doc/manual.html#addon_show-hint\r\n             * \r\n             * @property autocompletions.variableNames.handlers.pick\r\n             * @type function\r\n             * @default null\r\n             */\r\n            pick: null,\r\n            /**\r\n             * See http://codemirror.net/doc/manual.html#addon_show-hint\r\n             * \r\n             * @property autocompletions.variableNames.handlers.close\r\n             * @type function\r\n             * @default null\r\n             */\r\n            close: null,\r\n        }\r\n    };\r\n};\r\n",
    "'use strict';\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\r\n\tutils = require('./utils.js'),\r\n\tyutils = require('yasgui-utils');\r\n/**\r\n * Where the base class only contains functionality related to -all- completions, this class contains some utils used here and there in our autocompletions\r\n */\r\n\r\n\r\n\r\n/**\r\n * Converts rdf:type to http://.../type and converts <http://...> to http://...\r\n * Stores additional info such as the used namespace and prefix in the token object\r\n */\r\nvar preprocessResourceTokenForCompletion = function (yasqe, token) {\r\n\tvar queryPrefixes = yasqe.getPrefixesFromQuery();\r\n\tif (!token.string.indexOf(\"<\") == 0) {\r\n\t\ttoken.tokenPrefix = token.string.substring(0, token.string.indexOf(\":\") + 1);\r\n\r\n\t\tif (queryPrefixes[token.tokenPrefix.slice(0, -1)] != null) {\r\n\t\t\ttoken.tokenPrefixUri = queryPrefixes[token.tokenPrefix.slice(0, -1)];\r\n\t\t}\r\n\t}\r\n\r\n\ttoken.autocompletionString = token.string.trim();\r\n\tif (!token.string.indexOf(\"<\") == 0 && token.string.indexOf(\":\") > -1) {\r\n\t\t// hmm, the token is prefixed. We still need the complete uri for autocompletions. generate this!\r\n\t\tfor (var prefix in queryPrefixes) {\r\n\t\t\tif (token.string.indexOf(prefix) == 0) {\r\n\t\t\t\ttoken.autocompletionString = queryPrefixes[prefix];\r\n\t\t\t\ttoken.autocompletionString += token.string.substring(prefix.length + 1);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tif (token.autocompletionString.indexOf(\"<\") == 0) token.autocompletionString = token.autocompletionString.substring(1);\r\n\tif (token.autocompletionString.indexOf(\">\", token.length - 1) !== -1) token.autocompletionString = token.autocompletionString.substring(0, token.autocompletionString.length - 1);\r\n\treturn token;\r\n};\r\n\r\nvar postprocessResourceTokenForCompletion = function (yasqe, token, suggestedString) {\r\n\tif (token.tokenPrefix && token.autocompletionString && token.tokenPrefixUri) {\r\n\t\t// we need to get the suggested string back to prefixed form\r\n\t\tsuggestedString = token.tokenPrefix + suggestedString.substring(token.tokenPrefixUri.length);\r\n\t} else {\r\n\t\t// it is a regular uri. add '<' and '>' to string\r\n\t\tvar queryPrefixes = yasqe.getPrefixesFromQuery();\r\n\t\tvar existingPrefix = _.filter(_.values(queryPrefixes), function (f) { return suggestedString.startsWith(f); });\r\n\t\tif (existingPrefix.length > 0) {\r\n\t\t\tvar prefixFound = _.findKey(queryPrefixes, function (val) { return val === existingPrefix[0]; });\r\n\t\t\tsuggestedString = prefixFound + \":\" + suggestedString.substring(queryPrefixes[prefixFound].length);\r\n\t\t} else {\r\n\t\t\tsuggestedString = \"<\" + suggestedString + \">\";\r\n\t\t}\r\n\t}\r\n\treturn suggestedString;\r\n};\r\n\r\nvar getCookie = function getCookie(cname) {\r\n\tvar name = cname + \"=\";\r\n\tvar ca = document.cookie.split(';');\r\n\tfor (var i = 0; i < ca.length; i++) {\r\n\t\tvar c = ca[i];\r\n\t\twhile (c.charAt(0) == ' ') c = c.substring(1);\r\n\t\tif (c.indexOf(name) == 0) return decodeURIComponent(c.substring(name.length, c.length));\r\n\t}\r\n\treturn \"\";\r\n};\r\n\r\n\r\nvar setupHeaders = function (backendRepositoryID) {\r\n\tvar port = window.location.port;\r\n\tif (!port) {\r\n\t\tif (window.location.protocol == 'https:') {\r\n\t\t\tport = \"443\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\tport = \"80\";\r\n\t\t}\r\n\t}\r\n\tvar headers = {};\r\n\tvar graphDBAuth = getCookie('com.ontotext.graphdb.auth' + port);\r\n\tif (graphDBAuth != '') {\r\n\t\theaders['X-AUTH-TOKEN'] = graphDBAuth;\r\n\t}\r\n\tif (backendRepositoryID) {\r\n\t\theaders['X-GraphDB-Repository'] = backendRepositoryID;\r\n\t}\r\n\t$.ajaxSetup({ headers: headers });\r\n};\r\n\r\n//Use protocol relative request when served via http[s]*. Otherwise (e.g. file://, fetch via http)\r\nvar reqProtocol = (window.location.protocol.indexOf('http') === 0 ? '//' : 'http://');\r\nvar fetchFromLov = function (yasqe, completer, token, callback) {\r\n\tif (!token || !token.string || token.string.trim().length == 0) {\r\n\t\tyasqe.autocompleters.notifications.getEl(completer)\r\n\t\t\t.empty()\r\n\t\t\t.append(\"Nothing to autocomplete yet!\");\r\n\t\treturn false;\r\n\t}\r\n\tvar maxResults = 50;\r\n\r\n\tvar args = {\r\n\t\tq: token.autocompletionString,\r\n\t\tpage: 1\r\n\t};\r\n\tif (completer.name == \"classes\") {\r\n\t\targs.type = \"class\";\r\n\t} else {\r\n\t\targs.type = \"property\";\r\n\t}\r\n\tvar results = [];\r\n\tvar url = \"\";\r\n\tvar updateUrl = function () {\r\n\t\turl = reqProtocol + \"lov.okfn.org/dataset/lov/api/v2/autocomplete/terms?\" + $.param(args);\r\n\t};\r\n\tupdateUrl();\r\n\tvar increasePage = function () {\r\n\t\targs.page++;\r\n\t\tupdateUrl();\r\n\t};\r\n\tvar doRequests = function () {\r\n\t\t$.get(\r\n\t\t\turl,\r\n\t\t\tfunction (data) {\r\n\t\t\t\tfor (var i = 0; i < data.results.length; i++) {\r\n\t\t\t\t\tif ($.isArray(data.results[i].uri) && data.results[i].uri.length > 0) {\r\n\t\t\t\t\t\tresults.push(data.results[i].uri[0]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tresults.push(data.results[i].uri);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\tif (results.length < data.total_results && results.length < maxResults) {\r\n\t\t\t\t\tincreasePage();\r\n\t\t\t\t\tdoRequests();\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//if notification bar is there, show feedback, or close\r\n\t\t\t\t\tif (results.length > 0) {\r\n\t\t\t\t\t\tyasqe.autocompleters.notifications.hide(yasqe, completer);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tyasqe.autocompleters.notifications.getEl(completer).text(\"0 matches found...\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcallback(results);\r\n\t\t\t\t\t// requests done! Don't call this function again\r\n\t\t\t\t}\r\n\t\t\t}).fail(function (jqXHR, textStatus, errorThrown) {\r\n\t\t\t\tyasqe.autocompleters.notifications.getEl(completer)\r\n\t\t\t\t\t.empty()\r\n\t\t\t\t\t.append(\"Failed fetching suggestions..\");\r\n\r\n\t\t\t});\r\n\t};\r\n\t//if notification bar is there, show a loader\r\n\tyasqe.autocompleters.notifications.getEl(completer)\r\n\t\t.empty()\r\n\t\t.append($(\"<span>Fetchting autocompletions &nbsp;</span>\"))\r\n\t\t.append($(yutils.svg.getElement(require('../imgs.js').loader)).addClass(\"notificationLoader\"));\r\n\tdoRequests();\r\n};\r\n\r\n\r\n\r\nmodule.exports = {\r\n\tfetchFromLov: fetchFromLov,\r\n\tpreprocessResourceTokenForCompletion: preprocessResourceTokenForCompletion,\r\n\tpostprocessResourceTokenForCompletion: postprocessResourceTokenForCompletion,\r\n\tgetCookie: getCookie,\r\n\tsetupHeaders: setupHeaders\r\n};\r\n",
    "'use strict';\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\nmodule.exports = function(yasqe) {\r\n\treturn {\r\n\t\tisValidCompletionPosition: function() {\r\n\t\t\tvar token = yasqe.getTokenAt(yasqe.getCursor());\r\n\t\t\tif (token.type != \"ws\") {\r\n\t\t\t\ttoken = yasqe.getCompleteToken(token);\r\n\t\t\t\tif (token && token.string.indexOf(\"?\") == 0) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t},\r\n\t\tget: function(token) {\r\n\t\t\tif (token.trim().length == 0) return []; //nothing to autocomplete\r\n\t\t\tvar distinctVars = {};\r\n\t\t\t//do this outside of codemirror. I expect jquery to be faster here (just finding dom elements with classnames)\r\n\t\t\t$(yasqe.getWrapperElement()).find(\".cm-atom\").each(function() {\r\n\t\t\t\tvar variable = this.innerHTML;\r\n\t\t\t\tif (variable.indexOf(\"?\") == 0) {\r\n\t\t\t\t\t//ok, lets check if the next element in the div is an atom as well. In that case, they belong together (may happen sometimes when query is not syntactically valid)\r\n\t\t\t\t\tvar nextEl = $(this).next();\r\n\t\t\t\t\tvar nextElClass = nextEl.attr('class');\r\n\t\t\t\t\tif (nextElClass && nextEl.attr('class').indexOf(\"cm-atom\") >= 0) {\r\n\t\t\t\t\t\tvariable += nextEl.text();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//skip single questionmarks\r\n\t\t\t\t\tif (variable.length <= 1) return;\r\n\r\n\t\t\t\t\t//it should match our token ofcourse\r\n\t\t\t\t\tif (variable.indexOf(token) !== 0) return;\r\n\r\n\t\t\t\t\t//skip exact matches\r\n\t\t\t\t\tif (variable == token) return;\r\n\r\n\t\t\t\t\t//store in map so we have a unique list \r\n\t\t\t\t\tdistinctVars[variable] = true;\r\n\r\n\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tvar variables = [];\r\n\t\t\tfor (var variable in distinctVars) {\r\n\t\t\t\tvariables.push(variable);\r\n\t\t\t}\r\n\t\t\tvariables.sort();\r\n\t\t\treturn variables;\r\n\t\t},\r\n\t\tasync: false,\r\n\t\tbulk: false,\r\n\t\tautoShow: true,\r\n\t}\r\n};",
    "var sparql = require('./sparql.js'),\r\n    $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\nvar quote = function(string) {\r\n  return \"'\" + string + \"'\";\r\n}\r\nmodule.exports = {\r\n  createCurlString : function(yasqe, config) {\r\n    var ajaxConfig = sparql.getAjaxConfig(yasqe, config);\r\n    var url = ajaxConfig.url;\r\n    if (ajaxConfig.url.indexOf('http') !== 0) {\r\n      //this is either a relative or absolute url, which is not supported by CURL.\r\n      //Add domain, schema, etc etc\r\n      var url = window.location.protocol + '//' + window.location.host;\r\n      if (ajaxConfig.url.indexOf('/') === 0) {\r\n        //its an absolute path\r\n        url += ajaxConfig.url;\r\n      } else {\r\n        //relative, so append current location to url first\r\n        url += window.location.pathname + ajaxConfig.url;\r\n      }\r\n    }\r\n    var cmds = [\r\n      'curl', url,\r\n      '-X', yasqe.options.sparql.requestMethod\r\n    ];\r\n    if (yasqe.options.sparql.requestMethod == 'POST') {\r\n      cmds.push('--data ' + quote($.param(ajaxConfig.data)));\r\n    }\r\n    for (var header in ajaxConfig.headers) {\r\n      cmds.push('-H ' + quote(header + ': ' + ajaxConfig.headers[header]));\r\n    }\r\n    return cmds.join(' ');\r\n  }\r\n}\r\n",
    "/**\r\n * The default options of YASQE (check the CodeMirror documentation for even\r\n * more options, such as disabling line numbers, or changing keyboard shortcut\r\n * keys). Either change the default options by setting YASQE.defaults, or by\r\n * passing your own options as second argument to the YASQE constructor\r\n */\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\r\n\tYASQE = require('./main.js');\r\nYASQE.defaults = $.extend(true, {}, YASQE.defaults, {\r\n\tmode: \"sparql11\",\r\n\t/**\r\n\t * Query string\r\n\t */\r\n\tvalue: \"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\\nSELECT * WHERE {\\n  ?sub ?pred ?obj .\\n} \\nLIMIT 10\",\r\n\thighlightSelectionMatches: {\r\n\t\tshowToken: /\\w/\r\n\t},\r\n\ttabMode: \"indent\",\r\n\tautoCloseBrackets: true,\r\n\tlineNumbers: true,\r\n\tlineWrapping: true,\r\n\tbackdrop: false,\r\n\tfoldGutter: {\r\n\t\trangeFinder: new YASQE.fold.combine(YASQE.fold.brace, YASQE.fold.prefix)\r\n\t},\r\n\tcollapsePrefixesOnLoad: false,\r\n\tgutters: [\"gutterErrorBar\", \"CodeMirror-linenumbers\", \"CodeMirror-foldgutter\"],\r\n\tmatchBrackets: true,\r\n\tfixedGutter: true,\r\n\tsyntaxErrorCheck: true,\r\n\t/**\r\n\t * Extra shortcut keys. Check the CodeMirror manual on how to add your own\r\n\t *\r\n\t * @property extraKeys\r\n\t * @type object\r\n\t */\r\n\textraKeys: {\r\n\t\t\"Alt-Enter\": YASQE.autoComplete,\r\n\t\t\"Ctrl-Space\": YASQE.autoComplete,\r\n\t\t\"Cmd-Space\": YASQE.autoComplete,\r\n\t\t\"Ctrl-D\": YASQE.deleteLine,\r\n\t\t\"Ctrl-K\": YASQE.deleteLine,\r\n\t\t\"Cmd-D\": YASQE.deleteLine,\r\n\t\t\"Cmd-K\": YASQE.deleteLine,\r\n\t\t\"Ctrl-/\": YASQE.commentLines,\r\n\t\t\"Cmd-/\": YASQE.commentLines,\r\n\t\t\"Ctrl-Alt-Down\": YASQE.copyLineDown,\r\n\t\t\"Ctrl-Alt-Up\": YASQE.copyLineUp,\r\n\t\t\"Cmd-Alt-Down\": YASQE.copyLineDown,\r\n\t\t\"Cmd-Alt-Up\": YASQE.copyLineUp,\r\n\t\t\"Shift-Ctrl-F\": YASQE.doAutoFormat,\r\n\t\t\"Shift-Cmd-F\": YASQE.doAutoFormat,\r\n\t\t\"Ctrl-]\": YASQE.indentMore,\r\n\t\t\"Cmd-]\": YASQE.indentMore,\r\n\t\t\"Ctrl-[\": YASQE.indentLess,\r\n\t\t\"Cmd-[\": YASQE.indentLess,\r\n\t\t\"Ctrl-S\": YASQE.storeQuery,\r\n\t\t\"Cmd-S\": YASQE.storeQuery,\r\n\t\t\"Ctrl-Enter\": YASQE.executeQuery,\r\n\t\t\"Cmd-Enter\": YASQE.executeQuery,\r\n\t\t\"F11\": function (yasqe) {\r\n\t\t\tyasqe.setOption(\"fullScreen\", !yasqe.getOption(\"fullScreen\"));\r\n\t\t},\r\n\t\t\"Esc\": function (yasqe) {\r\n\t\t\tif (yasqe.getOption(\"fullScreen\")) yasqe.setOption(\"fullScreen\", false);\r\n\t\t}\r\n\t},\r\n\tcursorHeight: 0.9,\r\n\r\n\r\n\t/**\r\n\t * Show a button with which users can create a link to this query. Set this value to null to disable this functionality.\r\n\t * By default, this feature is enabled, and the only the query value is appended to the link.\r\n\t * ps. This function should return an object which is parseable by jQuery.param (http://api.jquery.com/jQuery.param/)\r\n\t */\r\n\tcreateShareLink: YASQE.createShareLink,\r\n\r\n\tcreateShortLink: null,\r\n\r\n\t/**\r\n\t * Consume links shared by others, by checking the url for arguments coming from a query link. Defaults by only checking the 'query=' argument in the url\r\n\t */\r\n\tconsumeShareLink: YASQE.consumeShareLink,\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t * Change persistency settings for the YASQE query value. Setting the values\r\n\t * to null, will disable persistancy: nothing is stored between browser\r\n\t * sessions Setting the values to a string (or a function which returns a\r\n\t * string), will store the query in localstorage using the specified string.\r\n\t * By default, the ID is dynamically generated using the closest dom ID, to avoid collissions when using multiple YASQE items on one\r\n\t * page\r\n\t *\r\n\t * @type function|string\r\n\t */\r\n\tpersistent: function (yasqe) {\r\n\t\treturn \"yasqe_\" + $(yasqe.getWrapperElement()).closest('[id]').attr('id') + \"_queryVal\";\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Settings for querying sparql endpoints\r\n\t */\r\n\tsparql: {\r\n\t\tqueryName: function (yasqe) { return yasqe.getQueryMode() },\r\n\t\tshowQueryButton: false,\r\n\r\n\t\t/**f\r\n\t\t * Endpoint to query\r\n\t\t *\r\n\t\t * @property sparql.endpoint\r\n\t\t * @type String|function\r\n\t\t */\r\n\t\tendpoint: \"http://dbpedia.org/sparql\",\r\n\t\t/**\r\n\t\t * Request method via which to access SPARQL endpoint\r\n\t\t *\r\n\t\t * @property sparql.requestMethod\r\n\t\t * @type String|function\r\n\t\t */\r\n\t\trequestMethod: \"POST\",\r\n\r\n\t\t/**\r\n\t\t * @type String|function\r\n\t\t */\r\n\t\tacceptHeaderGraph: \"text/turtle,*/*;q=0.9\",\r\n\t\t/**\r\n\t\t * @type String|function\r\n\t\t */\r\n\t\tacceptHeaderSelect: \"application/sparql-results+json,*/*;q=0.9\",\r\n\t\t/**\r\n\t\t * @type String|function\r\n\t\t */\r\n\t\tacceptHeaderUpdate: \"text/plain,*/*;q=0.9\",\r\n\r\n\t\t/**\r\n\t\t * Named graphs to query.\r\n\t\t */\r\n\t\tnamedGraphs: [],\r\n\t\t/**\r\n\t\t * Default graphs to query.\r\n\t\t */\r\n\t\tdefaultGraphs: [],\r\n\r\n\t\t/**\r\n\t\t * Additional request arguments. Add them in the form: {name: \"name\", value: \"value\"}\r\n\t\t */\r\n\t\targs: [],\r\n\r\n\t\t/**\r\n\t\t * Additional request headers\r\n\t\t */\r\n\t\theaders: {},\r\n\r\n\t\tgetQueryForAjax: null,\r\n\t\t/**\r\n\t\t * Set of ajax callbacks\r\n\t\t */\r\n\t\tcallbacks: {\r\n\t\t\tbeforeSend: null,\r\n\t\t\tcomplete: null,\r\n\t\t\terror: null,\r\n\t\t\tsuccess: null\r\n\t\t},\r\n\t\thandlers: {} //keep here for backwards compatability\r\n\t},\r\n});\r\n",
    "//this is the entry-point for browserify.\r\n//the current browserify version does not support require-ing js files which are used as entry-point\r\n//this way, we can still require our main.js file\r\nmodule.exports = require('./main.js');",
    "'use strict';\r\nmodule.exports = {\r\n\tquery: '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" x=\"0px\" y=\"0px\" width=\"100%\" height=\"100%\" viewBox=\"0 0 80 80\" enable-background=\"new 0 0 80 80\" xml:space=\"preserve\"><g ></g><g >\t<path d=\"M64.622,2.411H14.995c-6.627,0-12,5.373-12,12v49.897c0,6.627,5.373,12,12,12h49.627c6.627,0,12-5.373,12-12V14.411   C76.622,7.783,71.249,2.411,64.622,2.411z M24.125,63.906V15.093L61,39.168L24.125,63.906z\"/></g></svg>',\r\n\tqueryInvalid: '<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"   x=\"0px\"   y=\"0px\"   width=\"100%\"   height=\"100%\"   viewBox=\"0 0 73.627 73.897\"   enable-background=\"new 0 0 80 80\"   xml:space=\"preserve\"      inkscape:version=\"0.48.4 r9939\"   sodipodi:docname=\"warning.svg\"><metadata     ><rdf:RDF><cc:Work         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /></cc:Work></rdf:RDF></metadata><defs      /><sodipodi:namedview     pagecolor=\"#ffffff\"     bordercolor=\"#666666\"     borderopacity=\"1\"     objecttolerance=\"10\"     gridtolerance=\"10\"     guidetolerance=\"10\"     inkscape:pageopacity=\"0\"     inkscape:pageshadow=\"2\"     inkscape:window-width=\"1855\"     inkscape:window-height=\"1056\"          showgrid=\"false\"     inkscape:zoom=\"3.1936344\"     inkscape:cx=\"36.8135\"     inkscape:cy=\"36.9485\"     inkscape:window-x=\"2625\"     inkscape:window-y=\"24\"     inkscape:window-maximized=\"1\"     inkscape:current-layer=\"svg2\" /><g     transform=\"translate(-2.995,-2.411)\"      /><g     transform=\"translate(-2.995,-2.411)\"     ><path       d=\"M 64.622,2.411 H 14.995 c -6.627,0 -12,5.373 -12,12 v 49.897 c 0,6.627 5.373,12 12,12 h 49.627 c 6.627,0 12,-5.373 12,-12 V 14.411 c 0,-6.628 -5.373,-12 -12,-12 z M 24.125,63.906 V 15.093 L 61,39.168 24.125,63.906 z\"       inkscape:connector-curvature=\"0\"        /></g><path     d=\"M 66.129381,65.903784 H 49.769875 c -1.64721,0 -2.889385,-0.581146 -3.498678,-1.63595 -0.609293,-1.055608 -0.491079,-2.422161 0.332391,-3.848223 l 8.179753,-14.167069 c 0.822934,-1.42633 1.9477,-2.211737 3.166018,-2.211737 1.218319,0 2.343086,0.785407 3.166019,2.211737 l 8.179751,14.167069 c 0.823472,1.426062 0.941686,2.792615 0.33239,3.848223 -0.609023,1.054804 -1.851197,1.63595 -3.498138,1.63595 z M 59.618815,60.91766 c 0,-0.850276 -0.68944,-1.539719 -1.539717,-1.539719 -0.850276,0 -1.539718,0.689443 -1.539718,1.539719 0,0.850277 0.689442,1.539718 1.539718,1.539718 0.850277,0 1.539717,-0.689441 1.539717,-1.539718 z m 0.04155,-9.265919 c 0,-0.873061 -0.707939,-1.580998 -1.580999,-1.580998 -0.873061,0 -1.580999,0.707937 -1.580999,1.580998 l 0.373403,5.610965 h 0.0051 c 0.05415,0.619747 0.568548,1.10761 1.202504,1.10761 0.586239,0 1.075443,-0.415756 1.188563,-0.968489 0.0092,-0.04476 0.0099,-0.09248 0.01392,-0.138854 h 0.01072 l 0.367776,-5.611232 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#aa8800\" /></svg>',\r\n\tdownload: '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" baseProfile=\"tiny\" x=\"0px\" y=\"0px\" width=\"100%\" height=\"100%\" viewBox=\"0 0 100 100\" xml:space=\"preserve\"><g ></g><g >\t<path fill-rule=\"evenodd\" fill=\"#000000\" d=\"M88,84v-2c0-2.961-0.859-4-4-4H16c-2.961,0-4,0.98-4,4v2c0,3.102,1.039,4,4,4h68   C87.02,88,88,87.039,88,84z M58,12H42c-5,0-6,0.941-6,6v22H16l34,34l34-34H64V18C64,12.941,62.939,12,58,12z\"/></g></svg>',\r\n\tshare: '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\"  x=\"0px\" y=\"0px\" width=\"100%\" height=\"100%\" viewBox=\"0 0 100 100\" style=\"enable-background:new 0 0 100 100;\" xml:space=\"preserve\"><path d=\"M36.764,50c0,0.308-0.07,0.598-0.088,0.905l32.247,16.119c2.76-2.338,6.293-3.797,10.195-3.797  C87.89,63.228,95,70.338,95,79.109C95,87.89,87.89,95,79.118,95c-8.78,0-15.882-7.11-15.882-15.891c0-0.316,0.07-0.598,0.088-0.905  L31.077,62.085c-2.769,2.329-6.293,3.788-10.195,3.788C12.11,65.873,5,58.771,5,50c0-8.78,7.11-15.891,15.882-15.891  c3.902,0,7.427,1.468,10.195,3.797l32.247-16.119c-0.018-0.308-0.088-0.598-0.088-0.914C63.236,12.11,70.338,5,79.118,5  C87.89,5,95,12.11,95,20.873c0,8.78-7.11,15.891-15.882,15.891c-3.911,0-7.436-1.468-10.195-3.806L36.676,49.086  C36.693,49.394,36.764,49.684,36.764,50z\"/></svg>',\r\n\twarning: '<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"   x=\"0px\"   y=\"0px\"   viewBox=\"0 0 66.399998 66.399998\"   enable-background=\"new 0 0 69.3 69.3\"   xml:space=\"preserve\"   height=\"100%\"   width=\"100%\"   inkscape:version=\"0.48.4 r9939\"   ><g      transform=\"translate(-1.5,-1.5)\"     style=\"fill:#ff0000\"><path       d=\"M 34.7,1.5 C 16.4,1.5 1.5,16.4 1.5,34.7 1.5,53 16.4,67.9 34.7,67.9 53,67.9 67.9,53 67.9,34.7 67.9,16.4 53,1.5 34.7,1.5 z m 0,59.4 C 20.2,60.9 8.5,49.1 8.5,34.7 8.5,20.2 20.3,8.5 34.7,8.5 c 14.4,0 26.2,11.8 26.2,26.2 0,14.4 -11.8,26.2 -26.2,26.2 z\"      inkscape:connector-curvature=\"0\"       style=\"fill:#ff0000\" /><path       d=\"m 34.6,47.1 c -1.4,0 -2.5,0.5 -3.5,1.5 -0.9,1 -1.4,2.2 -1.4,3.6 0,1.6 0.5,2.8 1.5,3.8 1,0.9 2.1,1.3 3.4,1.3 1.3,0 2.4,-0.5 3.4,-1.4 1,-0.9 1.5,-2.2 1.5,-3.7 0,-1.4 -0.5,-2.6 -1.4,-3.6 -0.9,-1 -2.1,-1.5 -3.5,-1.5 z\"       inkscape:connector-curvature=\"0\"       style=\"fill:#ff0000\" /><path       d=\"m 34.8,13.9 c -1.5,0 -2.8,0.5 -3.7,1.6 -0.9,1 -1.4,2.4 -1.4,4.2 0,1.1 0.1,2.9 0.2,5.6 l 0.8,13.1 c 0.2,1.8 0.4,3.2 0.9,4.1 0.5,1.2 1.5,1.8 2.9,1.8 1.3,0 2.3,-0.7 2.9,-1.9 0.5,-1 0.7,-2.3 0.9,-4 L 39.4,25 c 0.1,-1.3 0.2,-2.5 0.2,-3.8 0,-2.2 -0.3,-3.9 -0.8,-5.1 -0.5,-1 -1.6,-2.2 -4,-2.2 z\"       inkscape:connector-curvature=\"0\"       style=\"fill:#ff0000\" /></g></svg>',\r\n\tfullscreen: '<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"      x=\"0px\"   y=\"0px\"   width=\"100%\"   height=\"100%\"   viewBox=\"5 -10 74.074074 100\"   enable-background=\"new 0 0 100 100\"   xml:space=\"preserve\"   inkscape:version=\"0.48.4 r9939\"   sodipodi:docname=\"noun_2186_cc.svg\"><metadata     ><rdf:RDF><cc:Work         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /></cc:Work></rdf:RDF></metadata><defs      /><sodipodi:namedview     pagecolor=\"#ffffff\"     bordercolor=\"#666666\"     borderopacity=\"1\"     objecttolerance=\"10\"     gridtolerance=\"10\"     guidetolerance=\"10\"     inkscape:pageopacity=\"0\"     inkscape:pageshadow=\"2\"     inkscape:window-width=\"640\"     inkscape:window-height=\"480\"          showgrid=\"false\"     fit-margin-top=\"0\"     fit-margin-left=\"0\"     fit-margin-right=\"0\"     fit-margin-bottom=\"0\"     inkscape:zoom=\"2.36\"     inkscape:cx=\"44.101509\"     inkscape:cy=\"31.481481\"     inkscape:window-x=\"65\"     inkscape:window-y=\"24\"     inkscape:window-maximized=\"0\"     inkscape:current-layer=\"Layer_1\" /><path     d=\"m -7.962963,-10 v 38.889 l 16.667,-16.667 16.667,16.667 5.555,-5.555 -16.667,-16.667 16.667,-16.667 h -38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 92.037037,-10 v 38.889 l -16.667,-16.667 -16.666,16.667 -5.556,-5.555 16.666,-16.667 -16.666,-16.667 h 38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"M -7.962963,90 V 51.111 l 16.667,16.666 16.667,-16.666 5.555,5.556 -16.667,16.666 16.667,16.667 h -38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"M 92.037037,90 V 51.111 l -16.667,16.666 -16.666,-16.666 -5.556,5.556 16.666,16.666 -16.666,16.667 h 38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /></svg>',\r\n\tsmallscreen: '<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"      x=\"0px\"   y=\"0px\"   width=\"100%\"   height=\"100%\"   viewBox=\"5 -10 74.074074 100\"   enable-background=\"new 0 0 100 100\"   xml:space=\"preserve\"   inkscape:version=\"0.48.4 r9939\"   sodipodi:docname=\"noun_2186_cc.svg\"><metadata     ><rdf:RDF><cc:Work         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /></cc:Work></rdf:RDF></metadata><defs      /><sodipodi:namedview     pagecolor=\"#ffffff\"     bordercolor=\"#666666\"     borderopacity=\"1\"     objecttolerance=\"10\"     gridtolerance=\"10\"     guidetolerance=\"10\"     inkscape:pageopacity=\"0\"     inkscape:pageshadow=\"2\"     inkscape:window-width=\"1855\"     inkscape:window-height=\"1056\"          showgrid=\"false\"     fit-margin-top=\"0\"     fit-margin-left=\"0\"     fit-margin-right=\"0\"     fit-margin-bottom=\"0\"     inkscape:zoom=\"2.36\"     inkscape:cx=\"44.101509\"     inkscape:cy=\"31.481481\"     inkscape:window-x=\"65\"     inkscape:window-y=\"24\"     inkscape:window-maximized=\"1\"     inkscape:current-layer=\"Layer_1\" /><path     d=\"m 30.926037,28.889 0,-38.889 -16.667,16.667 -16.667,-16.667 -5.555,5.555 16.667,16.667 -16.667,16.667 38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 53.148037,28.889 0,-38.889 16.667,16.667 16.666,-16.667 5.556,5.555 -16.666,16.667 16.666,16.667 -38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 30.926037,51.111 0,38.889 -16.667,-16.666 -16.667,16.666 -5.555,-5.556 16.667,-16.666 -16.667,-16.667 38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 53.148037,51.111 0,38.889 16.667,-16.666 16.666,16.666 5.556,-5.556 -16.666,-16.666 16.666,-16.667 -38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /></svg>',\r\n};\r\n",
    "'use strict';\r\n//make sure any console statements\r\nwindow.console = window.console || {\r\n\t\"log\": function () { }\r\n};\r\n\r\n/**\r\n * Load libraries\r\n */\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\r\n\tCodeMirror = (function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})(),\r\n\tutils = require('./utils.js'),\r\n\tyutils = require('yasgui-utils'),\r\n\timgs = require('./imgs.js');\r\n\r\nrequire(\"../lib/deparam.js\");\r\nrequire('codemirror/addon/fold/foldcode.js');\r\nrequire('codemirror/addon/fold/foldgutter.js');\r\nrequire('codemirror/addon/fold/xml-fold.js');\r\nrequire('codemirror/addon/fold/brace-fold.js');\r\nrequire('./prefixFold.js');\r\nrequire('codemirror/addon/hint/show-hint.js');\r\nrequire('codemirror/addon/search/searchcursor.js');\r\nrequire('codemirror/addon/edit/matchbrackets.js');\r\nrequire('codemirror/addon/runmode/runmode.js');\r\nrequire('codemirror/addon/display/fullscreen.js');\r\nrequire('../lib/grammar/tokenizer.js');\r\nrequire('codemirror/addon/edit/closebrackets.js');\r\n\r\n\r\n\r\n/**\r\n * Main YASQE constructor. Pass a DOM element as argument to append the editor to, and (optionally) pass along config settings (see the YASQE.defaults object below, as well as the regular CodeMirror documentation, for more information on configurability)\r\n *\r\n * @constructor\r\n * @param {DOM-Element} parent element to append editor to.\r\n * @param {object} settings\r\n * @class YASQE\r\n * @return {doc} YASQE document\r\n */\r\nvar root = module.exports = function (parent, config) {\r\n\tvar rootEl = $(\"<div>\", {\r\n\t\tclass: 'yasqe'\r\n\t}).appendTo($(parent));\r\n\tconfig = extendConfig(config);\r\n\tvar yasqe = extendCmInstance(CodeMirror(rootEl[0], config));\r\n\tpostProcessCmElement(yasqe);\r\n\treturn yasqe;\r\n};\r\n\r\n/**\r\n * Extend config object, which we will pass on to the CM constructor later on.\r\n * Need this, to make sure our own 'onBlur' etc events do not get overwritten by\r\n * people who add their own onblur events to the config Additionally, need this\r\n * to include the CM defaults ourselves. CodeMirror has a method for including\r\n * defaults, but we can't rely on that one: it assumes flat config object, where\r\n * we have nested objects (e.g. the persistency option)\r\n *\r\n * @private\r\n */\r\nvar extendConfig = function (config) {\r\n\tvar extendedConfig = $.extend(true, {}, root.defaults, config);\r\n\r\n\t// I know, codemirror deals with  default options as well.\r\n\t//However, it does not do this recursively (i.e. the persistency option)\r\n\r\n\r\n\treturn extendedConfig;\r\n};\r\n/**\r\n * Add extra functions to the CM document (i.e. the codemirror instantiated\r\n * object)\r\n *\r\n * @private\r\n */\r\nvar extendCmInstance = function (yasqe) {\r\n\t//instantiate autocompleters\r\n\tyasqe.autocompleters = require('./autocompleters/autocompleterBase.js')(root, yasqe);\r\n\tif (yasqe.options.autocompleters) {\r\n\t\tyasqe.options.autocompleters.forEach(function (name) {\r\n\t\t\tif (root.Autocompleters[name]) yasqe.autocompleters.init(name, root.Autocompleters[name]);\r\n\t\t})\r\n\t}\r\n\tyasqe.lastQueryDuration = null;\r\n\tyasqe.getCompleteToken = function (token, cur) {\r\n\t\treturn require('./tokenUtils.js').getCompleteToken(yasqe, token, cur);\r\n\t};\r\n\tyasqe.getPreviousNonWsToken = function (line, token) {\r\n\t\treturn require('./tokenUtils.js').getPreviousNonWsToken(yasqe, line, token);\r\n\t};\r\n\tyasqe.getNextNonWsToken = function (lineNumber, charNumber) {\r\n\t\treturn require('./tokenUtils.js').getNextNonWsToken(yasqe, lineNumber, charNumber);\r\n\t};\r\n\tyasqe.collapsePrefixes = function (collapse) {\r\n\t\tif (collapse === undefined) collapse = true;\r\n\t\tyasqe.foldCode(require('./prefixFold.js').findFirstPrefixLine(yasqe), root.fold.prefix, (collapse ? \"fold\" : \"unfold\"));\r\n\t};\r\n\tvar backdrop = null;\r\n\tvar animateSpeed = null;\r\n\tyasqe.setBackdrop = function (show) {\r\n\r\n\r\n\t\tif (yasqe.options.backdrop || yasqe.options.backdrop === 0 || yasqe.options.backdrop === '0') {\r\n\t\t\tif (animateSpeed === null) {\r\n\t\t\t\tanimateSpeed = +yasqe.options.backdrop;\r\n\t\t\t\tif (animateSpeed === 1) {\r\n\t\t\t\t\t//ah, yasqe.options.backdrop was 'true'. Set this to default animate speed 400\r\n\t\t\t\t\tanimateSpeed = 400;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif (!backdrop) {\r\n\t\t\t\tbackdrop = $('<div>', {\r\n\t\t\t\t\tclass: 'backdrop'\r\n\t\t\t\t})\r\n\t\t\t\t\t.click(function () {\r\n\t\t\t\t\t\t$(this).hide();\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.insertAfter($(yasqe.getWrapperElement()));\r\n\t\t\t}\r\n\t\t\tif (show) {\r\n\t\t\t\tbackdrop.show(animateSpeed);\r\n\t\t\t} else {\r\n\t\t\t\tbackdrop.hide(animateSpeed);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t/**\r\n\t * Execute query. Pass a callback function, or a configuration object (see\r\n\t * default settings below for possible values) I.e., you can change the\r\n\t * query configuration by either changing the default settings, changing the\r\n\t * settings of this document, or by passing query settings to this function\r\n\t *\r\n\t * @method doc.query\r\n\t * @param function|object\r\n\t */\r\n\tyasqe.query = function (callbackOrConfig) {\r\n\t\troot.executeQuery(yasqe, callbackOrConfig);\r\n\t};\r\n\r\n\tyasqe.getUrlArguments = function (config) {\r\n\t\treturn root.getUrlArguments(yasqe, config);\r\n\t};\r\n\r\n\t/**\r\n\t * Fetch defined prefixes from query string\r\n\t *\r\n\t * @method doc.getPrefixesFromQuery\r\n\t * @return object\r\n\t */\r\n\tyasqe.getPrefixesFromQuery = function () {\r\n\t\treturn require('./prefixUtils.js').getPrefixesFromQuery(yasqe);\r\n\t};\r\n\r\n\tyasqe.addPrefixes = function (prefixes) {\r\n\t\treturn require('./prefixUtils.js').addPrefixes(yasqe, prefixes);\r\n\t};\r\n\tyasqe.removePrefixes = function (prefixes) {\r\n\t\treturn require('./prefixUtils.js').removePrefixes(yasqe, prefixes);\r\n\t};\r\n\r\n\tyasqe.getValueWithoutComments = function () {\r\n\t\tvar cleanedQuery = \"\";\r\n\t\troot.runMode(yasqe.getValue(), \"sparql11\", function (stringVal, className) {\r\n\t\t\tif (className != \"comment\") {\r\n\t\t\t\tcleanedQuery += stringVal;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn cleanedQuery;\r\n\t};\r\n\t/**\r\n\t * Fetch the query type (e.g., SELECT||DESCRIBE||INSERT||DELETE||ASK||CONSTRUCT)\r\n\t *\r\n\t * @method doc.getQueryType\r\n\t * @return string\r\n\t *\r\n\t */\r\n\tyasqe.getQueryType = function () {\r\n\t\treturn yasqe.queryType;\r\n\t};\r\n\t/**\r\n\t * Fetch the query mode: 'query' or 'update'\r\n\t *\r\n\t * @method doc.getQueryMode\r\n\t * @return string\r\n\t *\r\n\t */\r\n\tyasqe.getQueryMode = function () {\r\n\t\tvar type = yasqe.getQueryType();\r\n\t\tif (type == \"INSERT\" || type == \"DELETE\" || type == \"LOAD\" || type == \"CLEAR\" || type == \"CREATE\" || type == \"DROP\" || type == \"COPY\" || type == \"MOVE\" || type == \"ADD\") {\r\n\t\t\treturn \"update\";\r\n\t\t} else {\r\n\t\t\treturn \"query\";\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tyasqe.setCheckSyntaxErrors = function (isEnabled) {\r\n\t\tyasqe.options.syntaxErrorCheck = isEnabled;\r\n\t\tcheckSyntax(yasqe);\r\n\t};\r\n\r\n\tyasqe.enableCompleter = function (name) {\r\n\t\taddCompleterToSettings(yasqe.options, name);\r\n\t\tif (root.Autocompleters[name]) yasqe.autocompleters.init(name, root.Autocompleters[name]);\r\n\t};\r\n\tyasqe.disableCompleter = function (name) {\r\n\t\tremoveCompleterFromSettings(yasqe.options, name);\r\n\t};\r\n\treturn yasqe;\r\n};\r\n\r\nvar addCompleterToSettings = function (settings, name) {\r\n\tif (!settings.autocompleters) settings.autocompleters = [];\r\n\tsettings.autocompleters.push(name);\r\n};\r\nvar removeCompleterFromSettings = function (settings, name) {\r\n\tif (typeof settings.autocompleters == \"object\") {\r\n\t\tvar index = $.inArray(name, settings.autocompleters);\r\n\t\tif (index >= 0) {\r\n\t\t\tsettings.autocompleters.splice(index, 1);\r\n\t\t\tremoveCompleterFromSettings(settings, name); //just in case. suppose 1 completer is listed twice\r\n\t\t}\r\n\t}\r\n};\r\nvar postProcessCmElement = function (yasqe) {\r\n\t/**\r\n\t * Set doc value\r\n\t */\r\n\tvar storageId = utils.getPersistencyId(yasqe, yasqe.options.persistent);\r\n\tif (storageId) {\r\n\t\tvar valueFromStorage = yutils.storage.get(storageId);\r\n\t\tif (valueFromStorage)\r\n\t\t\tyasqe.setValue(valueFromStorage);\r\n\t}\r\n\r\n\troot.drawButtons(yasqe);\r\n\r\n\t/**\r\n\t * Add event handlers\r\n\t */\r\n\tyasqe.on('blur', function (yasqe, eventInfo) {\r\n\t\troot.storeQuery(yasqe);\r\n\t});\r\n\tyasqe.on('change', function (yasqe, eventInfo) {\r\n\t\tcheckSyntax(yasqe);\r\n\t\troot.updateQueryButton(yasqe);\r\n\t\troot.positionButtons(yasqe);\r\n\t});\r\n\tyasqe.on('changes', function () {\r\n\t\t//e.g. on paste\r\n\t\tcheckSyntax(yasqe);\r\n\t\troot.updateQueryButton(yasqe);\r\n\t\troot.positionButtons(yasqe);\r\n\t});\r\n\r\n\tyasqe.on('cursorActivity', function (yasqe, eventInfo) {\r\n\t\tupdateButtonsTransparency(yasqe);\r\n\t});\r\n\tyasqe.prevQueryValid = false;\r\n\tcheckSyntax(yasqe); // on first load, check as well (our stored or default query might be incorrect)\r\n\troot.positionButtons(yasqe);\r\n\r\n\t$(yasqe.getWrapperElement()).on('mouseenter', '.cm-atom', function () {\r\n\t\tvar matchText = $(this).text();\r\n\t\t$(yasqe.getWrapperElement()).find('.cm-atom').filter(function () {\r\n\t\t\treturn $(this).text() === matchText;\r\n\t\t}).addClass('matchingVar');\r\n\t}).on('mouseleave', '.cm-atom', function () {\r\n\t\t$(yasqe.getWrapperElement()).find('.matchingVar').removeClass('matchingVar');\r\n\t});\r\n\t/**\r\n\t * check url args and modify yasqe settings if needed\r\n\t */\r\n\tif (yasqe.options.consumeShareLink) {\r\n\t\tyasqe.options.consumeShareLink(yasqe, getUrlParams());\r\n\t\t//and: add a hash listener!\r\n\t\twindow.addEventListener(\"hashchange\", function () {\r\n\t\t\tyasqe.options.consumeShareLink(yasqe, getUrlParams());\r\n\t\t});\r\n\t}\r\n\tif (yasqe.options.collapsePrefixesOnLoad) yasqe.collapsePrefixes(true);\r\n};\r\n\r\n/**\r\n * get url params. first try fetching using hash. If it fails, try the regular query parameters (for backwards compatability)\r\n */\r\nvar getUrlParams = function () {\r\n\t//first try hash\r\n\tvar urlParams = null;\r\n\tif (window.location.hash.length > 1) {\r\n\t\t//firefox does some decoding if we're using window.location.hash (e.g. the + sign in contentType settings)\r\n\t\t//Don't want this. So simply get the hash string ourselves\r\n\t\turlParams = $.deparam(location.href.split(\"#\")[1])\r\n\t}\r\n\tif ((!urlParams || !('query' in urlParams)) && window.location.search.length > 1) {\r\n\t\t//ok, then just try regular url params\r\n\t\turlParams = $.deparam(window.location.search.substring(1));\r\n\t}\r\n\treturn urlParams;\r\n};\r\n\r\n\r\n\r\n/**\r\n * Update transparency of buttons. Increase transparency when cursor is below buttons\r\n */\r\n\r\nvar updateButtonsTransparency = function (yasqe) {\r\n\tyasqe.cursor = $(\".CodeMirror-cursor\");\r\n\tif (yasqe.buttons && yasqe.buttons.is(\":visible\") && yasqe.cursor.length > 0) {\r\n\t\tif (utils.elementsOverlap(yasqe.cursor, yasqe.buttons)) {\r\n\t\t\tyasqe.buttons.find(\"svg\").attr(\"opacity\", \"0.2\");\r\n\t\t} else {\r\n\t\t\tyasqe.buttons.find(\"svg\").attr(\"opacity\", \"1.0\");\r\n\t\t}\r\n\t}\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar clearError = null;\r\nvar checkSyntax = function (yasqe, deepcheck) {\r\n\r\n\tyasqe.queryValid = true;\r\n\r\n\tyasqe.clearGutter(\"gutterErrorBar\");\r\n\r\n\tvar state = null;\r\n\tfor (var l = 0; l < yasqe.lineCount(); ++l) {\r\n\t\tvar precise = false;\r\n\t\tif (!yasqe.prevQueryValid) {\r\n\t\t\t// we don't want cached information in this case, otherwise the\r\n\t\t\t// previous error sign might still show up,\r\n\t\t\t// even though the syntax error might be gone already\r\n\t\t\tprecise = true;\r\n\t\t}\r\n\r\n\t\tvar token = yasqe.getTokenAt({\r\n\t\t\tline: l,\r\n\t\t\tch: yasqe.getLine(l).length\r\n\t\t}, precise);\r\n\t\tvar state = token.state;\r\n\t\tyasqe.queryType = state.queryType;\r\n\t\tif (state.OK == false) {\r\n\t\t\tif (!yasqe.options.syntaxErrorCheck) {\r\n\t\t\t\t//the library we use already marks everything as being an error. Overwrite this class attribute.\r\n\t\t\t\t$(yasqe.getWrapperElement).find(\".sp-error\").css(\"color\", \"black\");\r\n\t\t\t\t//we don't want to gutter error, so return\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar warningEl = yutils.svg.getElement(imgs.warning);\r\n\t\t\tif (state.possibleCurrent && state.possibleCurrent.length > 0) {\r\n\t\t\t\t//\t\t\t\twarningEl.style.zIndex = \"99999999\";\r\n\t\t\t\trequire('./tooltip')(yasqe, warningEl, function () {\r\n\t\t\t\t\tvar expectedEncoded = [];\r\n\t\t\t\t\tstate.possibleCurrent.forEach(function (expected) {\r\n\t\t\t\t\t\texpectedEncoded.push(\"<strong style='text-decoration:underline'>\" + $(\"<div/>\").text(expected).html() + \"</strong>\");\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn \"This line is invalid. Expected: \" + expectedEncoded.join(\", \");\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\twarningEl.style.marginTop = \"2px\";\r\n\t\t\twarningEl.style.marginLeft = \"2px\";\r\n\t\t\twarningEl.className = 'parseErrorIcon';\r\n\t\t\tyasqe.setGutterMarker(l, \"gutterErrorBar\", warningEl);\r\n\r\n\t\t\tyasqe.queryValid = false;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tyasqe.prevQueryValid = yasqe.queryValid;\r\n\tif (deepcheck) {\r\n\t\tif (state != null && state.stack != undefined) {\r\n\t\t\tvar stack = state.stack,\r\n\t\t\t\tlen = state.stack.length;\r\n\t\t\t// Because incremental parser doesn't receive end-of-input\r\n\t\t\t// it can't clear stack, so we have to check that whatever\r\n\t\t\t// is left on the stack is nillable\r\n\t\t\tif (len > 1)\r\n\t\t\t\tyasqe.queryValid = false;\r\n\t\t\telse if (len == 1) {\r\n\t\t\t\tif (stack[0] != \"solutionModifier\" && stack[0] != \"?limitOffsetClauses\" && stack[0] != \"?offsetClause\")\r\n\t\t\t\t\tyasqe.queryValid = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n/**\r\n * Static Utils\r\n */\r\n// first take all CodeMirror references and store them in the YASQE object\r\n$.extend(root, CodeMirror);\r\n\r\n\r\n//add registrar for autocompleters\r\nroot.Autocompleters = {};\r\nroot.registerAutocompleter = function (name, constructor) {\r\n\troot.Autocompleters[name] = constructor;\r\n\taddCompleterToSettings(root.defaults, name);\r\n}\r\n\r\nroot.autoComplete = function (yasqe) {\r\n\t//this function gets called when pressing the keyboard shortcut. I.e., autoShow = false\r\n\tyasqe.autocompleters.autoComplete(false);\r\n};\r\n//include the autocompleters we provide out-of-the-box\r\n//root.registerAutocompleter(\"prefixes\", require(\"./autocompleters/prefixes.js\"));\r\nroot.registerAutocompleter(\"sesame-prefixes\", require(\"./autocompleters/sesame-prefixes.js\"));\r\nroot.registerAutocompleter(\"localNames\", require(\"./autocompleters/localNames.js\"));\r\nroot.registerAutocompleter(\"properties\", require(\"./autocompleters/properties.js\"));\r\nroot.registerAutocompleter(\"classes\", require(\"./autocompleters/classes.js\"));\r\nroot.registerAutocompleter(\"standard\", require(\"./autocompleters/standard.js\"));\r\nroot.registerAutocompleter(\"variables\", require(\"./autocompleters/variables.js\"));\r\n\r\n\r\nroot.positionButtons = function (yasqe) {\r\n\tvar scrollBar = $(yasqe.getWrapperElement()).find(\".CodeMirror-vscrollbar\");\r\n\tvar offset = 0;\r\n\tif (scrollBar.is(\":visible\")) {\r\n\t\toffset = scrollBar.outerWidth();\r\n\t}\r\n\tif (yasqe.buttons.is(\":visible\")) yasqe.buttons.css(\"right\", offset + 4);\r\n};\r\n\r\n/**\r\n * Create a share link\r\n *\r\n * @method YASQE.createShareLink\r\n * @param {doc} YASQE document\r\n * @default {query: doc.getValue()}\r\n * @return object\r\n */\r\nroot.createShareLink = function (yasqe) {\r\n\t//extend existing link, so first fetch current arguments\r\n\tvar urlParams = {};\r\n\tif (window.location.hash.length > 1) urlParams = $.deparam(window.location.hash.substring(1));\r\n\turlParams['query'] = yasqe.getValue();\r\n\treturn urlParams;\r\n};\r\nroot.getAsCurl = function (yasqe, ajaxConfig) {\r\n\tvar curl = require('./curl.js');\r\n\treturn curl.createCurlString(yasqe, ajaxConfig);\r\n};\r\n/**\r\n * Consume the share link, by parsing the document URL for possible yasqe arguments, and setting the appropriate values in the YASQE doc\r\n *\r\n * @method YASQE.consumeShareLink\r\n * @param {doc} YASQE document\r\n */\r\nroot.consumeShareLink = function (yasqe, urlParams) {\r\n\tif (urlParams && urlParams.query) {\r\n\t\tyasqe.setValue(urlParams.query);\r\n\t}\r\n};\r\nroot.drawButtons = function (yasqe) {\r\n\tyasqe.buttons = $(\"<div class='yasqe_buttons'></div>\").appendTo($(yasqe.getWrapperElement()));\r\n\r\n\t/**\r\n\t * draw share link button\r\n\t */\r\n\tif (yasqe.options.createShareLink) {\r\n\r\n\t\tvar svgShare = $(yutils.svg.getElement(imgs.share));\r\n\t\tsvgShare.click(function (event) {\r\n\t\t\tevent.stopPropagation();\r\n\t\t\tvar popup = $(\"<div class='yasqe_sharePopup'></div>\").appendTo(yasqe.buttons);\r\n\t\t\t$('html').click(function () {\r\n\t\t\t\tif (popup) popup.remove();\r\n\t\t\t});\r\n\r\n\t\t\tpopup.click(function (event) {\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t});\r\n\t\t\tvar $input = $(\"<input>\").val(location.protocol + '//' + location.host + location.pathname + location.search + \"#\" + $.param(yasqe.options.createShareLink(yasqe)));\r\n\r\n\t\t\t$input.focus(function () {\r\n\t\t\t\tvar $this = $(this);\r\n\t\t\t\t$this.select();\r\n\r\n\t\t\t\t// Work around Chrome's little problem\r\n\t\t\t\t$this.mouseup(function () {\r\n\t\t\t\t\t// Prevent further mouseup intervention\r\n\t\t\t\t\t$this.unbind(\"mouseup\");\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\tpopup.empty().append($('<div>', { class: 'inputWrapper' }).append($input));\r\n\t\t\tif (yasqe.options.createShortLink) {\r\n\t\t\t\tpopup.addClass('enableShort');\r\n\t\t\t\t$('<button>Shorten</button>')\r\n\t\t\t\t\t.addClass('yasqe_btn yasqe_btn-sm yasqe_btn-primary')\r\n\t\t\t\t\t.click(function () {\r\n\t\t\t\t\t\t$(this).parent().find('button').attr('disabled', 'disabled');\r\n\t\t\t\t\t\tyasqe.options.createShortLink($input.val(), function (errString, shortLink) {\r\n\t\t\t\t\t\t\tif (errString) {\r\n\t\t\t\t\t\t\t\t$input.remove();\r\n\t\t\t\t\t\t\t\tpopup.find('.inputWrapper').append($('<span>', { class: \"shortlinkErr\" }).text(errString));\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t$input.val(shortLink).focus();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}).appendTo(popup);\r\n\t\t\t}\r\n\t\t\t$('<button>CURL</button>')\r\n\t\t\t\t.addClass('yasqe_btn yasqe_btn-sm yasqe_btn-primary')\r\n\t\t\t\t.click(function () {\r\n\r\n\t\t\t\t\t$(this).parent().find('button').attr('disabled', 'disabled');\r\n\t\t\t\t\t$input.val(root.getAsCurl(yasqe)).focus();\r\n\t\t\t\t}).appendTo(popup);\r\n\t\t\tvar positions = svgShare.position();\r\n\t\t\tpopup.css(\"top\", (positions.top + svgShare.outerHeight() + parseInt(popup.css('padding-top'))) + \"px\").css(\"left\", ((positions.left + svgShare.outerWidth()) - popup.outerWidth()) + \"px\");\r\n\t\t\t$input.focus();\r\n\t\t})\r\n\t\t\t.addClass(\"yasqe_share\")\r\n\t\t\t.attr(\"title\", \"Share your query\")\r\n\t\t\t.appendTo(yasqe.buttons);\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * draw fullscreen button\r\n\t */\r\n\r\n\tvar toggleFullscreen = $('<div>', {\r\n\t\tclass: 'fullscreenToggleBtns'\r\n\t})\r\n\t\t.append($(yutils.svg.getElement(imgs.fullscreen))\r\n\t\t\t.addClass(\"yasqe_fullscreenBtn\")\r\n\t\t\t.attr(\"title\", \"Set editor full screen\")\r\n\t\t\t.click(function () {\r\n\t\t\t\tyasqe.setOption(\"fullScreen\", true);\r\n\t\t\t}))\r\n\t\t.append($(yutils.svg.getElement(imgs.smallscreen))\r\n\t\t\t.addClass(\"yasqe_smallscreenBtn\")\r\n\t\t\t.attr(\"title\", \"Set editor to normale size\")\r\n\t\t\t.click(function () {\r\n\t\t\t\tyasqe.setOption(\"fullScreen\", false);\r\n\t\t\t}))\r\n\tyasqe.buttons.append(toggleFullscreen);\r\n\r\n\r\n\tif (yasqe.options.sparql.showQueryButton) {\r\n\t\t$(\"<div>\", {\r\n\t\t\tclass: 'yasqe_queryButton'\r\n\t\t})\r\n\t\t\t.click(function () {\r\n\t\t\t\tif ($(this).hasClass(\"query_busy\")) {\r\n\t\t\t\t\tif (yasqe.xhr) yasqe.xhr.abort();\r\n\t\t\t\t\troot.updateQueryButton(yasqe);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tyasqe.query();\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.appendTo(yasqe.buttons);\r\n\t\troot.updateQueryButton(yasqe);\r\n\t}\r\n\r\n};\r\n\r\n\r\nvar queryButtonIds = {\r\n\t\"busy\": \"loader\",\r\n\t\"valid\": \"query\",\r\n\t\"error\": \"queryInvalid\"\r\n};\r\n\r\n/**\r\n * Update the query button depending on current query status. If no query status is passed via the parameter, it auto-detects the current query status\r\n *\r\n * @param {doc} YASQE document\r\n * @param status {string|null, \"busy\"|\"valid\"|\"error\"}\r\n */\r\nroot.updateQueryButton = function (yasqe, status) {\r\n\tvar queryButton = $(yasqe.getWrapperElement()).find(\".yasqe_queryButton\");\r\n\tif (queryButton.length == 0) return; //no query button drawn\r\n\r\n\t//detect status\r\n\tif (!status) {\r\n\t\tstatus = \"valid\";\r\n\t\tif (yasqe.queryValid === false) status = \"error\";\r\n\t}\r\n\r\n\tif (status != yasqe.queryStatus) {\r\n\t\tqueryButton\r\n\t\t\t.empty()\r\n\t\t\t.removeClass(function (index, classNames) {\r\n\t\t\t\treturn classNames.split(\" \").filter(function (c) {\r\n\t\t\t\t\t//remove classname from previous status\r\n\t\t\t\t\treturn c.indexOf(\"query_\") == 0;\r\n\t\t\t\t}).join(\" \");\r\n\t\t\t});\r\n\r\n\t\tif (status == \"busy\") {\r\n\t\t\tqueryButton.append($('<div>', {\r\n\t\t\t\tclass: 'loader',\r\n\t\t\t}));\r\n\t\t\tyasqe.queryStatus = status;\r\n\t\t} else if (status == \"valid\" || status == \"error\") {\r\n\t\t\tqueryButton.addClass(\"query_\" + status);\r\n\t\t\tyutils.svg.draw(queryButton, imgs[queryButtonIds[status]]);\r\n\t\t\tyasqe.queryStatus = status;\r\n\t\t}\r\n\t}\r\n};\r\n/**\r\n * Initialize YASQE from an existing text area (see http://codemirror.net/doc/manual.html#fromTextArea for more info)\r\n *\r\n * @method YASQE.fromTextArea\r\n * @param textArea {DOM element}\r\n * @param config {object}\r\n * @returns {doc} YASQE document\r\n */\r\nroot.fromTextArea = function (textAreaEl, config) {\r\n\tconfig = extendConfig(config);\r\n\t//add yasqe div as parent (needed for styles to be manageable and scoped).\r\n\t//In this case, I -also- put it as parent el of the text area. This is wrapped in a div now\r\n\tvar rootEl = $(\"<div>\", {\r\n\t\tclass: 'yasqe'\r\n\t}).insertBefore($(textAreaEl)).append($(textAreaEl));\r\n\tvar yasqe = extendCmInstance(CodeMirror.fromTextArea(textAreaEl, config));\r\n\tpostProcessCmElement(yasqe);\r\n\treturn yasqe;\r\n};\r\n\r\n\r\nroot.storeQuery = function (yasqe) {\r\n\tvar storageId = utils.getPersistencyId(yasqe, yasqe.options.persistent);\r\n\tif (storageId) {\r\n\t\tyutils.storage.set(storageId, yasqe.getValue(), \"month\");\r\n\t}\r\n};\r\nroot.commentLines = function (yasqe) {\r\n\tvar startLine = yasqe.getCursor(true).line;\r\n\tvar endLine = yasqe.getCursor(false).line;\r\n\tvar min = Math.min(startLine, endLine);\r\n\tvar max = Math.max(startLine, endLine);\r\n\r\n\t// if all lines start with #, remove this char. Otherwise add this char\r\n\tvar linesAreCommented = true;\r\n\tfor (var i = min; i <= max; i++) {\r\n\t\tvar line = yasqe.getLine(i);\r\n\t\tif (line.length == 0 || line.substring(0, 1) != \"#\") {\r\n\t\t\tlinesAreCommented = false;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tfor (var i = min; i <= max; i++) {\r\n\t\tif (linesAreCommented) {\r\n\t\t\t// lines are commented, so remove comments\r\n\t\t\tyasqe.replaceRange(\"\", {\r\n\t\t\t\tline: i,\r\n\t\t\t\tch: 0\r\n\t\t\t}, {\r\n\t\t\t\t\tline: i,\r\n\t\t\t\t\tch: 1\r\n\t\t\t\t});\r\n\t\t} else {\r\n\t\t\t// Not all lines are commented, so add comments\r\n\t\t\tyasqe.replaceRange(\"#\", {\r\n\t\t\t\tline: i,\r\n\t\t\t\tch: 0\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t}\r\n};\r\n\r\nroot.copyLineUp = function (yasqe) {\r\n\tvar cursor = yasqe.getCursor();\r\n\tvar lineCount = yasqe.lineCount();\r\n\t// First create new empty line at end of text\r\n\tyasqe.replaceRange(\"\\n\", {\r\n\t\tline: lineCount - 1,\r\n\t\tch: yasqe.getLine(lineCount - 1).length\r\n\t});\r\n\t// Copy all lines to their next line\r\n\tfor (var i = lineCount; i > cursor.line; i--) {\r\n\t\tvar line = yasqe.getLine(i - 1);\r\n\t\tyasqe.replaceRange(line, {\r\n\t\t\tline: i,\r\n\t\t\tch: 0\r\n\t\t}, {\r\n\t\t\t\tline: i,\r\n\t\t\t\tch: yasqe.getLine(i).length\r\n\t\t\t});\r\n\t}\r\n};\r\nroot.copyLineDown = function (yasqe) {\r\n\troot.copyLineUp(yasqe);\r\n\t// Make sure cursor goes one down (we are copying downwards)\r\n\tvar cursor = yasqe.getCursor();\r\n\tcursor.line++;\r\n\tyasqe.setCursor(cursor);\r\n};\r\nroot.doAutoFormat = function (yasqe) {\r\n\tif (yasqe.somethingSelected()) {\r\n\t\tvar to = {\r\n\t\t\tline: yasqe.getCursor(false).line,\r\n\t\t\tch: yasqe.getSelection().length\r\n\t\t};\r\n\t\tautoFormatRange(yasqe, yasqe.getCursor(true), to);\r\n\t} else {\r\n\t\tvar totalLines = yasqe.lineCount();\r\n\t\tvar totalChars = yasqe.getTextArea().value.length;\r\n\t\tautoFormatRange(yasqe, {\r\n\t\t\tline: 0,\r\n\t\t\tch: 0\r\n\t\t}, {\r\n\t\t\t\tline: totalLines,\r\n\t\t\t\tch: totalChars\r\n\t\t\t});\r\n\t}\r\n\r\n};\r\n\r\n\r\nvar autoFormatRange = function (yasqe, from, to) {\r\n\tvar absStart = yasqe.indexFromPos(from);\r\n\tvar absEnd = yasqe.indexFromPos(to);\r\n\t// Insert additional line breaks where necessary according to the\r\n\t// mode's syntax\r\n\tvar res = autoFormatLineBreaks(yasqe.getValue(), absStart, absEnd);\r\n\r\n\t// Replace and auto-indent the range\r\n\tyasqe.operation(function () {\r\n\t\tyasqe.replaceRange(res, from, to);\r\n\t\tvar startLine = yasqe.posFromIndex(absStart).line;\r\n\t\tvar endLine = yasqe.posFromIndex(absStart + res.length).line;\r\n\t\tfor (var i = startLine; i <= endLine; i++) {\r\n\t\t\tyasqe.indentLine(i, \"smart\");\r\n\t\t}\r\n\t});\r\n};\r\n\r\nvar autoFormatLineBreaks = function (text, start, end) {\r\n\ttext = text.substring(start, end);\r\n\tvar breakAfterArray = [\r\n\t\t[\"keyword\", \"ws\", \"prefixed\", \"ws\", \"uri\"], // i.e. prefix declaration\r\n\t\t[\"keyword\", \"ws\", \"uri\"] // i.e. base\r\n\t];\r\n\tvar breakAfterCharacters = [\"{\", \".\", \";\"];\r\n\tvar breakBeforeCharacters = [\"}\"];\r\n\tvar getBreakType = function (stringVal, type) {\r\n\t\tfor (var i = 0; i < breakAfterArray.length; i++) {\r\n\t\t\tif (stackTrace.valueOf().toString() == breakAfterArray[i].valueOf()\r\n\t\t\t\t.toString()) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (var i = 0; i < breakAfterCharacters.length; i++) {\r\n\t\t\tif (stringVal == breakAfterCharacters[i]) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (var i = 0; i < breakBeforeCharacters.length; i++) {\r\n\t\t\t// don't want to issue 'breakbefore' AND 'breakafter', so check\r\n\t\t\t// current line\r\n\t\t\tif ($.trim(currentLine) != '' && stringVal == breakBeforeCharacters[i]) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn 0;\r\n\t};\r\n\tvar formattedQuery = \"\";\r\n\tvar currentLine = \"\";\r\n\tvar stackTrace = [];\r\n\tCodeMirror.runMode(text, \"sparql11\", function (stringVal, type) {\r\n\t\tstackTrace.push(type);\r\n\t\tvar breakType = getBreakType(stringVal, type);\r\n\t\tif (breakType != 0) {\r\n\t\t\tif (breakType == 1) {\r\n\t\t\t\tformattedQuery += stringVal + \"\\n\";\r\n\t\t\t\tcurrentLine = \"\";\r\n\t\t\t} else { // (-1)\r\n\t\t\t\tformattedQuery += \"\\n\" + stringVal;\r\n\t\t\t\tcurrentLine = stringVal;\r\n\t\t\t}\r\n\t\t\tstackTrace = [];\r\n\t\t} else {\r\n\t\t\tcurrentLine += stringVal;\r\n\t\t\tformattedQuery += stringVal;\r\n\t\t}\r\n\t\tif (stackTrace.length == 1 && stackTrace[0] == \"sp-ws\")\r\n\t\t\tstackTrace = [];\r\n\t});\r\n\treturn $.trim(formattedQuery.replace(/\\n\\s*\\n/g, '\\n'));\r\n};\r\n\r\nrequire('./sparql.js'),\r\n\trequire('./defaults.js');\r\nroot.$ = $;\r\nroot.version = {\r\n\t\"CodeMirror\": CodeMirror.version,\r\n\t\"YASQE\": require(\"../package.json\").version,\r\n\t\"jquery\": $.fn.jquery,\r\n\t\"yasgui-utils\": yutils.version\r\n};\r\n",
    "var CodeMirror = (function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})(),\r\n\ttokenUtils = require('./tokenUtils.js');\r\n\r\n\"use strict\";\r\nvar lookFor = \"PREFIX\";\r\nmodule.exports = {\r\n\tfindFirstPrefixLine: function(cm) {\r\n\t\tvar lastLine = cm.lastLine();\r\n\t\tfor (var i = 0; i <= lastLine; ++i) {\r\n\t\t\tif (findFirstPrefix(cm, i) >= 0) {\r\n\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction findFirstPrefix(cm, line, ch, lineText) {\r\n\tif (!ch) ch = 0;\r\n\tif (!lineText) lineText = cm.getLine(line);\r\n\tlineText = lineText.toUpperCase();\r\n\tfor (var at = ch, pass = 0;;) {\r\n\t\tvar found = lineText.indexOf(lookFor, at);\r\n\t\tif (found == -1) {\r\n\t\t\tif (pass == 1)\r\n\t\t\t\tbreak;\r\n\t\t\tpass = 1;\r\n\t\t\tat = lineText.length;\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif (pass == 1 && found < ch)\r\n\t\t\tbreak;\r\n\t\ttokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\r\n\t\tif (!/^(comment|string)/.test(tokenType))\r\n\t\t\treturn found + 1;\r\n\t\tat = found - 1;\r\n\t}\r\n}\r\n\r\nCodeMirror.registerHelper(\"fold\", \"prefix\", function(cm, start) {\r\n\tvar line = start.line,\r\n\t\tlineText = cm.getLine(line);\r\n\r\n\tvar startCh, tokenType;\r\n\r\n\tfunction hasPreviousPrefix() {\r\n\t\tvar hasPreviousPrefix = false;\r\n\t\tfor (var i = line - 1; i >= 0; i--) {\r\n\t\t\tif (cm.getLine(i).toUpperCase().indexOf(lookFor) >= 0) {\r\n\t\t\t\thasPreviousPrefix = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn hasPreviousPrefix;\r\n\t}\r\n\r\n\r\n\tfunction findOpening(openCh) {\r\n\t\tfor (var at = start.ch, pass = 0;;) {\r\n\t\t\tvar found = at <= 0 ? -1 : lineText.lastIndexOf(openCh, at - 1);\r\n\t\t\tif (found == -1) {\r\n\t\t\t\tif (pass == 1)\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tpass = 1;\r\n\t\t\t\tat = lineText.length;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif (pass == 1 && found < start.ch)\r\n\t\t\t\tbreak;\r\n\t\t\ttokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\r\n\t\t\tif (!/^(comment|string)/.test(tokenType))\r\n\t\t\t\treturn found + 1;\r\n\t\t\tat = found - 1;\r\n\t\t}\r\n\t}\r\n\tvar getLastPrefixPos = function(line, ch) {\r\n\t\tvar prefixKeywordToken = cm.getTokenAt(CodeMirror.Pos(line, ch + 1));\r\n\t\tif (!prefixKeywordToken || prefixKeywordToken.type != \"keyword\") return -1;\r\n\t\tvar prefixShortname = tokenUtils.getNextNonWsToken(cm, line, prefixKeywordToken.end + 1);\r\n\t\tif (!prefixShortname || prefixShortname.type != \"string-2\") return -1; //missing prefix keyword shortname\r\n\t\tvar prefixUri = tokenUtils.getNextNonWsToken(cm, line, prefixShortname.end + 1);\r\n\t\tif (!prefixUri || prefixUri.type != \"variable-3\") return -1; //missing prefix uri\r\n\t\treturn prefixUri.end;\r\n\t}\r\n\r\n\t//only use opening prefix declaration\r\n\tif (hasPreviousPrefix())\r\n\t\treturn;\r\n\tvar prefixStart = findFirstPrefix(cm, line, start.ch, lineText);\r\n\r\n\tif (prefixStart == null)\r\n\t\treturn;\r\n\tvar stopAt = '{'; //if this char is there, we won't have a chance of finding more prefixes\r\n\tvar stopAtNextLine = false;\r\n\tvar count = 1,\r\n\t\tlastLine = cm.lastLine(),\r\n\t\tend, endCh;\r\n\tvar prefixEndChar = getLastPrefixPos(line, prefixStart);\r\n\tvar prefixEndLine = line;\r\n\r\n\touter: for (var i = line; i <= lastLine; ++i) {\r\n\t\tif (stopAtNextLine)\r\n\t\t\tbreak;\r\n\t\tvar text = cm.getLine(i),\r\n\t\t\tpos = i == line ? prefixStart + 1 : 0;\r\n\r\n\t\tfor (;;) {\r\n\t\t\tif (!stopAtNextLine && text.indexOf(stopAt) >= 0)\r\n\t\t\t\tstopAtNextLine = true;\r\n\r\n\t\t\tvar nextPrefixDeclaration = text.toUpperCase()\r\n\t\t\t\t.indexOf(lookFor, pos);\r\n\r\n\t\t\tif (nextPrefixDeclaration >= 0) {\r\n\t\t\t\tif ((endCh = getLastPrefixPos(i, nextPrefixDeclaration)) > 0) {\r\n\t\t\t\t\tprefixEndChar = endCh;\r\n\t\t\t\t\tprefixEndLine = i;\r\n\t\t\t\t\tpos = prefixEndChar;\r\n\t\t\t\t}\r\n\t\t\t\tpos++;\r\n\t\t\t} else {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn {\r\n\t\tfrom: CodeMirror.Pos(line, prefixStart + lookFor.length),\r\n\t\tto: CodeMirror.Pos(prefixEndLine, prefixEndChar)\r\n\t};\r\n});",
    "'use strict';\r\n/**\r\n * Append prefix declaration to list of prefixes in query window.\r\n * \r\n * @param yasqe\r\n * @param prefix\r\n */\r\nvar addPrefixes = function(yasqe, prefixes) {\r\n\tvar existingPrefixes = yasqe.getPrefixesFromQuery();\r\n\t//for backwards compatability, we stil support prefixes value as string (e.g. 'rdf: <http://fbfgfgf>'\r\n\tif (typeof prefixes == \"string\") {\r\n\t\taddPrefixAsString(yasqe, prefixes);\r\n\t} else {\r\n\t\tfor (var pref in prefixes) {\r\n\t\t\tif (!(pref in existingPrefixes))\r\n\t\t\t\taddPrefixAsString(yasqe, pref + \": <\" + prefixes[pref] + \">\");\r\n\t\t}\r\n\t}\r\n\tyasqe.collapsePrefixes(false);\r\n};\r\n\r\nvar addPrefixAsString = function(yasqe, prefixString) {\r\n\tvar lastPrefix = null;\r\n\tvar lastPrefixLine = 0;\r\n\tvar numLines = yasqe.lineCount();\r\n\tfor (var i = 0; i < numLines; i++) {\r\n\t\tvar firstToken = yasqe.getNextNonWsToken(i);\r\n\t\tif (firstToken != null && (firstToken.string == \"PREFIX\" || firstToken.string == \"BASE\")) {\r\n\t\t\tlastPrefix = firstToken;\r\n\t\t\tlastPrefixLine = i;\r\n\t\t}\r\n\t}\r\n\r\n\tif (lastPrefix == null) {\r\n\t\tyasqe.replaceRange(\"PREFIX \" + prefixString + \"\\n\", {\r\n\t\t\tline: 0,\r\n\t\t\tch: 0\r\n\t\t});\r\n\t} else {\r\n\t\tvar previousIndent = getIndentFromLine(yasqe, lastPrefixLine);\r\n\t\tyasqe.replaceRange(\"\\n\" + previousIndent + \"PREFIX \" + prefixString, {\r\n\t\t\tline: lastPrefixLine\r\n\t\t});\r\n\t}\r\n\tyasqe.collapsePrefixes(false);\r\n};\r\nvar removePrefixes = function(yasqe, prefixes) {\r\n\tvar escapeRegex = function(string) {\r\n\t\t//taken from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript/3561711#3561711\r\n\t\treturn string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\r\n\t}\r\n\tfor (var pref in prefixes) {\r\n\t\tyasqe.setValue(yasqe.getValue().replace(new RegExp(\"PREFIX\\\\s*\" + pref + \":\\\\s*\" + escapeRegex(\"<\" + prefixes[pref] + \">\") + \"\\\\s*\", \"ig\"), ''));\r\n\t}\r\n\tyasqe.collapsePrefixes(false);\r\n\r\n};\r\n\r\n/**\r\n * Get defined prefixes from query as array, in format {\"prefix:\" \"uri\"}\r\n * \r\n * @param cm\r\n * @returns {Array}\r\n */\r\nvar getPrefixesFromQuery = function(yasqe) {\r\n\tvar queryPrefixes = {};\r\n\tvar shouldContinue = true;\r\n\tvar getPrefixesFromLine = function(lineOffset, colOffset) {\r\n\t\tif (!shouldContinue) return;\r\n\t\tif (!colOffset) colOffset = 1;\r\n\t\tvar token = yasqe.getNextNonWsToken(i, colOffset);\r\n\t\tif (token) {\r\n\t\t\tif (token.state.possibleCurrent.indexOf(\"PREFIX\") == -1 && token.state.possibleNext.indexOf(\"PREFIX\") == -1) shouldContinue = false; //we are beyond the place in the query where we can enter prefixes\r\n\t\t\tif (token.string.toUpperCase() == \"PREFIX\") {\r\n\t\t\t\tvar prefix = yasqe.getNextNonWsToken(i, token.end + 1);\r\n\t\t\t\tif (prefix) {\r\n\t\t\t\t\tvar uri = yasqe.getNextNonWsToken(i, prefix.end + 1);\r\n\t\t\t\t\tif (uri) {\r\n\t\t\t\t\t\tvar uriString = uri.string;\r\n\t\t\t\t\t\tif (uriString.indexOf(\"<\") == 0)\r\n\t\t\t\t\t\t\turiString = uriString.substring(1);\r\n\t\t\t\t\t\tif (uriString.slice(-1) == \">\")\r\n\t\t\t\t\t\t\turiString = uriString\r\n\t\t\t\t\t\t\t.substring(0, uriString.length - 1);\r\n\t\t\t\t\t\tqueryPrefixes[prefix.string.slice(0, -1)] = uriString;\r\n\r\n\t\t\t\t\t\tgetPrefixesFromLine(lineOffset, uri.end + 1);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tgetPrefixesFromLine(lineOffset, prefix.end + 1);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tgetPrefixesFromLine(lineOffset, token.end + 1);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tgetPrefixesFromLine(lineOffset, token.end + 1);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\r\n\tvar numLines = yasqe.lineCount();\r\n\tfor (var i = 0; i < numLines; i++) {\r\n\t\tif (!shouldContinue) break;\r\n\t\tgetPrefixesFromLine(i);\r\n\r\n\t}\r\n\treturn queryPrefixes;\r\n};\r\n\r\n/**\r\n * Get the used indentation for a certain line\r\n * \r\n * @param yasqe\r\n * @param line\r\n * @param charNumber\r\n * @returns\r\n */\r\nvar getIndentFromLine = function(yasqe, line, charNumber) {\r\n\tif (charNumber == undefined)\r\n\t\tcharNumber = 1;\r\n\tvar token = yasqe.getTokenAt({\r\n\t\tline: line,\r\n\t\tch: charNumber\r\n\t});\r\n\tif (token == null || token == undefined || token.type != \"ws\") {\r\n\t\treturn \"\";\r\n\t} else {\r\n\t\treturn token.string + getIndentFromLine(yasqe, line, token.end + 1);\r\n\t};\r\n};\r\n\r\nmodule.exports = {\r\n\taddPrefixes: addPrefixes,\r\n\tgetPrefixesFromQuery: getPrefixesFromQuery,\r\n\tremovePrefixes: removePrefixes\r\n};",
    "'use strict';\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\r\n\tutils = require('./utils.js'),\r\n\tYASQE = require('./main.js');\r\n\r\nYASQE.executeQuery = function (yasqe, callbackOrConfig) {\r\n\r\n\tfunction getCookie(cname) {\r\n\t\tvar name = cname + \"=\";\r\n\t\tvar ca = document.cookie.split(';');\r\n\t\tfor (var i = 0; i < ca.length; i++) {\r\n\t\t\tvar c = ca[i];\r\n\t\t\twhile (c.charAt(0) == ' ') c = c.substring(1);\r\n\t\t\tif (c.indexOf(name) == 0) return decodeURIComponent(c.substring(name.length, c.length));\r\n\t\t}\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\t// TODO: find a way to get this from the security module in angular\r\n\tvar port = window.location.port;\r\n\tif (!port) {\r\n\t\tif (window.location.protocol == 'https:') {\r\n\t\t\tport = \"443\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\tport = \"80\";\r\n\t\t}\r\n\t}\r\n\tvar graphDBAuth = utils.getCookie('com.ontotext.graphdb.auth' + port);\r\n\tif (graphDBAuth != '') {\r\n\t\t$.ajaxSetup({\r\n\t\t\theaders: {\r\n\t\t\t\t'X-AUTH-TOKEN': graphDBAuth\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n};\r\n\r\nYASQE.getAjaxConfig = function (yasqe, callbackOrConfig) {\r\n\tvar callback = (typeof callbackOrConfig == \"function\" ? callbackOrConfig : null);\r\n\tvar config = (typeof callbackOrConfig == \"object\" ? callbackOrConfig : {});\r\n\r\n\tif (yasqe.options.sparql)\r\n\t\tconfig = $.extend({}, yasqe.options.sparql, config);\r\n\r\n\t//for backwards compatability, make sure we copy sparql handlers to sparql callbacks\r\n\tif (config.handlers)\r\n\t\t$.extend(true, config.callbacks, config.handlers);\r\n\r\n\r\n\tif (!config.endpoint || config.endpoint.length == 0)\r\n\t\treturn; // nothing to query!\r\n\r\n\t/**\r\n\t * initialize ajax config\r\n\t */\r\n\tvar ajaxConfig = {\r\n\t\turl: (typeof config.endpoint == \"function\" ? config.endpoint(yasqe) : config.endpoint),\r\n\t\ttype: (typeof config.requestMethod == \"function\" ? config.requestMethod(yasqe) : config.requestMethod),\r\n\t\theaders: {\r\n\t\t\tAccept: getAcceptHeader(yasqe, config),\r\n\t\t}\r\n\t};\r\n\tif (config.xhrFields) ajaxConfig.xhrFields = config.xhrFields;\r\n\t/**\r\n\t * add complete, beforesend, etc callbacks (if specified)\r\n\t */\r\n\tvar handlerDefined = false;\r\n\tif (config.callbacks) {\r\n\t\tfor (var handler in config.callbacks) {\r\n\t\t\tif (config.callbacks[handler]) {\r\n\t\t\t\thandlerDefined = true;\r\n\t\t\t\tajaxConfig[handler] = config.callbacks[handler];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (ajaxConfig.type === 'GET') {\r\n\t\t//we need to do encoding ourselve, as jquery does not properly encode the url string\r\n\t\t//https://github.com/OpenTriply/YASGUI/issues/75\r\n\t\tvar first = true;\r\n\t\t$.each(yasqe.getUrlArguments(config), function (key, val) {\r\n\t\t\tajaxConfig.url += (first ? '?' : '&') + val.name + '=' + encodeURIComponent(val.value);\r\n\t\t\tfirst = false;\r\n\t\t});\r\n\t} else {\r\n\t\tajaxConfig.data = yasqe.getUrlArguments(config);\r\n\t\tvar countAjaxConfig = {};\r\n\t\t$.extend(true, countAjaxConfig, ajaxConfig);\r\n\t\tif (window.editor.getQueryMode() != \"update\") {\r\n\t\t\tif (config.callbacks.countCallback && (typeof config.callbacks.countCallback == \"function\")) {\r\n\t\t\t\tcountAjaxConfig.data = countAjaxConfig.data.filter(function (o) {\r\n\t\t\t\t\treturn o.name != 'offset' && o.name != 'limit';\r\n\t\t\t\t});\r\n\t\t\t\tcountAjaxConfig.data.push({ name: 'count', value: '1' });\r\n\t\t\t\tcountAjaxConfig.complete = config.callbacks.countCallback;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (config.setQueryLimit && (typeof config.setQueryLimit == \"function\")) {\r\n\t\t\tajaxConfig.data.forEach(function (o) {\r\n\t\t\t\tif (o.name == \"query\") {\r\n\t\t\t\t\to.value = config.setQueryLimit(o.value);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\tif (!handlerDefined && !callback)\r\n\t\treturn; // ok, we can query, but have no callbacks. just stop now\r\n\r\n\t// if only callback is passed as arg, add that on as 'onComplete' callback\r\n\tif (callback)\r\n\t\tajaxConfig.complete = callback;\r\n\r\n\r\n\r\n\t/**\r\n\t * merge additional request headers\r\n\t */\r\n\tif (config.headers && !$.isEmptyObject(config.headers))\r\n\t\t$.extend(ajaxConfig.headers, config.headers);\r\n\r\n\r\n\tvar queryStart = new Date();\r\n\tvar updateYasqe = function () {\r\n\t\tyasqe.lastQueryDuration = new Date() - queryStart;\r\n\t\tYASQE.updateQueryButton(yasqe);\r\n\t\tyasqe.setBackdrop(false);\r\n\t};\r\n\tvar executeCount = function (event, jqXHR, ajaxOptions) {\r\n\t\twindow.editor && 200 === event.status && $.ajax(countAjaxConfig);\r\n\t};\r\n\t//Make sure the query button is updated again on complete\r\n\tvar completeCallbacks = [\r\n\t\tfunction () { require('./main.js').signal(yasqe, 'queryFinish', arguments); },\r\n\t\tupdateYasqe\r\n\t];\r\n\r\n\tif (ajaxConfig.complete) {\r\n\t\tcompleteCallbacks.push(ajaxConfig.complete);\r\n\t\tcompleteCallbacks.push(executeCount);\r\n\t}\r\n\tajaxConfig.complete = completeCallbacks;\r\n\treturn ajaxConfig;\r\n};\r\n\r\n\r\n\r\nYASQE.executeQuery = function (yasqe, callbackOrConfig) {\r\n\tYASQE.signal(yasqe, 'query', yasqe, callbackOrConfig);\r\n\tYASQE.updateQueryButton(yasqe, \"busy\");\r\n\tyasqe.setBackdrop(true);\r\n\t// var config = (typeof callbackOrConfig == \"object\" ? callbackOrConfig : {});\r\n\t// if (config.callbacks.resetResults && (typeof config.callbacks.resetResults == \"function\")) {\r\n\t// \tconfig.callbacks.resetResults();\r\n\t// }\r\n\tyasqe.xhr = $.ajax(YASQE.getAjaxConfig(yasqe, callbackOrConfig));\r\n};\r\n\r\n\r\nYASQE.getUrlArguments = function (yasqe, config) {\r\n\tvar queryMode = yasqe.getQueryMode();\r\n\tvar data = [{\r\n\t\tname: utils.getString(yasqe, yasqe.options.sparql.queryName),\r\n\t\tvalue: (config.getQueryForAjax ? config.getQueryForAjax(yasqe) : yasqe.getValue())\r\n\t}];\r\n\r\n\t/**\r\n\t * add named graphs to ajax config\r\n\t */\r\n\tif (config.namedGraphs && config.namedGraphs.length > 0) {\r\n\t\tvar argName = (queryMode == \"query\" ? \"named-graph-uri\" : \"using-named-graph-uri \");\r\n\t\tfor (var i = 0; i < config.namedGraphs.length; i++)\r\n\t\t\tdata.push({\r\n\t\t\t\tname: argName,\r\n\t\t\t\tvalue: config.namedGraphs[i]\r\n\t\t\t});\r\n\t}\r\n\t/**\r\n\t * add default graphs to ajax config\r\n\t */\r\n\tif (config.defaultGraphs && config.defaultGraphs.length > 0) {\r\n\t\tvar argName = (queryMode == \"query\" ? \"default-graph-uri\" : \"using-graph-uri \");\r\n\t\tfor (var i = 0; i < config.defaultGraphs.length; i++)\r\n\t\t\tdata.push({\r\n\t\t\t\tname: argName,\r\n\t\t\t\tvalue: config.defaultGraphs[i]\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * add additional request args\r\n\t */\r\n\tif (config.args && config.args.length > 0) $.merge(data, config.args);\r\n\r\n\treturn data;\r\n};\r\nvar getAcceptHeader = function (yasqe, config) {\r\n\tvar acceptHeader = null;\r\n\tif (config.acceptHeader && !config.acceptHeaderGraph && !config.acceptHeaderSelect && !config.acceptHeaderUpdate) {\r\n\t\t//this is the old config. For backwards compatability, keep supporting it\r\n\t\tif (typeof config.acceptHeader == \"function\") {\r\n\t\t\tacceptHeader = config.acceptHeader(yasqe);\r\n\t\t} else {\r\n\t\t\tacceptHeader = config.acceptHeader;\r\n\t\t}\r\n\t} else {\r\n\t\tif (yasqe.getQueryMode() == \"update\") {\r\n\t\t\tacceptHeader = (typeof config.acceptHeader == \"function\" ? config.acceptHeaderUpdate(yasqe) : config.acceptHeaderUpdate);\r\n\t\t} else {\r\n\t\t\tvar qType = yasqe.getQueryType();\r\n\t\t\tif (qType == \"DESCRIBE\" || qType == \"CONSTRUCT\") {\r\n\t\t\t\tacceptHeader = (typeof config.acceptHeaderGraph == \"function\" ? config.acceptHeaderGraph(yasqe) : config.acceptHeaderGraph);\r\n\t\t\t} else {\r\n\t\t\t\tacceptHeader = (typeof config.acceptHeaderSelect == \"function\" ? config.acceptHeaderSelect(yasqe) : config.acceptHeaderSelect);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn acceptHeader;\r\n};\r\n\r\nmodule.exports = {\r\n\tgetAjaxConfig: YASQE.getAjaxConfig\r\n};\r\n",
    "'use strict';\r\n/**\r\n * When typing a query, this query is sometimes syntactically invalid, causing\r\n * the current tokens to be incorrect This causes problem for autocompletion.\r\n * http://bla might result in two tokens: http:// and bla. We'll want to combine\r\n * these\r\n * \r\n * @param yasqe {doc}\r\n * @param token {object}\r\n * @param cursor {object}\r\n * @return token {object}\r\n * @method YASQE.getCompleteToken\r\n */\r\nvar getCompleteToken = function(yasqe, token, cur) {\r\n\tif (!cur) {\r\n\t\tcur = yasqe.getCursor();\r\n\t}\r\n\tif (!token) {\r\n\t\ttoken = yasqe.getTokenAt(cur);\r\n\t}\r\n\tvar prevToken = yasqe.getTokenAt({\r\n\t\tline: cur.line,\r\n\t\tch: token.start\r\n\t});\r\n\t// not start of line, and not whitespace\r\n\tif (\r\n\t\tprevToken.type != null && prevToken.type != \"ws\" && token.type != null && token.type != \"ws\"\r\n\t) {\r\n\t\ttoken.start = prevToken.start;\r\n\t\ttoken.string = prevToken.string + token.string;\r\n\t\treturn getCompleteToken(yasqe, token, {\r\n\t\t\tline: cur.line,\r\n\t\t\tch: prevToken.start\r\n\t\t}); // recursively, might have multiple tokens which it should include\r\n\t} else if (token.type != null && token.type == \"ws\") {\r\n\t\t//always keep 1 char of whitespace between tokens. Otherwise, autocompletions might end up next to the previous node, without whitespace between them\r\n\t\ttoken.start = token.start + 1;\r\n\t\ttoken.string = token.string.substring(1);\r\n\t\treturn token;\r\n\t} else {\r\n\t\treturn token;\r\n\t}\r\n};\r\nvar getPreviousNonWsToken = function(yasqe, line, token) {\r\n\tvar previousToken = yasqe.getTokenAt({\r\n\t\tline: line,\r\n\t\tch: token.start\r\n\t});\r\n\tif (previousToken != null && previousToken.type == \"ws\") {\r\n\t\tpreviousToken = getPreviousNonWsToken(yasqe, line, previousToken);\r\n\t}\r\n\treturn previousToken;\r\n}\r\nvar getNextNonWsToken = function(yasqe, lineNumber, charNumber) {\r\n\tif (charNumber == undefined)\r\n\t\tcharNumber = 1;\r\n\tvar token = yasqe.getTokenAt({\r\n\t\tline: lineNumber,\r\n\t\tch: charNumber\r\n\t});\r\n\tif (token == null || token == undefined || token.end < charNumber) {\r\n\t\treturn null;\r\n\t}\r\n\tif (token.type == \"ws\") {\r\n\t\treturn getNextNonWsToken(yasqe, lineNumber, token.end + 1);\r\n\t}\r\n\treturn token;\r\n};\r\n\r\nmodule.exports = {\r\n\tgetPreviousNonWsToken: getPreviousNonWsToken,\r\n\tgetCompleteToken: getCompleteToken,\r\n\tgetNextNonWsToken: getNextNonWsToken,\r\n};",
    "'use strict';\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\r\n\tutils = require('./utils.js');\r\n\r\n/**\r\n * Write our own tooltip, to avoid loading another library for just this functionality. For now, we only use tooltip for showing parse errors, so this is quite a tailored solution\r\n * Requirements: \r\n * \t\tposition tooltip within codemirror frame as much as possible, to avoid z-index issues with external things on page\r\n * \t\tuse html as content\r\n */\r\nmodule.exports = function(yasqe, parent, html) {\r\n\tvar parent = $(parent);\r\n\tvar tooltip;\r\n\tparent.hover(function() {\r\n\t\t\tif (typeof html == \"function\") html = html();\r\n\t\t\ttooltip = $(\"<div>\").addClass('yasqe_tooltip').html(html).appendTo(parent);\r\n\t\t\trepositionTooltip();\r\n\t\t},\r\n\t\tfunction() {\r\n\t\t\t$(\".yasqe_tooltip\").remove();\r\n\t\t});\r\n\r\n\r\n\r\n\t/**\r\n\t * only need to take into account top and bottom offset for this usecase\r\n\t */\r\n\tvar repositionTooltip = function() {\r\n\t\tif ($(yasqe.getWrapperElement()).offset().top >= tooltip.offset().top) {\r\n\t\t\t//shit, move the tooltip down. The tooltip now hovers over the top edge of the yasqe instance\r\n\t\t\ttooltip.css('bottom', 'auto');\r\n\t\t\ttooltip.css('top', '26px');\r\n\t\t}\r\n\t};\r\n};",
    "'use strict';\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\n\r\nvar keyExists = function(objectToTest, key) {\r\n\tvar exists = false;\r\n\ttry {\r\n\t\tif (objectToTest[key] !== undefined)\r\n\t\t\texists = true;\r\n\t} catch (e) {}\r\n\treturn exists;\r\n};\r\n\r\nvar getPersistencyId = function(yasqe, persistentIdCreator) {\r\n\tvar persistencyId = null;\r\n\r\n\tif (persistentIdCreator) {\r\n\t\tif (typeof persistentIdCreator == \"string\") {\r\n\t\t\tpersistencyId = persistentIdCreator;\r\n\t\t} else {\r\n\t\t\tpersistencyId = persistentIdCreator(yasqe);\r\n\t\t}\r\n\t}\r\n\treturn persistencyId;\r\n};\r\n\r\nvar elementsOverlap = (function() {\r\n\tfunction getPositions(elem) {\r\n\t\tvar pos, width, height;\r\n\t\tpos = $(elem).offset();\r\n\t\twidth = $(elem).width();\r\n\t\theight = $(elem).height();\r\n\t\treturn [\r\n\t\t\t[pos.left, pos.left + width],\r\n\t\t\t[pos.top, pos.top + height]\r\n\t\t];\r\n\t}\r\n\r\n\tfunction comparePositions(p1, p2) {\r\n\t\tvar r1, r2;\r\n\t\tr1 = p1[0] < p2[0] ? p1 : p2;\r\n\t\tr2 = p1[0] < p2[0] ? p2 : p1;\r\n\t\treturn r1[1] > r2[0] || r1[0] === r2[0];\r\n\t}\r\n\r\n\treturn function(a, b) {\r\n\t\tvar pos1 = getPositions(a),\r\n\t\t\tpos2 = getPositions(b);\r\n\t\treturn comparePositions(pos1[0], pos2[0]) && comparePositions(pos1[1], pos2[1]);\r\n\t};\r\n})();\r\n\r\nvar getString = function(yasqe, item) {\r\n\tif (typeof item == \"function\") {\r\n\t\treturn item(yasqe);\r\n\t} else {\r\n\t\treturn item;\r\n\t}\r\n}\r\nmodule.exports = {\r\n\tkeyExists: keyExists,\r\n\tgetPersistencyId: getPersistencyId,\r\n\telementsOverlap: elementsOverlap,\r\n\tgetString:getString\r\n};\r\n"
  ]
}